
G431_Test_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001818  08004da4  08004da4  00014da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065bc  080065bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080065bc  080065bc  000165bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065c4  080065c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065c4  080065c4  000165c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065c8  080065c8  000165c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080065cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  0800663c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  0800663c  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e22e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbc  00000000  00000000  0002e2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00030290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  00030d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8f2  00000000  00000000  000317f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d52c  00000000  00000000  0004f0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8f98  00000000  00000000  0005c60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001155a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030ec  00000000  00000000  001155f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004d8c 	.word	0x08004d8c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004d8c 	.word	0x08004d8c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b0af      	sub	sp, #188	; 0xbc
 80005d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f001 fcd5 	bl	8001f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f89b 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f97d 	bl	80008e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e6:	f000 f92f 	bl	8000848 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005ea:	f000 f8e1 	bl	80007b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  send_debug_logs ( "\nStart the application." ) ;
 80005ee:	4842      	ldr	r0, [pc, #264]	; (80006f8 <main+0x124>)
 80005f0:	f000 f9da 	bl	80009a8 <send_debug_logs>
  reset_astronode () ;
 80005f4:	f000 fa06 	bl	8000a04 <reset_astronode>
  uint32_t print_housekeeping_timer = get_systick () ;
 80005f8:	f000 fa36 	bl	8000a68 <get_systick>
 80005fc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  astronode_send_cfg_wr ( true , false , true , false , true , true , true , false ) ;
 8000600:	2300      	movs	r3, #0
 8000602:	9303      	str	r3, [sp, #12]
 8000604:	2301      	movs	r3, #1
 8000606:	9302      	str	r3, [sp, #8]
 8000608:	2301      	movs	r3, #1
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2301      	movs	r3, #1
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	2201      	movs	r2, #1
 8000614:	2100      	movs	r1, #0
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fc12 	bl	8000e40 <astronode_send_cfg_wr>
  astronode_send_cfg_sr () ;
 800061c:	f000 fbda 	bl	8000dd4 <astronode_send_cfg_sr>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (is_evt_pin_high())
 8000620:	f000 fa54 	bl	8000acc <is_evt_pin_high>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d029      	beq.n	800067e <main+0xaa>
	  {
		  send_debug_logs("Evt pin is high.");
 800062a:	4834      	ldr	r0, [pc, #208]	; (80006fc <main+0x128>)
 800062c:	f000 f9bc 	bl	80009a8 <send_debug_logs>
		  astronode_send_evt_rr();
 8000630:	f000 fc9a 	bl	8000f68 <astronode_send_evt_rr>
		  if (is_sak_available())
 8000634:	f001 f8e2 	bl	80017fc <is_sak_available>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d008      	beq.n	8000650 <main+0x7c>
		  {
			  astronode_send_sak_rr();
 800063e:	f000 fdd7 	bl	80011f0 <astronode_send_sak_rr>
			  astronode_send_sak_cr();
 8000642:	f000 fe27 	bl	8001294 <astronode_send_sak_cr>
			  send_debug_logs("Message has been acknowledged.");
 8000646:	482e      	ldr	r0, [pc, #184]	; (8000700 <main+0x12c>)
 8000648:	f000 f9ae 	bl	80009a8 <send_debug_logs>
			  astronode_send_per_rr();
 800064c:	f000 fe9c 	bl	8001388 <astronode_send_per_rr>
		  }
		  if (is_astronode_reset())
 8000650:	f001 f8e0 	bl	8001814 <is_astronode_reset>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d004      	beq.n	8000664 <main+0x90>
		  {
			  send_debug_logs("Terminal has been reset.");
 800065a:	482a      	ldr	r0, [pc, #168]	; (8000704 <main+0x130>)
 800065c:	f000 f9a4 	bl	80009a8 <send_debug_logs>
			  astronode_send_res_cr();
 8000660:	f000 fd88 	bl	8001174 <astronode_send_res_cr>
		  }
		  if (is_command_available())
 8000664:	f001 f8e2 	bl	800182c <is_command_available>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d033      	beq.n	80006d6 <main+0x102>
		  {
			  send_debug_logs("Unicast command is available");
 800066e:	4826      	ldr	r0, [pc, #152]	; (8000708 <main+0x134>)
 8000670:	f000 f99a 	bl	80009a8 <send_debug_logs>
			  astronode_send_cmd_rr();
 8000674:	f000 ffc4 	bl	8001600 <astronode_send_cmd_rr>
			  astronode_send_cmd_cr();
 8000678:	f000 ff84 	bl	8001584 <astronode_send_cmd_cr>
 800067c:	e02b      	b.n	80006d6 <main+0x102>
		  }
	  }
	  else if ( is_message_available () )
 800067e:	f000 fa35 	bl	8000aec <is_message_available>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d026      	beq.n	80006d6 <main+0x102>
	  {
		  send_debug_logs("The button is pressed.");
 8000688:	4820      	ldr	r0, [pc, #128]	; (800070c <main+0x138>)
 800068a:	f000 f98d 	bl	80009a8 <send_debug_logs>

		  g_payload_id_counter++;
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <main+0x13c>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	b29a      	uxth	r2, r3
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <main+0x13c>)
 8000698:	801a      	strh	r2, [r3, #0]
		  char payload[ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES] = {0};
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	229c      	movs	r2, #156	; 0x9c
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fed4 	bl	8004454 <memset>

		  sprintf(payload, "Test message %d", g_payload_id_counter);
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <main+0x13c>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4917      	ldr	r1, [pc, #92]	; (8000714 <main+0x140>)
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 ff08 	bl	80044cc <siprintf>

		  astronode_send_pld_er(g_payload_id_counter, payload, strlen(payload));
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <main+0x13c>)
 80006be:	881c      	ldrh	r4, [r3, #0]
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff fdac 	bl	8000220 <strlen>
 80006c8:	4603      	mov	r3, r0
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	4620      	mov	r0, r4
 80006d2:	f000 fcc3 	bl	800105c <astronode_send_pld_er>
	  }

	  if (get_systick() - print_housekeeping_timer > 60000)
 80006d6:	f000 f9c7 	bl	8000a68 <get_systick>
 80006da:	4602      	mov	r2, r0
 80006dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d99a      	bls.n	8000620 <main+0x4c>
	  {
		  astronode_send_per_rr();
 80006ea:	f000 fe4d 	bl	8001388 <astronode_send_per_rr>
		  print_housekeeping_timer = get_systick();
 80006ee:	f000 f9bb 	bl	8000a68 <get_systick>
 80006f2:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	  if (is_evt_pin_high())
 80006f6:	e793      	b.n	8000620 <main+0x4c>
 80006f8:	08004da4 	.word	0x08004da4
 80006fc:	08004dbc 	.word	0x08004dbc
 8000700:	08004dd0 	.word	0x08004dd0
 8000704:	08004df0 	.word	0x08004df0
 8000708:	08004e0c 	.word	0x08004e0c
 800070c:	08004e2c 	.word	0x08004e2c
 8000710:	200001ac 	.word	0x200001ac
 8000714:	08004e44 	.word	0x08004e44

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0318 	add.w	r3, r7, #24
 8000722:	2238      	movs	r2, #56	; 0x38
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fe94 	bl	8004454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800073a:	2000      	movs	r0, #0
 800073c:	f001 ff4c 	bl	80025d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000740:	2302      	movs	r3, #2
 8000742:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074a:	2340      	movs	r3, #64	; 0x40
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000752:	2302      	movs	r3, #2
 8000754:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000756:	2304      	movs	r3, #4
 8000758:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800075a:	2355      	movs	r3, #85	; 0x55
 800075c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075e:	2302      	movs	r3, #2
 8000760:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000762:	2302      	movs	r3, #2
 8000764:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	f107 0318 	add.w	r3, r7, #24
 800076e:	4618      	mov	r0, r3
 8000770:	f001 ffd6 	bl	8002720 <HAL_RCC_OscConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800077a:	f000 f9cd 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	2303      	movs	r3, #3
 8000784:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2104      	movs	r1, #4
 8000796:	4618      	mov	r0, r3
 8000798:	f002 fada 	bl	8002d50 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007a2:	f000 f9b9 	bl	8000b18 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3750      	adds	r7, #80	; 0x50
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <MX_USART1_UART_Init+0x90>)
 80007b6:	4a23      	ldr	r2, [pc, #140]	; (8000844 <MX_USART1_UART_Init+0x94>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007ba:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_USART1_UART_Init+0x90>)
 80007bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_USART1_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_USART1_UART_Init+0x90>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_USART1_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_USART1_UART_Init+0x90>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_USART1_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_USART1_UART_Init+0x90>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_USART1_UART_Init+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_USART1_UART_Init+0x90>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_USART1_UART_Init+0x90>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f8:	4811      	ldr	r0, [pc, #68]	; (8000840 <MX_USART1_UART_Init+0x90>)
 80007fa:	f002 feb5 	bl	8003568 <HAL_UART_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000804:	f000 f988 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000808:	2100      	movs	r1, #0
 800080a:	480d      	ldr	r0, [pc, #52]	; (8000840 <MX_USART1_UART_Init+0x90>)
 800080c:	f003 fd20 	bl	8004250 <HAL_UARTEx_SetTxFifoThreshold>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000816:	f000 f97f 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081a:	2100      	movs	r1, #0
 800081c:	4808      	ldr	r0, [pc, #32]	; (8000840 <MX_USART1_UART_Init+0x90>)
 800081e:	f003 fd55 	bl	80042cc <HAL_UARTEx_SetRxFifoThreshold>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000828:	f000 f976 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_USART1_UART_Init+0x90>)
 800082e:	f003 fcd6 	bl	80041de <HAL_UARTEx_DisableFifoMode>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000838:	f000 f96e 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000008c 	.word	0x2000008c
 8000844:	40013800 	.word	0x40013800

08000848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 800084e:	4a23      	ldr	r2, [pc, #140]	; (80008dc <MX_USART2_UART_Init+0x94>)
 8000850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000890:	4811      	ldr	r0, [pc, #68]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 8000892:	f002 fe69 	bl	8003568 <HAL_UART_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800089c:	f000 f93c 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	480d      	ldr	r0, [pc, #52]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 80008a4:	f003 fcd4 	bl	8004250 <HAL_UARTEx_SetTxFifoThreshold>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ae:	f000 f933 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4808      	ldr	r0, [pc, #32]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 80008b6:	f003 fd09 	bl	80042cc <HAL_UARTEx_SetRxFifoThreshold>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008c0:	f000 f92a 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 80008c6:	f003 fc8a 	bl	80041de <HAL_UARTEx_DisableFifoMode>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008d0:	f000 f922 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000011c 	.word	0x2000011c
 80008dc:	40004400 	.word	0x40004400

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <MX_GPIO_Init+0xc0>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a29      	ldr	r2, [pc, #164]	; (80009a0 <MX_GPIO_Init+0xc0>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <MX_GPIO_Init+0xc0>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <MX_GPIO_Init+0xc0>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a23      	ldr	r2, [pc, #140]	; (80009a0 <MX_GPIO_Init+0xc0>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_GPIO_Init+0xc0>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ASTRO_RESET_Pin|ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2103      	movs	r1, #3
 800092a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092e:	f001 fe3b 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000938:	481a      	ldr	r0, [pc, #104]	; (80009a4 <MX_GPIO_Init+0xc4>)
 800093a:	f001 fe35 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ASTRO_RESET_Pin ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = ASTRO_RESET_Pin|ASTRO_WAKEUP_Pin;
 800093e:	2303      	movs	r3, #3
 8000940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4619      	mov	r1, r3
 8000954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000958:	f001 fc8c 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVENT_EXTI12_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVENT_EXTI12_Pin;
 800095c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000962:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ASTRO_EVENT_EXTI12_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	4619      	mov	r1, r3
 8000972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000976:	f001 fc7d 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800097a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4619      	mov	r1, r3
 8000992:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_GPIO_Init+0xc4>)
 8000994:	f001 fc6e 	bl	8002274 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000998:	bf00      	nop
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000
 80009a4:	48000400 	.word	0x48000400

080009a8 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff fc35 	bl	8000220 <strlen>
 80009b6:	60f8      	str	r0, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	2bfa      	cmp	r3, #250	; 0xfa
 80009bc:	d908      	bls.n	80009d0 <send_debug_logs+0x28>
    {
        HAL_UART_Transmit ( HUART_USB , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 80009be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c2:	222a      	movs	r2, #42	; 0x2a
 80009c4:	490c      	ldr	r1, [pc, #48]	; (80009f8 <send_debug_logs+0x50>)
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <send_debug_logs+0x54>)
 80009c8:	f002 fe1e 	bl	8003608 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 80009cc:	23fa      	movs	r3, #250	; 0xfa
 80009ce:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_USB , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	4808      	ldr	r0, [pc, #32]	; (80009fc <send_debug_logs+0x54>)
 80009dc:	f002 fe14 	bl	8003608 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_USB , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 80009e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e4:	2201      	movs	r2, #1
 80009e6:	4906      	ldr	r1, [pc, #24]	; (8000a00 <send_debug_logs+0x58>)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <send_debug_logs+0x54>)
 80009ea:	f002 fe0d 	bl	8003608 <HAL_UART_Transmit>
}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	08004e54 	.word	0x08004e54
 80009fc:	2000011c 	.word	0x2000011c
 8000a00:	08004e80 	.word	0x08004e80

08000a04 <reset_astronode>:
void reset_astronode ( void )
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RESET_GPIO_Port , ASTRO_RESET_Pin , GPIO_PIN_SET ) ;
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f001 fdca 	bl	80025a8 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8000a14:	2001      	movs	r0, #1
 8000a16:	f001 fb27 	bl	8002068 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RESET_GPIO_Port , ASTRO_RESET_Pin , GPIO_PIN_RESET ) ;
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f001 fdc1 	bl	80025a8 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8000a26:	20fa      	movs	r0, #250	; 0xfa
 8000a28:	f001 fb1e 	bl	8002068 <HAL_Delay>
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8000a3a:	4809      	ldr	r0, [pc, #36]	; (8000a60 <send_astronode_request+0x30>)
 8000a3c:	f7ff ffb4 	bl	80009a8 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ffb1 	bl	80009a8 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <send_astronode_request+0x34>)
 8000a52:	f002 fdd9 	bl	8003608 <HAL_UART_Transmit>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	08004e84 	.word	0x08004e84
 8000a64:	2000008c 	.word	0x2000008c

08000a68 <get_systick>:
uint32_t get_systick ( void )
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8000a6c:	f001 faf0 	bl	8002050 <HAL_GetTick>
 8000a70:	4603      	mov	r3, r0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	807b      	strh	r3, [r7, #2]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8000a82:	f7ff fff1 	bl	8000a68 <get_systick>
 8000a86:	4602      	mov	r2, r0
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	1ad2      	subs	r2, r2, r3
 8000a8c:	887b      	ldrh	r3, [r7, #2]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	bf8c      	ite	hi
 8000a92:	2301      	movhi	r3, #1
 8000a94:	2300      	movls	r3, #0
 8000a96:	b2db      	uxtb	r3, r3
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8000aa8:	2364      	movs	r3, #100	; 0x64
 8000aaa:	2201      	movs	r2, #1
 8000aac:	6879      	ldr	r1, [r7, #4]
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <is_astronode_character_received+0x28>)
 8000ab0:	f002 fe40 	bl	8003734 <HAL_UART_Receive>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	bf0c      	ite	eq
 8000aba:	2301      	moveq	r3, #1
 8000abc:	2300      	movne	r3, #0
 8000abe:	b2db      	uxtb	r3, r3
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000008c 	.word	0x2000008c

08000acc <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
    return ( HAL_GPIO_ReadPin ( ASTRO_EVENT_EXTI12_GPIO_Port , ASTRO_EVENT_EXTI12_Pin ) == GPIO_PIN_SET ? true : false ) ;
 8000ad0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad8:	f001 fd4e 	bl	8002578 <HAL_GPIO_ReadPin>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2301      	moveq	r3, #1
 8000ae4:	2300      	movne	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	bd80      	pop	{r7, pc}

08000aec <is_message_available>:
bool is_message_available ( void )
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
    if ( g_number_of_message_to_send > 0 )
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <is_message_available+0x28>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d007      	beq.n	8000b08 <is_message_available+0x1c>
    {
        g_number_of_message_to_send--;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <is_message_available+0x28>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <is_message_available+0x28>)
 8000b02:	701a      	strb	r2, [r3, #0]
        return true;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e000      	b.n	8000b0a <is_message_available+0x1e>
    }
    else
    {
        return false;
 8000b08:	2300      	movs	r3, #0
    }
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	200001ae 	.word	0x200001ae

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_MspInit+0x44>)
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_MspInit+0x44>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6613      	str	r3, [r2, #96]	; 0x60
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_MspInit+0x44>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x44>)
 8000b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x44>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x44>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b09c      	sub	sp, #112	; 0x70
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b84:	f107 0318 	add.w	r3, r7, #24
 8000b88:	2244      	movs	r2, #68	; 0x44
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f003 fc61 	bl	8004454 <memset>
  if(huart->Instance==USART1)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a3e      	ldr	r2, [pc, #248]	; (8000c90 <HAL_UART_MspInit+0x124>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d138      	bne.n	8000c0e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba4:	f107 0318 	add.w	r3, r7, #24
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 faed 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bb4:	f7ff ffb0 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bb8:	4b36      	ldr	r3, [pc, #216]	; (8000c94 <HAL_UART_MspInit+0x128>)
 8000bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bbc:	4a35      	ldr	r2, [pc, #212]	; (8000c94 <HAL_UART_MspInit+0x128>)
 8000bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc2:	6613      	str	r3, [r2, #96]	; 0x60
 8000bc4:	4b33      	ldr	r3, [pc, #204]	; (8000c94 <HAL_UART_MspInit+0x128>)
 8000bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	4b30      	ldr	r3, [pc, #192]	; (8000c94 <HAL_UART_MspInit+0x128>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd4:	4a2f      	ldr	r2, [pc, #188]	; (8000c94 <HAL_UART_MspInit+0x128>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <HAL_UART_MspInit+0x128>)
 8000bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000be8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bec:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c02:	4619      	mov	r1, r3
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c08:	f001 fb34 	bl	8002274 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c0c:	e03b      	b.n	8000c86 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <HAL_UART_MspInit+0x12c>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d136      	bne.n	8000c86 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 faaf 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000c30:	f7ff ff72 	bl	8000b18 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_UART_MspInit+0x128>)
 8000c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c38:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <HAL_UART_MspInit+0x128>)
 8000c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <HAL_UART_MspInit+0x128>)
 8000c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_UART_MspInit+0x128>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c50:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <HAL_UART_MspInit+0x128>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_UART_MspInit+0x128>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c64:	230c      	movs	r3, #12
 8000c66:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c74:	2307      	movs	r3, #7
 8000c76:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c82:	f001 faf7 	bl	8002274 <HAL_GPIO_Init>
}
 8000c86:	bf00      	nop
 8000c88:	3770      	adds	r7, #112	; 0x70
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40013800 	.word	0x40013800
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40004400 	.word	0x40004400

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f001 f9a0 	bl	800202c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf8:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <_sbrk+0x5c>)
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <_sbrk+0x60>)
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <_sbrk+0x64>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <_sbrk+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d207      	bcs.n	8000d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d20:	f003 fb60 	bl	80043e4 <__errno>
 8000d24:	4603      	mov	r3, r0
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	e009      	b.n	8000d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <_sbrk+0x64>)
 8000d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20008000 	.word	0x20008000
 8000d50:	00000400 	.word	0x00000400
 8000d54:	200001b0 	.word	0x200001b0
 8000d58:	200001d0 	.word	0x200001d0

08000d5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d86:	490e      	ldr	r1, [pc, #56]	; (8000dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d88:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <LoopForever+0xe>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d9c:	4c0b      	ldr	r4, [pc, #44]	; (8000dcc <LoopForever+0x16>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000daa:	f7ff ffd7 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f003 fb1f 	bl	80043f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000db2:	f7ff fc0f 	bl	80005d4 <main>

08000db6 <LoopForever>:

LoopForever:
    b LoopForever
 8000db6:	e7fe      	b.n	8000db6 <LoopForever>
  ldr   r0, =_estack
 8000db8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dc4:	080065cc 	.word	0x080065cc
  ldr r2, =_sbss
 8000dc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dcc:	200001cc 	.word	0x200001cc

08000dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_2_IRQHandler>
	...

08000dd4 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b0e4      	sub	sp, #400	; 0x190
 8000dd8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000dda:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000dde:	22c6      	movs	r2, #198	; 0xc6
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 fb36 	bl	8004454 <memset>
    astronode_app_msg_t answer = {0};
 8000de8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000dec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000df0:	4618      	mov	r0, r3
 8000df2:	23c6      	movs	r3, #198	; 0xc6
 8000df4:	461a      	mov	r2, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	f003 fb2c 	bl	8004454 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    astronode_transport_send_receive(&request, &answer);
 8000e02:	463a      	mov	r2, r7
 8000e04:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fefa 	bl	8001c04 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8000e10:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000e14:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b90      	cmp	r3, #144	; 0x90
 8000e1c:	d103      	bne.n	8000e26 <astronode_send_cfg_sr+0x52>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <astronode_send_cfg_sr+0x64>)
 8000e20:	f7ff fdc2 	bl	80009a8 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8000e24:	e002      	b.n	8000e2c <astronode_send_cfg_sr+0x58>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <astronode_send_cfg_sr+0x68>)
 8000e28:	f7ff fdbe 	bl	80009a8 <send_debug_logs>
}
 8000e2c:	bf00      	nop
 8000e2e:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	080052b8 	.word	0x080052b8
 8000e3c:	080052ec 	.word	0x080052ec

08000e40 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8000e40:	b5b0      	push	{r4, r5, r7, lr}
 8000e42:	b0e6      	sub	sp, #408	; 0x198
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4605      	mov	r5, r0
 8000e48:	460c      	mov	r4, r1
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000e52:	f2a3 1391 	subw	r3, r3, #401	; 0x191
 8000e56:	462a      	mov	r2, r5
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000e5e:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 8000e62:	4622      	mov	r2, r4
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000e6a:	f2a3 1393 	subw	r3, r3, #403	; 0x193
 8000e6e:	4602      	mov	r2, r0
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000e76:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000e7a:	460a      	mov	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8000e7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000e82:	22c6      	movs	r2, #198	; 0xc6
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 fae4 	bl	8004454 <memset>
    astronode_app_msg_t answer = {0};
 8000e8c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000e90:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000e94:	4618      	mov	r0, r3
 8000e96:	23c6      	movs	r3, #198	; 0xc6
 8000e98:	461a      	mov	r2, r3
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f003 fada 	bl	8004454 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8000ea0:	2305      	movs	r3, #5
 8000ea2:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8000ea6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000eaa:	f2a3 1391 	subw	r3, r3, #401	; 0x191
 8000eae:	f993 2000 	ldrsb.w	r2, [r3]
 8000eb2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000eb6:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8000ec4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000ec8:	f2a3 1393 	subw	r3, r3, #403	; 0x193
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8000ed6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000eda:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	b2db      	uxtb	r3, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8000eea:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8000eee:	f997 21a8 	ldrsb.w	r2, [r7, #424]	; 0x1a8
 8000ef2:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8000efe:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	4313      	orrs	r3, r2
 8000f08:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8000f0a:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	b2db      	uxtb	r3, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8000f18:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

    request.payload_len = 3;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000f22:	f107 0208 	add.w	r2, r7, #8
 8000f26:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 fe69 	bl	8001c04 <astronode_transport_send_receive>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d10d      	bne.n	8000f54 <astronode_send_cfg_wr+0x114>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8000f38:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000f3c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b85      	cmp	r3, #133	; 0x85
 8000f44:	d103      	bne.n	8000f4e <astronode_send_cfg_wr+0x10e>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <astronode_send_cfg_wr+0x120>)
 8000f48:	f7ff fd2e 	bl	80009a8 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
        }
    }
}
 8000f4c:	e002      	b.n	8000f54 <astronode_send_cfg_wr+0x114>
            send_debug_logs("Failed to set the Astronode configuration.");
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <astronode_send_cfg_wr+0x124>)
 8000f50:	f7ff fd2a 	bl	80009a8 <send_debug_logs>
}
 8000f54:	bf00      	nop
 8000f56:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	08005320 	.word	0x08005320
 8000f64:	0800534c 	.word	0x0800534c

08000f68 <astronode_send_evt_rr>:
        }
    }
}

void astronode_send_evt_rr(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b0e4      	sub	sp, #400	; 0x190
 8000f6c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000f6e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f72:	22c6      	movs	r2, #198	; 0xc6
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f003 fa6c 	bl	8004454 <memset>
    astronode_app_msg_t answer = {0};
 8000f7c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000f80:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000f84:	4618      	mov	r0, r3
 8000f86:	23c6      	movs	r3, #198	; 0xc6
 8000f88:	461a      	mov	r2, r3
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	f003 fa62 	bl	8004454 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8000f90:	2365      	movs	r3, #101	; 0x65
 8000f92:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000f96:	463a      	mov	r2, r7
 8000f98:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fe30 	bl	8001c04 <astronode_transport_send_receive>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d142      	bne.n	8001030 <astronode_send_evt_rr+0xc8>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8000faa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000fae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2be5      	cmp	r3, #229	; 0xe5
 8000fb6:	d13b      	bne.n	8001030 <astronode_send_evt_rr+0xc8>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8000fb8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000fbc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000fc0:	785b      	ldrb	r3, [r3, #1]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d005      	beq.n	8000fd6 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <astronode_send_evt_rr+0xd4>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8000fd0:	481b      	ldr	r0, [pc, #108]	; (8001040 <astronode_send_evt_rr+0xd8>)
 8000fd2:	f7ff fce9 	bl	80009a8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8000fd6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000fda:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000fde:	785b      	ldrb	r3, [r3, #1]
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d005      	beq.n	8000ff4 <astronode_send_evt_rr+0x8c>
            {
                g_is_astronode_reset = true;
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <astronode_send_evt_rr+0xdc>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8000fee:	4816      	ldr	r0, [pc, #88]	; (8001048 <astronode_send_evt_rr+0xe0>)
 8000ff0:	f7ff fcda 	bl	80009a8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8000ff4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000ff8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000ffc:	785b      	ldrb	r3, [r3, #1]
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	2b00      	cmp	r3, #0
 8001004:	d005      	beq.n	8001012 <astronode_send_evt_rr+0xaa>
            {
                g_is_command_available = true;
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <astronode_send_evt_rr+0xe4>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 800100c:	4810      	ldr	r0, [pc, #64]	; (8001050 <astronode_send_evt_rr+0xe8>)
 800100e:	f7ff fccb 	bl	80009a8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8001012:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001016:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800101a:	785b      	ldrb	r3, [r3, #1]
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	2b00      	cmp	r3, #0
 8001022:	d005      	beq.n	8001030 <astronode_send_evt_rr+0xc8>
            {
                g_is_tx_msg_pending = true;
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <astronode_send_evt_rr+0xec>)
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 800102a:	480b      	ldr	r0, [pc, #44]	; (8001058 <astronode_send_evt_rr+0xf0>)
 800102c:	f7ff fcbc 	bl	80009a8 <send_debug_logs>
            }

        }
    }
}
 8001030:	bf00      	nop
 8001032:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200001b4 	.word	0x200001b4
 8001040:	080054cc 	.word	0x080054cc
 8001044:	200001b5 	.word	0x200001b5
 8001048:	080054f0 	.word	0x080054f0
 800104c:	200001b6 	.word	0x200001b6
 8001050:	08005508 	.word	0x08005508
 8001054:	200001b7 	.word	0x200001b7
 8001058:	0800551c 	.word	0x0800551c

0800105c <astronode_send_pld_er>:
        }
    }
}

void astronode_send_pld_er(uint16_t payload_id, char *p_payload, uint16_t payload_length)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b0e6      	sub	sp, #408	; 0x198
 8001060:	af00      	add	r7, sp, #0
 8001062:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001066:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800106a:	6019      	str	r1, [r3, #0]
 800106c:	4611      	mov	r1, r2
 800106e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001072:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 8001076:	4602      	mov	r2, r0
 8001078:	801a      	strh	r2, [r3, #0]
 800107a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800107e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001082:	460a      	mov	r2, r1
 8001084:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8001086:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800108a:	22c6      	movs	r2, #198	; 0xc6
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f003 f9e0 	bl	8004454 <memset>
    astronode_app_msg_t answer = {0};
 8001094:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001098:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800109c:	4618      	mov	r0, r3
 800109e:	23c6      	movs	r3, #198	; 0xc6
 80010a0:	461a      	mov	r2, r3
 80010a2:	2100      	movs	r1, #0
 80010a4:	f003 f9d6 	bl	8004454 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 80010a8:	2325      	movs	r3, #37	; 0x25
 80010aa:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 80010ae:	f8b7 3194 	ldrh.w	r3, [r7, #404]	; 0x194
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	b292      	uxth	r2, r2
 80010b6:	f8a7 2194 	strh.w	r2, [r7, #404]	; 0x194
 80010ba:	4619      	mov	r1, r3
 80010bc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80010c0:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	f501 73cc 	add.w	r3, r1, #408	; 0x198
 80010cc:	443b      	add	r3, r7
 80010ce:	f803 2cc7 	strb.w	r2, [r3, #-199]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 80010d2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80010d6:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	b29a      	uxth	r2, r3
 80010e0:	f8b7 3194 	ldrh.w	r3, [r7, #404]	; 0x194
 80010e4:	1c59      	adds	r1, r3, #1
 80010e6:	b289      	uxth	r1, r1
 80010e8:	f8a7 1194 	strh.w	r1, [r7, #404]	; 0x194
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80010f2:	443b      	add	r3, r7
 80010f4:	f803 2cc7 	strb.w	r2, [r3, #-199]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 80010f8:	f8b7 3194 	ldrh.w	r3, [r7, #404]	; 0x194
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001102:	4413      	add	r3, r2
 8001104:	1c58      	adds	r0, r3, #1
 8001106:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800110a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800110e:	881a      	ldrh	r2, [r3, #0]
 8001110:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001114:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001118:	6819      	ldr	r1, [r3, #0]
 800111a:	f003 f98d 	bl	8004438 <memcpy>
    request.payload_len = 2 + payload_length;
 800111e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001122:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	3302      	adds	r3, #2
 800112a:	b29b      	uxth	r3, r3
 800112c:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8001130:	f107 0208 	add.w	r2, r7, #8
 8001134:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fd62 	bl	8001c04 <astronode_transport_send_receive>
 8001140:	4603      	mov	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	d10d      	bne.n	8001162 <astronode_send_pld_er+0x106>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8001146:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800114a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2ba5      	cmp	r3, #165	; 0xa5
 8001152:	d103      	bne.n	800115c <astronode_send_pld_er+0x100>
        {
            send_debug_logs("Payload was successfully queued.");
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <astronode_send_pld_er+0x110>)
 8001156:	f7ff fc27 	bl	80009a8 <send_debug_logs>
        else
        {
            send_debug_logs("Payload failed to be queued.");
        }
    }
}
 800115a:	e002      	b.n	8001162 <astronode_send_pld_er+0x106>
            send_debug_logs("Payload failed to be queued.");
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <astronode_send_pld_er+0x114>)
 800115e:	f7ff fc23 	bl	80009a8 <send_debug_logs>
}
 8001162:	bf00      	nop
 8001164:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	080055d4 	.word	0x080055d4
 8001170:	080055f8 	.word	0x080055f8

08001174 <astronode_send_res_cr>:
        }
    }
}

void astronode_send_res_cr(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0e4      	sub	sp, #400	; 0x190
 8001178:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800117a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800117e:	22c6      	movs	r2, #198	; 0xc6
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f003 f966 	bl	8004454 <memset>
    astronode_app_msg_t answer = {0};
 8001188:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800118c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001190:	4618      	mov	r0, r3
 8001192:	23c6      	movs	r3, #198	; 0xc6
 8001194:	461a      	mov	r2, r3
 8001196:	2100      	movs	r1, #0
 8001198:	f003 f95c 	bl	8004454 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 800119c:	2355      	movs	r3, #85	; 0x55
 800119e:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80011a2:	463a      	mov	r2, r7
 80011a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fd2a 	bl	8001c04 <astronode_transport_send_receive>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d110      	bne.n	80011d8 <astronode_send_res_cr+0x64>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 80011b6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80011ba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2bd5      	cmp	r3, #213	; 0xd5
 80011c2:	d106      	bne.n	80011d2 <astronode_send_res_cr+0x5e>
        {
            g_is_astronode_reset = false;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <astronode_send_res_cr+0x70>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The reset has been cleared.");
 80011ca:	4807      	ldr	r0, [pc, #28]	; (80011e8 <astronode_send_res_cr+0x74>)
 80011cc:	f7ff fbec 	bl	80009a8 <send_debug_logs>
        else
        {
            send_debug_logs("No reset to clear.");
        }
    }
}
 80011d0:	e002      	b.n	80011d8 <astronode_send_res_cr+0x64>
            send_debug_logs("No reset to clear.");
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <astronode_send_res_cr+0x78>)
 80011d4:	f7ff fbe8 	bl	80009a8 <send_debug_logs>
}
 80011d8:	bf00      	nop
 80011da:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200001b5 	.word	0x200001b5
 80011e8:	08005664 	.word	0x08005664
 80011ec:	08005680 	.word	0x08005680

080011f0 <astronode_send_sak_rr>:
        }
    }
}

void astronode_send_sak_rr(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0f8      	sub	sp, #480	; 0x1e0
 80011f4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80011f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011fa:	22c6      	movs	r2, #198	; 0xc6
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 f928 	bl	8004454 <memset>
    astronode_app_msg_t answer = {0};
 8001204:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001208:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800120c:	4618      	mov	r0, r3
 800120e:	23c6      	movs	r3, #198	; 0xc6
 8001210:	461a      	mov	r2, r3
 8001212:	2100      	movs	r1, #0
 8001214:	f003 f91e 	bl	8004454 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 8001218:	2345      	movs	r3, #69	; 0x45
 800121a:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800121e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001222:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fceb 	bl	8001c04 <astronode_transport_send_receive>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d126      	bne.n	8001282 <astronode_send_sak_rr+0x92>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8001234:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001238:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2bc5      	cmp	r3, #197	; 0xc5
 8001240:	d11c      	bne.n	800127c <astronode_send_sak_rr+0x8c>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8001242:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001246:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800124a:	785b      	ldrb	r3, [r3, #1]
 800124c:	b29a      	uxth	r2, r3
 800124e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001252:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001256:	789b      	ldrb	r3, [r3, #2]
 8001258:	b29b      	uxth	r3, r3
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b29b      	uxth	r3, r3
 800125e:	4413      	add	r3, r2
 8001260:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8001264:	f8b7 21de 	ldrh.w	r2, [r7, #478]	; 0x1de
 8001268:	463b      	mov	r3, r7
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <astronode_send_sak_rr+0x9c>)
 800126c:	4618      	mov	r0, r3
 800126e:	f003 f92d 	bl	80044cc <siprintf>
            send_debug_logs(str);
 8001272:	463b      	mov	r3, r7
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fb97 	bl	80009a8 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 800127a:	e002      	b.n	8001282 <astronode_send_sak_rr+0x92>
            send_debug_logs("No acknowledgment available.");
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <astronode_send_sak_rr+0xa0>)
 800127e:	f7ff fb93 	bl	80009a8 <send_debug_logs>
}
 8001282:	bf00      	nop
 8001284:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	080056f0 	.word	0x080056f0
 8001290:	0800571c 	.word	0x0800571c

08001294 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b0e4      	sub	sp, #400	; 0x190
 8001298:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800129a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800129e:	22c6      	movs	r2, #198	; 0xc6
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f003 f8d6 	bl	8004454 <memset>
    astronode_app_msg_t answer = {0};
 80012a8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80012ac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80012b0:	4618      	mov	r0, r3
 80012b2:	23c6      	movs	r3, #198	; 0xc6
 80012b4:	461a      	mov	r2, r3
 80012b6:	2100      	movs	r1, #0
 80012b8:	f003 f8cc 	bl	8004454 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 80012bc:	2346      	movs	r3, #70	; 0x46
 80012be:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80012c2:	463a      	mov	r2, r7
 80012c4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fc9a 	bl	8001c04 <astronode_transport_send_receive>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d110      	bne.n	80012f8 <astronode_send_sak_cr+0x64>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 80012d6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80012da:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2bc6      	cmp	r3, #198	; 0xc6
 80012e2:	d106      	bne.n	80012f2 <astronode_send_sak_cr+0x5e>
        {
            g_is_sak_available = false;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <astronode_send_sak_cr+0x70>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 80012ea:	4807      	ldr	r0, [pc, #28]	; (8001308 <astronode_send_sak_cr+0x74>)
 80012ec:	f7ff fb5c 	bl	80009a8 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 80012f0:	e002      	b.n	80012f8 <astronode_send_sak_cr+0x64>
            send_debug_logs("No acknowledgment available.");
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <astronode_send_sak_cr+0x78>)
 80012f4:	f7ff fb58 	bl	80009a8 <send_debug_logs>
}
 80012f8:	bf00      	nop
 80012fa:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200001b4 	.word	0x200001b4
 8001308:	0800573c 	.word	0x0800573c
 800130c:	0800571c 	.word	0x0800571c

08001310 <append_multiple_data_size_to_string>:
        }
    }
}

void append_multiple_data_size_to_string(char * const p_str, uint32_t * const p_data, uint8_t size)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	4613      	mov	r3, r2
 800131c:	71fb      	strb	r3, [r7, #7]
    switch (size)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b04      	cmp	r3, #4
 8001322:	d018      	beq.n	8001356 <append_multiple_data_size_to_string+0x46>
 8001324:	2b04      	cmp	r3, #4
 8001326:	dc1e      	bgt.n	8001366 <append_multiple_data_size_to_string+0x56>
 8001328:	2b01      	cmp	r3, #1
 800132a:	d002      	beq.n	8001332 <append_multiple_data_size_to_string+0x22>
 800132c:	2b02      	cmp	r3, #2
 800132e:	d009      	beq.n	8001344 <append_multiple_data_size_to_string+0x34>
 8001330:	e019      	b.n	8001366 <append_multiple_data_size_to_string+0x56>
    {
        case 1:
            sprintf(p_str, "%u", (uint8_t) *p_data);
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	4910      	ldr	r1, [pc, #64]	; (800137c <append_multiple_data_size_to_string+0x6c>)
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f003 f8c5 	bl	80044cc <siprintf>
            break;
 8001342:	e017      	b.n	8001374 <append_multiple_data_size_to_string+0x64>
        case 2:
            sprintf(p_str, "%u", (uint16_t) *p_data);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	461a      	mov	r2, r3
 800134c:	490b      	ldr	r1, [pc, #44]	; (800137c <append_multiple_data_size_to_string+0x6c>)
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f003 f8bc 	bl	80044cc <siprintf>
            break;
 8001354:	e00e      	b.n	8001374 <append_multiple_data_size_to_string+0x64>
        case 4:
            sprintf(p_str, "%lu", *p_data);
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	4908      	ldr	r1, [pc, #32]	; (8001380 <append_multiple_data_size_to_string+0x70>)
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f003 f8b4 	bl	80044cc <siprintf>
            break;
 8001364:	e006      	b.n	8001374 <append_multiple_data_size_to_string+0x64>
        default:
            sprintf(p_str, "tlv size error %u", size);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	461a      	mov	r2, r3
 800136a:	4906      	ldr	r1, [pc, #24]	; (8001384 <append_multiple_data_size_to_string+0x74>)
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f003 f8ad 	bl	80044cc <siprintf>
    }
}
 8001372:	bf00      	nop
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	08005828 	.word	0x08005828
 8001380:	0800582c 	.word	0x0800582c
 8001384:	08005830 	.word	0x08005830

08001388 <astronode_send_per_rr>:

void astronode_send_per_rr(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b0fa      	sub	sp, #488	; 0x1e8
 800138c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800138e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001392:	22c6      	movs	r2, #198	; 0xc6
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f003 f85c 	bl	8004454 <memset>
    astronode_app_msg_t answer = {0};
 800139c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80013a0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80013a4:	4618      	mov	r0, r3
 80013a6:	23c6      	movs	r3, #198	; 0xc6
 80013a8:	461a      	mov	r2, r3
 80013aa:	2100      	movs	r1, #0
 80013ac:	f003 f852 	bl	8004454 <memset>

    request.op_code = ASTRONODE_OP_CODE_PER_RR;
 80013b0:	2367      	movs	r3, #103	; 0x67
 80013b2:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80013b6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80013ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fc1f 	bl	8001c04 <astronode_transport_send_receive>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	f040 80b6 	bne.w	800153a <astronode_send_per_rr+0x1b2>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PER_RA)
 80013ce:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80013d2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2be7      	cmp	r3, #231	; 0xe7
 80013da:	f040 80ab 	bne.w	8001534 <astronode_send_per_rr+0x1ac>
        {
            uint16_t tlv_index = 0; // size 16bits to fit to payload_len
 80013de:	2300      	movs	r3, #0
 80013e0:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
            char log_text[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            uint8_t tlv_size = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 31e5 	strb.w	r3, [r7, #485]	; 0x1e5
            while (tlv_index < answer.payload_len)
 80013ea:	e097      	b.n	800151c <astronode_send_per_rr+0x194>
            {
                uint32_t *p_data = (uint32_t *) &answer.p_payload[tlv_index + 2];
 80013ec:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 80013f0:	3302      	adds	r3, #2
 80013f2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80013f6:	4413      	add	r3, r2
 80013f8:	3301      	adds	r3, #1
 80013fa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
                tlv_size = answer.p_payload[tlv_index + 1];
 80013fe:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8001402:	3301      	adds	r3, #1
 8001404:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8001408:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 800140c:	4413      	add	r3, r2
 800140e:	785b      	ldrb	r3, [r3, #1]
 8001410:	f887 31e5 	strb.w	r3, [r7, #485]	; 0x1e5
                switch (answer.p_payload[tlv_index])
 8001414:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8001418:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 800141c:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8001420:	4413      	add	r3, r2
 8001422:	785b      	ldrb	r3, [r3, #1]
 8001424:	3b01      	subs	r3, #1
 8001426:	2b0d      	cmp	r3, #13
 8001428:	d856      	bhi.n	80014d8 <astronode_send_per_rr+0x150>
 800142a:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <astronode_send_per_rr+0xa8>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	08001469 	.word	0x08001469
 8001434:	08001471 	.word	0x08001471
 8001438:	08001479 	.word	0x08001479
 800143c:	08001481 	.word	0x08001481
 8001440:	08001489 	.word	0x08001489
 8001444:	08001491 	.word	0x08001491
 8001448:	08001499 	.word	0x08001499
 800144c:	080014a1 	.word	0x080014a1
 8001450:	080014a9 	.word	0x080014a9
 8001454:	080014b1 	.word	0x080014b1
 8001458:	080014b9 	.word	0x080014b9
 800145c:	080014c1 	.word	0x080014c1
 8001460:	080014c9 	.word	0x080014c9
 8001464:	080014d1 	.word	0x080014d1
                {
                    case PC_COUNTER_ID_SAT_DET_PHASE_COUNT:
                        send_debug_logs("PC sat det phase count is: ");
 8001468:	4836      	ldr	r0, [pc, #216]	; (8001544 <astronode_send_per_rr+0x1bc>)
 800146a:	f7ff fa9d 	bl	80009a8 <send_debug_logs>
                        break;
 800146e:	e039      	b.n	80014e4 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_SAT_DET_OPERATIONS_COUNT:
                        send_debug_logs("PC sat det operation count is: ");
 8001470:	4835      	ldr	r0, [pc, #212]	; (8001548 <astronode_send_per_rr+0x1c0>)
 8001472:	f7ff fa99 	bl	80009a8 <send_debug_logs>
                        break;
 8001476:	e035      	b.n	80014e4 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_SIGNALLING_DEMOD_PHASE_COUNT:
                        send_debug_logs("PC signalling demod phase count is: ");
 8001478:	4834      	ldr	r0, [pc, #208]	; (800154c <astronode_send_per_rr+0x1c4>)
 800147a:	f7ff fa95 	bl	80009a8 <send_debug_logs>
                        break;
 800147e:	e031      	b.n	80014e4 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_SIGNALLING_DEMOD_ATTEMPTS_COUNT:
                        send_debug_logs("PC signalling demod attemps count is: ");
 8001480:	4833      	ldr	r0, [pc, #204]	; (8001550 <astronode_send_per_rr+0x1c8>)
 8001482:	f7ff fa91 	bl	80009a8 <send_debug_logs>
                        break;
 8001486:	e02d      	b.n	80014e4 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_SIGNALLING_DEMOD_SUCCESSES_COUNT:
                        send_debug_logs("PC signalling demod successes count is: ");
 8001488:	4832      	ldr	r0, [pc, #200]	; (8001554 <astronode_send_per_rr+0x1cc>)
 800148a:	f7ff fa8d 	bl	80009a8 <send_debug_logs>
                        break;
 800148e:	e029      	b.n	80014e4 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_ACK_DEMOD_ATTEMPTS_COUNT:
                        send_debug_logs("PC ack demod attemps count is: ");
 8001490:	4831      	ldr	r0, [pc, #196]	; (8001558 <astronode_send_per_rr+0x1d0>)
 8001492:	f7ff fa89 	bl	80009a8 <send_debug_logs>
                        break;
 8001496:	e025      	b.n	80014e4 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_ACK_DEMOD_SUCCESS_COUNT:
                        send_debug_logs("PC ack demod success count is: ");
 8001498:	4830      	ldr	r0, [pc, #192]	; (800155c <astronode_send_per_rr+0x1d4>)
 800149a:	f7ff fa85 	bl	80009a8 <send_debug_logs>
                        break;
 800149e:	e021      	b.n	80014e4 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_QUEUED_MSG_COUNT:
                        send_debug_logs("PC queued message count is: ");
 80014a0:	482f      	ldr	r0, [pc, #188]	; (8001560 <astronode_send_per_rr+0x1d8>)
 80014a2:	f7ff fa81 	bl	80009a8 <send_debug_logs>
                        break;
 80014a6:	e01d      	b.n	80014e4 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_DEQUEUED_UNACKED_MSG_COUNT:
                        send_debug_logs("PC dequeued unacked message count is: ");
 80014a8:	482e      	ldr	r0, [pc, #184]	; (8001564 <astronode_send_per_rr+0x1dc>)
 80014aa:	f7ff fa7d 	bl	80009a8 <send_debug_logs>
                        break;
 80014ae:	e019      	b.n	80014e4 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_ACKED_MSG_COUNT:
                        send_debug_logs("PC acked message count is: ");
 80014b0:	482d      	ldr	r0, [pc, #180]	; (8001568 <astronode_send_per_rr+0x1e0>)
 80014b2:	f7ff fa79 	bl	80009a8 <send_debug_logs>
                        break;
 80014b6:	e015      	b.n	80014e4 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_SENT_FRAG_COUNT:
                        send_debug_logs("PC sent frag count is: ");
 80014b8:	482c      	ldr	r0, [pc, #176]	; (800156c <astronode_send_per_rr+0x1e4>)
 80014ba:	f7ff fa75 	bl	80009a8 <send_debug_logs>
                        break;
 80014be:	e011      	b.n	80014e4 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_ACKED_FRAG_COUNT:
                        send_debug_logs("PC ack frag count is: ");
 80014c0:	482b      	ldr	r0, [pc, #172]	; (8001570 <astronode_send_per_rr+0x1e8>)
 80014c2:	f7ff fa71 	bl	80009a8 <send_debug_logs>
                        break;
 80014c6:	e00d      	b.n	80014e4 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_COMMAND_DEMOD_ATTEMPT_COUNT:
                        send_debug_logs("PC unicast demod attempt count is: ");
 80014c8:	482a      	ldr	r0, [pc, #168]	; (8001574 <astronode_send_per_rr+0x1ec>)
 80014ca:	f7ff fa6d 	bl	80009a8 <send_debug_logs>
                        break;
 80014ce:	e009      	b.n	80014e4 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_COMMAND_DEMOD_SUCCESS_COUNT:
                        send_debug_logs("PC unicast demod success count is: ");
 80014d0:	4829      	ldr	r0, [pc, #164]	; (8001578 <astronode_send_per_rr+0x1f0>)
 80014d2:	f7ff fa69 	bl	80009a8 <send_debug_logs>
                        break;
 80014d6:	e005      	b.n	80014e4 <astronode_send_per_rr+0x15c>
                    default:
                        send_debug_logs("PC error, type unknown");
 80014d8:	4828      	ldr	r0, [pc, #160]	; (800157c <astronode_send_per_rr+0x1f4>)
 80014da:	f7ff fa65 	bl	80009a8 <send_debug_logs>
                        tlv_size = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	f887 31e5 	strb.w	r3, [r7, #485]	; 0x1e5
                }
                append_multiple_data_size_to_string(log_text, p_data, tlv_size);
 80014e4:	f897 21e5 	ldrb.w	r2, [r7, #485]	; 0x1e5
 80014e8:	463b      	mov	r3, r7
 80014ea:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff0e 	bl	8001310 <append_multiple_data_size_to_string>
                send_debug_logs(log_text);
 80014f4:	463b      	mov	r3, r7
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fa56 	bl	80009a8 <send_debug_logs>
                log_text[0] = '\0';
 80014fc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001500:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
                tlv_index += tlv_size + 2;
 8001508:	f897 31e5 	ldrb.w	r3, [r7, #485]	; 0x1e5
 800150c:	b29a      	uxth	r2, r3
 800150e:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8001512:	4413      	add	r3, r2
 8001514:	b29b      	uxth	r3, r3
 8001516:	3302      	adds	r3, #2
 8001518:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
            while (tlv_index < answer.payload_len)
 800151c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001520:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001524:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001528:	f8b7 21e6 	ldrh.w	r2, [r7, #486]	; 0x1e6
 800152c:	429a      	cmp	r2, r3
 800152e:	f4ff af5d 	bcc.w	80013ec <astronode_send_per_rr+0x64>
        else
        {
            send_debug_logs("Failed to get performance counters.");
        }
    }
}
 8001532:	e002      	b.n	800153a <astronode_send_per_rr+0x1b2>
            send_debug_logs("Failed to get performance counters.");
 8001534:	4812      	ldr	r0, [pc, #72]	; (8001580 <astronode_send_per_rr+0x1f8>)
 8001536:	f7ff fa37 	bl	80009a8 <send_debug_logs>
}
 800153a:	bf00      	nop
 800153c:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	08005844 	.word	0x08005844
 8001548:	08005860 	.word	0x08005860
 800154c:	08005880 	.word	0x08005880
 8001550:	080058a8 	.word	0x080058a8
 8001554:	080058d0 	.word	0x080058d0
 8001558:	080058fc 	.word	0x080058fc
 800155c:	0800591c 	.word	0x0800591c
 8001560:	0800593c 	.word	0x0800593c
 8001564:	0800595c 	.word	0x0800595c
 8001568:	08005984 	.word	0x08005984
 800156c:	080059a0 	.word	0x080059a0
 8001570:	080059b8 	.word	0x080059b8
 8001574:	080059d0 	.word	0x080059d0
 8001578:	080059f4 	.word	0x080059f4
 800157c:	08005a18 	.word	0x08005a18
 8001580:	08005a30 	.word	0x08005a30

08001584 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b0e4      	sub	sp, #400	; 0x190
 8001588:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800158a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800158e:	22c6      	movs	r2, #198	; 0xc6
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f002 ff5e 	bl	8004454 <memset>
    astronode_app_msg_t answer = {0};
 8001598:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800159c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80015a0:	4618      	mov	r0, r3
 80015a2:	23c6      	movs	r3, #198	; 0xc6
 80015a4:	461a      	mov	r2, r3
 80015a6:	2100      	movs	r1, #0
 80015a8:	f002 ff54 	bl	8004454 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 80015ac:	2348      	movs	r3, #72	; 0x48
 80015ae:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80015b2:	463a      	mov	r2, r7
 80015b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fb22 	bl	8001c04 <astronode_transport_send_receive>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d110      	bne.n	80015e8 <astronode_send_cmd_cr+0x64>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 80015c6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015ca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2bc8      	cmp	r3, #200	; 0xc8
 80015d2:	d106      	bne.n	80015e2 <astronode_send_cmd_cr+0x5e>
        {
            g_is_command_available = false;
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <astronode_send_cmd_cr+0x70>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 80015da:	4807      	ldr	r0, [pc, #28]	; (80015f8 <astronode_send_cmd_cr+0x74>)
 80015dc:	f7ff f9e4 	bl	80009a8 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 80015e0:	e002      	b.n	80015e8 <astronode_send_cmd_cr+0x64>
            send_debug_logs("No command to clear.");
 80015e2:	4806      	ldr	r0, [pc, #24]	; (80015fc <astronode_send_cmd_cr+0x78>)
 80015e4:	f7ff f9e0 	bl	80009a8 <send_debug_logs>
}
 80015e8:	bf00      	nop
 80015ea:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200001b6 	.word	0x200001b6
 80015f8:	08005c5c 	.word	0x08005c5c
 80015fc:	08005c80 	.word	0x08005c80

08001600 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 8001600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001604:	b0fd      	sub	sp, #500	; 0x1f4
 8001606:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8001608:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800160c:	22c6      	movs	r2, #198	; 0xc6
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f002 ff1f 	bl	8004454 <memset>
    astronode_app_msg_t answer = {0};
 8001616:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800161a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800161e:	4618      	mov	r0, r3
 8001620:	23c6      	movs	r3, #198	; 0xc6
 8001622:	461a      	mov	r2, r3
 8001624:	2100      	movs	r1, #0
 8001626:	f002 ff15 	bl	8004454 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 800162a:	2347      	movs	r3, #71	; 0x47
 800162c:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8001630:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001634:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fae2 	bl	8001c04 <astronode_transport_send_receive>
 8001640:	4603      	mov	r3, r0
 8001642:	2b01      	cmp	r3, #1
 8001644:	f040 80c2 	bne.w	80017cc <astronode_send_cmd_rr+0x1cc>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8001648:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800164c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2bc7      	cmp	r3, #199	; 0xc7
 8001654:	f040 80b7 	bne.w	80017c6 <astronode_send_cmd_rr+0x1c6>
        {
 8001658:	466b      	mov	r3, sp
 800165a:	461e      	mov	r6, r3
            send_debug_logs("Received downlink command");
 800165c:	485e      	ldr	r0, [pc, #376]	; (80017d8 <astronode_send_cmd_rr+0x1d8>)
 800165e:	f7ff f9a3 	bl	80009a8 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8001662:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001666:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800166a:	785b      	ldrb	r3, [r3, #1]
 800166c:	461a      	mov	r2, r3
                                + (answer.p_payload[1] << 8)
 800166e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001672:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001676:	789b      	ldrb	r3, [r3, #2]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	441a      	add	r2, r3
                                + (answer.p_payload[2] << 16)
 800167c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001680:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001684:	78db      	ldrb	r3, [r3, #3]
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	441a      	add	r2, r3
                                + (answer.p_payload[3] << 24);
 800168a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800168e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001692:	791b      	ldrb	r3, [r3, #4]
 8001694:	061b      	lsls	r3, r3, #24
 8001696:	4413      	add	r3, r2
            uint32_t rtc_time = answer.p_payload[0]
 8001698:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 800169c:	463b      	mov	r3, r7
 800169e:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 80016a2:	494e      	ldr	r1, [pc, #312]	; (80017dc <astronode_send_cmd_rr+0x1dc>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 ff11 	bl	80044cc <siprintf>
            send_debug_logs(str);
 80016aa:	463b      	mov	r3, r7
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff f97b 	bl	80009a8 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 80016b2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80016b6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80016ba:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80016be:	2b2c      	cmp	r3, #44	; 0x2c
 80016c0:	d00b      	beq.n	80016da <astronode_send_cmd_rr+0xda>
 80016c2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80016c6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80016ca:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80016ce:	2b0c      	cmp	r3, #12
 80016d0:	d003      	beq.n	80016da <astronode_send_cmd_rr+0xda>
            {
                send_debug_logs("Command size error");
 80016d2:	4843      	ldr	r0, [pc, #268]	; (80017e0 <astronode_send_cmd_rr+0x1e0>)
 80016d4:	f7ff f968 	bl	80009a8 <send_debug_logs>
                return;
 80016d8:	e073      	b.n	80017c2 <astronode_send_cmd_rr+0x1c2>
            }

            char command_content[answer.payload_len];
 80016da:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80016de:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80016e2:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
 80016e6:	460b      	mov	r3, r1
 80016e8:	3b01      	subs	r3, #1
 80016ea:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80016ee:	b28b      	uxth	r3, r1
 80016f0:	2200      	movs	r2, #0
 80016f2:	4698      	mov	r8, r3
 80016f4:	4691      	mov	r9, r2
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001702:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001706:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800170a:	b28b      	uxth	r3, r1
 800170c:	2200      	movs	r2, #0
 800170e:	461c      	mov	r4, r3
 8001710:	4615      	mov	r5, r2
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	00eb      	lsls	r3, r5, #3
 800171c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001720:	00e2      	lsls	r2, r4, #3
 8001722:	460b      	mov	r3, r1
 8001724:	3307      	adds	r3, #7
 8001726:	08db      	lsrs	r3, r3, #3
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	ebad 0d03 	sub.w	sp, sp, r3
 800172e:	466b      	mov	r3, sp
 8001730:	3300      	adds	r3, #0
 8001732:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8001736:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800173a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800173e:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001742:	3b03      	subs	r3, #3
 8001744:	4619      	mov	r1, r3
 8001746:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800174a:	3305      	adds	r3, #5
 800174c:	4a25      	ldr	r2, [pc, #148]	; (80017e4 <astronode_send_cmd_rr+0x1e4>)
 800174e:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 8001752:	f002 fe87 	bl	8004464 <sniprintf>
 8001756:	4603      	mov	r3, r0
 8001758:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
            for (uint8_t index = 0; index < command_content_size; index++)
 800175c:	2300      	movs	r3, #0
 800175e:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
 8001762:	e015      	b.n	8001790 <astronode_send_cmd_rr+0x190>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8001764:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 8001768:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800176c:	5cd3      	ldrb	r3, [r2, r3]
 800176e:	3301      	adds	r3, #1
 8001770:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <astronode_send_cmd_rr+0x1e8>)
 8001772:	4413      	add	r3, r2
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	f003 0397 	and.w	r3, r3, #151	; 0x97
 800177a:	2b00      	cmp	r3, #0
 800177c:	d103      	bne.n	8001786 <astronode_send_cmd_rr+0x186>
                {
                    send_debug_logs("Command contains non printable characters");
 800177e:	481b      	ldr	r0, [pc, #108]	; (80017ec <astronode_send_cmd_rr+0x1ec>)
 8001780:	f7ff f912 	bl	80009a8 <send_debug_logs>
                    return;
 8001784:	e01d      	b.n	80017c2 <astronode_send_cmd_rr+0x1c2>
            for (uint8_t index = 0; index < command_content_size; index++)
 8001786:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 800178a:	3301      	adds	r3, #1
 800178c:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
 8001790:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 8001794:	b29b      	uxth	r3, r3
 8001796:	f8b7 21de 	ldrh.w	r2, [r7, #478]	; 0x1de
 800179a:	429a      	cmp	r2, r3
 800179c:	d8e2      	bhi.n	8001764 <astronode_send_cmd_rr+0x164>
                }
            }
            send_debug_logs("Command content is: ");
 800179e:	4814      	ldr	r0, [pc, #80]	; (80017f0 <astronode_send_cmd_rr+0x1f0>)
 80017a0:	f7ff f902 	bl	80009a8 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 80017a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017a8:	3305      	adds	r3, #5
 80017aa:	461a      	mov	r2, r3
 80017ac:	4911      	ldr	r1, [pc, #68]	; (80017f4 <astronode_send_cmd_rr+0x1f4>)
 80017ae:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 80017b2:	f002 fe8b 	bl	80044cc <siprintf>
            send_debug_logs(command_content);
 80017b6:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 80017ba:	f7ff f8f5 	bl	80009a8 <send_debug_logs>
 80017be:	46b5      	mov	sp, r6
 80017c0:	e004      	b.n	80017cc <astronode_send_cmd_rr+0x1cc>
 80017c2:	46b5      	mov	sp, r6
 80017c4:	e002      	b.n	80017cc <astronode_send_cmd_rr+0x1cc>
        }
        else
        {
            send_debug_logs("No command available.");
 80017c6:	480c      	ldr	r0, [pc, #48]	; (80017f8 <astronode_send_cmd_rr+0x1f8>)
 80017c8:	f7ff f8ee 	bl	80009a8 <send_debug_logs>
        }
    }
}
 80017cc:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 80017d0:	46bd      	mov	sp, r7
 80017d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017d6:	bf00      	nop
 80017d8:	08005c98 	.word	0x08005c98
 80017dc:	08005cb4 	.word	0x08005cb4
 80017e0:	08005d04 	.word	0x08005d04
 80017e4:	080053e8 	.word	0x080053e8
 80017e8:	08006488 	.word	0x08006488
 80017ec:	08005d18 	.word	0x08005d18
 80017f0:	08005d44 	.word	0x08005d44
 80017f4:	08005d5c 	.word	0x08005d5c
 80017f8:	08005d60 	.word	0x08005d60

080017fc <is_sak_available>:

bool is_sak_available()
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <is_sak_available+0x14>)
 8001802:	781b      	ldrb	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	200001b4 	.word	0x200001b4

08001814 <is_astronode_reset>:

bool is_astronode_reset()
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <is_astronode_reset+0x14>)
 800181a:	781b      	ldrb	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	200001b5 	.word	0x200001b5

0800182c <is_command_available>:

bool is_command_available()
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <is_command_available+0x14>)
 8001832:	781b      	ldrb	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	200001b6 	.word	0x200001b6

08001844 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
    if (ascii >= '0' && ascii <= '9')
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	2b2f      	cmp	r3, #47	; 0x2f
 8001854:	d909      	bls.n	800186a <ascii_to_value+0x26>
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b39      	cmp	r3, #57	; 0x39
 800185a:	d806      	bhi.n	800186a <ascii_to_value+0x26>
    {
        *p_value = ascii - '0';
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	3b30      	subs	r3, #48	; 0x30
 8001860:	b2da      	uxtb	r2, r3
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	701a      	strb	r2, [r3, #0]
        return true;
 8001866:	2301      	movs	r3, #1
 8001868:	e00d      	b.n	8001886 <ascii_to_value+0x42>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2b40      	cmp	r3, #64	; 0x40
 800186e:	d909      	bls.n	8001884 <ascii_to_value+0x40>
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	2b46      	cmp	r3, #70	; 0x46
 8001874:	d806      	bhi.n	8001884 <ascii_to_value+0x40>
    {
        *p_value = ascii - 'A' + 10;
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	3b37      	subs	r3, #55	; 0x37
 800187a:	b2da      	uxtb	r2, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	701a      	strb	r2, [r3, #0]
        return true;
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <ascii_to_value+0x42>
    }
    else
    {
        return false;
 8001884:	2300      	movs	r3, #0
    }
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	81fb      	strh	r3, [r7, #14]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 80018a0:	89fb      	ldrh	r3, [r7, #14]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	81fa      	strh	r2, [r7, #14]
 80018a6:	461a      	mov	r2, r3
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	2202      	movs	r2, #2
 80018ae:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018b6:	2101      	movs	r1, #1
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fa07 	bl	8001ccc <calculate_crc>
 80018be:	4603      	mov	r3, r0
 80018c0:	817b      	strh	r3, [r7, #10]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	1c58      	adds	r0, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80018cc:	897a      	ldrh	r2, [r7, #10]
 80018ce:	4619      	mov	r1, r3
 80018d0:	f000 f9fc 	bl	8001ccc <calculate_crc>
 80018d4:	4603      	mov	r3, r0
 80018d6:	817b      	strh	r3, [r7, #10]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 80018d8:	897b      	ldrh	r3, [r7, #10]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	b21a      	sxth	r2, r3
 80018de:	897b      	ldrh	r3, [r7, #10]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	4313      	orrs	r3, r2
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	817b      	strh	r3, [r7, #10]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7818      	ldrb	r0, [r3, #0]
 80018f0:	89fb      	ldrh	r3, [r7, #14]
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	4413      	add	r3, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f000 fb28 	bl	8001f4c <uint8_to_ascii_buffer>
    index += 2;
 80018fc:	89fb      	ldrh	r3, [r7, #14]
 80018fe:	3302      	adds	r3, #2
 8001900:	81fb      	strh	r3, [r7, #14]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8001902:	2300      	movs	r3, #0
 8001904:	81bb      	strh	r3, [r7, #12]
 8001906:	e00f      	b.n	8001928 <astronode_create_request_transport+0x96>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8001908:	89bb      	ldrh	r3, [r7, #12]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	7858      	ldrb	r0, [r3, #1]
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	4413      	add	r3, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f000 fb18 	bl	8001f4c <uint8_to_ascii_buffer>
        index += 2;
 800191c:	89fb      	ldrh	r3, [r7, #14]
 800191e:	3302      	adds	r3, #2
 8001920:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8001922:	89bb      	ldrh	r3, [r7, #12]
 8001924:	3301      	adds	r3, #1
 8001926:	81bb      	strh	r3, [r7, #12]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800192e:	89ba      	ldrh	r2, [r7, #12]
 8001930:	429a      	cmp	r2, r3
 8001932:	d3e9      	bcc.n	8001908 <astronode_create_request_transport+0x76>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8001934:	897b      	ldrh	r3, [r7, #10]
 8001936:	0a1b      	lsrs	r3, r3, #8
 8001938:	b29b      	uxth	r3, r3
 800193a:	b2d8      	uxtb	r0, r3
 800193c:	89fb      	ldrh	r3, [r7, #14]
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	4413      	add	r3, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f000 fb02 	bl	8001f4c <uint8_to_ascii_buffer>
    index += 2;
 8001948:	89fb      	ldrh	r3, [r7, #14]
 800194a:	3302      	adds	r3, #2
 800194c:	81fb      	strh	r3, [r7, #14]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 800194e:	897b      	ldrh	r3, [r7, #10]
 8001950:	b2d8      	uxtb	r0, r3
 8001952:	89fb      	ldrh	r3, [r7, #14]
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f000 faf7 	bl	8001f4c <uint8_to_ascii_buffer>
    index += 2;
 800195e:	89fb      	ldrh	r3, [r7, #14]
 8001960:	3302      	adds	r3, #2
 8001962:	81fb      	strh	r3, [r7, #14]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8001964:	89fb      	ldrh	r3, [r7, #14]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	81fa      	strh	r2, [r7, #14]
 800196a:	461a      	mov	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	4413      	add	r3, r2
 8001970:	2203      	movs	r2, #3
 8001972:	701a      	strb	r2, [r3, #0]

    return index;
 8001974:	89fb      	ldrh	r3, [r7, #14]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	460b      	mov	r3, r1
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	817b      	strh	r3, [r7, #10]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d004      	beq.n	80019a0 <astronode_decode_answer_transport+0x20>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8001996:	4896      	ldr	r0, [pc, #600]	; (8001bf0 <astronode_decode_answer_transport+0x270>)
 8001998:	f7ff f806 	bl	80009a8 <send_debug_logs>
        return RS_FAILURE;
 800199c:	2300      	movs	r3, #0
 800199e:	e123      	b.n	8001be8 <astronode_decode_answer_transport+0x268>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 80019a0:	897b      	ldrh	r3, [r7, #10]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <astronode_decode_answer_transport+0x32>
 80019ac:	897b      	ldrh	r3, [r7, #10]
 80019ae:	2b07      	cmp	r3, #7
 80019b0:	d804      	bhi.n	80019bc <astronode_decode_answer_transport+0x3c>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 80019b2:	4890      	ldr	r0, [pc, #576]	; (8001bf4 <astronode_decode_answer_transport+0x274>)
 80019b4:	f7fe fff8 	bl	80009a8 <send_debug_logs>
        return RS_FAILURE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	e115      	b.n	8001be8 <astronode_decode_answer_transport+0x268>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 80019bc:	897b      	ldrh	r3, [r7, #10]
 80019be:	3b08      	subs	r3, #8
 80019c0:	0fda      	lsrs	r2, r3, #31
 80019c2:	4413      	add	r3, r2
 80019c4:	105b      	asrs	r3, r3, #1
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 80019ce:	897b      	ldrh	r3, [r7, #10]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	4413      	add	r3, r2
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d004      	beq.n	80019e6 <astronode_decode_answer_transport+0x66>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 80019dc:	4886      	ldr	r0, [pc, #536]	; (8001bf8 <astronode_decode_answer_transport+0x278>)
 80019de:	f7fe ffe3 	bl	80009a8 <send_debug_logs>
        return RS_FAILURE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e100      	b.n	8001be8 <astronode_decode_answer_transport+0x268>
    }

    uint8_t nibble_high = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	75fb      	strb	r3, [r7, #23]
    uint8_t nibble_low = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	75bb      	strb	r3, [r7, #22]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3301      	adds	r3, #1
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	f107 0217 	add.w	r2, r7, #23
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff22 	bl	8001844 <ascii_to_value>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f083 0301 	eor.w	r3, r3, #1
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10e      	bne.n	8001a2a <astronode_decode_answer_transport+0xaa>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3302      	adds	r3, #2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	f107 0216 	add.w	r2, r7, #22
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff13 	bl	8001844 <ascii_to_value>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f083 0301 	eor.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <astronode_decode_answer_transport+0xb4>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001a2a:	4874      	ldr	r0, [pc, #464]	; (8001bfc <astronode_decode_answer_transport+0x27c>)
 8001a2c:	f7fe ffbc 	bl	80009a8 <send_debug_logs>
        return RS_FAILURE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	e0d9      	b.n	8001be8 <astronode_decode_answer_transport+0x268>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	7dbb      	ldrb	r3, [r7, #22]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8001a44:	2303      	movs	r3, #3
 8001a46:	83fb      	strh	r3, [r7, #30]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	83bb      	strh	r3, [r7, #28]
 8001a4c:	e035      	b.n	8001aba <astronode_decode_answer_transport+0x13a>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8001a4e:	8bfb      	ldrh	r3, [r7, #30]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	f107 0217 	add.w	r2, r7, #23
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fef1 	bl	8001844 <ascii_to_value>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f083 0301 	eor.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d110      	bne.n	8001a90 <astronode_decode_answer_transport+0x110>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8001a6e:	8bfb      	ldrh	r3, [r7, #30]
 8001a70:	3301      	adds	r3, #1
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4413      	add	r3, r2
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	f107 0216 	add.w	r2, r7, #22
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fee0 	bl	8001844 <ascii_to_value>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f083 0301 	eor.w	r3, r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <astronode_decode_answer_transport+0x11a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001a90:	485a      	ldr	r0, [pc, #360]	; (8001bfc <astronode_decode_answer_transport+0x27c>)
 8001a92:	f7fe ff89 	bl	80009a8 <send_debug_logs>
            return RS_FAILURE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e0a6      	b.n	8001be8 <astronode_decode_answer_transport+0x268>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	b2d9      	uxtb	r1, r3
 8001aa0:	7dba      	ldrb	r2, [r7, #22]
 8001aa2:	8bbb      	ldrh	r3, [r7, #28]
 8001aa4:	1c58      	adds	r0, r3, #1
 8001aa6:	83b8      	strh	r0, [r7, #28]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	188b      	adds	r3, r1, r2
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4403      	add	r3, r0
 8001ab2:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8001ab4:	8bfb      	ldrh	r3, [r7, #30]
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	83fb      	strh	r3, [r7, #30]
 8001aba:	8bfa      	ldrh	r2, [r7, #30]
 8001abc:	897b      	ldrh	r3, [r7, #10]
 8001abe:	3b05      	subs	r3, #5
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbc4      	blt.n	8001a4e <astronode_decode_answer_transport+0xce>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aca:	2101      	movs	r1, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 f8fd 	bl	8001ccc <calculate_crc>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	837b      	strh	r3, [r7, #26]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	1c58      	adds	r0, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001ae0:	8b7a      	ldrh	r2, [r7, #26]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f000 f8f2 	bl	8001ccc <calculate_crc>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	837b      	strh	r3, [r7, #26]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8001aec:	8b7b      	ldrh	r3, [r7, #26]
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	8b7b      	ldrh	r3, [r7, #26]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	4313      	orrs	r3, r2
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	837b      	strh	r3, [r7, #26]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8001b00:	897b      	ldrh	r3, [r7, #10]
 8001b02:	3b05      	subs	r3, #5
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	f107 0217 	add.w	r2, r7, #23
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fe97 	bl	8001844 <ascii_to_value>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f083 0301 	eor.w	r3, r3, #1
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d110      	bne.n	8001b44 <astronode_decode_answer_transport+0x1c4>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8001b22:	897b      	ldrh	r3, [r7, #10]
 8001b24:	3b04      	subs	r3, #4
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4413      	add	r3, r2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	f107 0216 	add.w	r2, r7, #22
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fe86 	bl	8001844 <ascii_to_value>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f083 0301 	eor.w	r3, r3, #1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d004      	beq.n	8001b4e <astronode_decode_answer_transport+0x1ce>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001b44:	482d      	ldr	r0, [pc, #180]	; (8001bfc <astronode_decode_answer_transport+0x27c>)
 8001b46:	f7fe ff2f 	bl	80009a8 <send_debug_logs>
        return RS_FAILURE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e04c      	b.n	8001be8 <astronode_decode_answer_transport+0x268>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8001b4e:	7dfb      	ldrb	r3, [r7, #23]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	031b      	lsls	r3, r3, #12
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	7dbb      	ldrb	r3, [r7, #22]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	833b      	strh	r3, [r7, #24]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8001b62:	897b      	ldrh	r3, [r7, #10]
 8001b64:	3b03      	subs	r3, #3
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	4413      	add	r3, r2
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	f107 0217 	add.w	r2, r7, #23
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fe66 	bl	8001844 <ascii_to_value>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f083 0301 	eor.w	r3, r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d110      	bne.n	8001ba6 <astronode_decode_answer_transport+0x226>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8001b84:	897b      	ldrh	r3, [r7, #10]
 8001b86:	3b02      	subs	r3, #2
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	f107 0216 	add.w	r2, r7, #22
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fe55 	bl	8001844 <ascii_to_value>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f083 0301 	eor.w	r3, r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <astronode_decode_answer_transport+0x230>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001ba6:	4815      	ldr	r0, [pc, #84]	; (8001bfc <astronode_decode_answer_transport+0x27c>)
 8001ba8:	f7fe fefe 	bl	80009a8 <send_debug_logs>
        return RS_FAILURE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e01b      	b.n	8001be8 <astronode_decode_answer_transport+0x268>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8001bb0:	7dfb      	ldrb	r3, [r7, #23]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	7dbb      	ldrb	r3, [r7, #22]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	8b3b      	ldrh	r3, [r7, #24]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	833b      	strh	r3, [r7, #24]

    if (crc_received != crc_calculated)
 8001bc6:	8b3a      	ldrh	r2, [r7, #24]
 8001bc8:	8b7b      	ldrh	r3, [r7, #26]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d004      	beq.n	8001bd8 <astronode_decode_answer_transport+0x258>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8001bce:	480c      	ldr	r0, [pc, #48]	; (8001c00 <astronode_decode_answer_transport+0x280>)
 8001bd0:	f7fe feea 	bl	80009a8 <send_debug_logs>
        return RS_FAILURE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e007      	b.n	8001be8 <astronode_decode_answer_transport+0x268>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2bff      	cmp	r3, #255	; 0xff
 8001bde:	d102      	bne.n	8001be6 <astronode_decode_answer_transport+0x266>
    {
        check_for_error(p_destination_message);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f8ad 	bl	8001d40 <check_for_error>
    }

    return RS_SUCCESS;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3720      	adds	r7, #32
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	08005d78 	.word	0x08005d78
 8001bf4:	08005dc8 	.word	0x08005dc8
 8001bf8:	08005e18 	.word	0x08005e18
 8001bfc:	08005e68 	.word	0x08005e68
 8001c00:	08005eb4 	.word	0x08005eb4

08001c04 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001c10:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8001c14:	6018      	str	r0, [r3, #0]
 8001c16:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001c1a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001c1e:	6019      	str	r1, [r3, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8001c20:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001c24:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f002 fc0d 	bl	8004454 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8001c3a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001c3e:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	3304      	adds	r3, #4
 8001c48:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fc00 	bl	8004454 <memset>
    uint16_t answer_length =  0;
 8001c54:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001c58:	f2a3 331e 	subw	r3, r3, #798	; 0x31e
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8001c60:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8001c64:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001c68:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	f7ff fe0f 	bl	8001892 <astronode_create_request_transport>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f8a7 3326 	strh.w	r3, [r7, #806]	; 0x326

    send_astronode_request(request_transport, request_length);
 8001c7a:	f8b7 2326 	ldrh.w	r2, [r7, #806]	; 0x326
 8001c7e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fed3 	bl	8000a30 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8001c8a:	f107 020a 	add.w	r2, r7, #10
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 f8fb 	bl	8001e90 <receive_astronode_answer>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d10f      	bne.n	8001cc0 <astronode_transport_send_receive+0xbc>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8001ca0:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001ca4:	f2a3 331e 	subw	r3, r3, #798	; 0x31e
 8001ca8:	8819      	ldrh	r1, [r3, #0]
 8001caa:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001cae:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001cb2:	f107 000c 	add.w	r0, r7, #12
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	f7ff fe62 	bl	8001980 <astronode_decode_answer_transport>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	e000      	b.n	8001cc2 <astronode_transport_send_receive+0xbe>
    }
    else
    {
        return RS_FAILURE;
 8001cc0:	2300      	movs	r3, #0
    }
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f507 774a 	add.w	r7, r7, #808	; 0x328
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	807b      	strh	r3, [r7, #2]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	803b      	strh	r3, [r7, #0]
    uint16_t crc = init_value;
 8001cdc:	883b      	ldrh	r3, [r7, #0]
 8001cde:	81fb      	strh	r3, [r7, #14]

    while (data_len--)
 8001ce0:	e021      	b.n	8001d26 <calculate_crc+0x5a>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8001ce2:	89fb      	ldrh	r3, [r7, #14]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	1c59      	adds	r1, r3, #1
 8001cec:	6079      	str	r1, [r7, #4]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	4053      	eors	r3, r2
 8001cf4:	81bb      	strh	r3, [r7, #12]
        x ^= x >> 4;
 8001cf6:	89bb      	ldrh	r3, [r7, #12]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	89bb      	ldrh	r3, [r7, #12]
 8001cfe:	4053      	eors	r3, r2
 8001d00:	81bb      	strh	r3, [r7, #12]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8001d02:	89fb      	ldrh	r3, [r7, #14]
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	b21a      	sxth	r2, r3
 8001d08:	89bb      	ldrh	r3, [r7, #12]
 8001d0a:	031b      	lsls	r3, r3, #12
 8001d0c:	b21b      	sxth	r3, r3
 8001d0e:	4053      	eors	r3, r2
 8001d10:	b21a      	sxth	r2, r3
 8001d12:	89bb      	ldrh	r3, [r7, #12]
 8001d14:	015b      	lsls	r3, r3, #5
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4053      	eors	r3, r2
 8001d1a:	b21a      	sxth	r2, r3
 8001d1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d20:	4053      	eors	r3, r2
 8001d22:	b21b      	sxth	r3, r3
 8001d24:	81fb      	strh	r3, [r7, #14]
    while (data_len--)
 8001d26:	887b      	ldrh	r3, [r7, #2]
 8001d28:	1e5a      	subs	r2, r3, #1
 8001d2a:	807a      	strh	r2, [r7, #2]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1d8      	bne.n	8001ce2 <calculate_crc+0x16>
    }
    return crc;
 8001d30:	89fb      	ldrh	r3, [r7, #14]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	785b      	ldrb	r3, [r3, #1]
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	789b      	ldrb	r3, [r3, #2]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4413      	add	r3, r2
 8001d5a:	81fb      	strh	r3, [r7, #14]

    switch (error_code)
 8001d5c:	89fb      	ldrh	r3, [r7, #14]
 8001d5e:	f244 6201 	movw	r2, #17921	; 0x4601
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d06f      	beq.n	8001e46 <check_for_error+0x106>
 8001d66:	f244 6201 	movw	r2, #17921	; 0x4601
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	dc6f      	bgt.n	8001e4e <check_for_error+0x10e>
 8001d6e:	f244 5201 	movw	r2, #17665	; 0x4501
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d063      	beq.n	8001e3e <check_for_error+0xfe>
 8001d76:	f244 5201 	movw	r2, #17665	; 0x4501
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	dc67      	bgt.n	8001e4e <check_for_error+0x10e>
 8001d7e:	f243 5201 	movw	r2, #13569	; 0x3501
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d057      	beq.n	8001e36 <check_for_error+0xf6>
 8001d86:	f243 5201 	movw	r2, #13569	; 0x3501
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	dc5f      	bgt.n	8001e4e <check_for_error+0x10e>
 8001d8e:	f242 6201 	movw	r2, #9729	; 0x2601
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d04b      	beq.n	8001e2e <check_for_error+0xee>
 8001d96:	f242 6201 	movw	r2, #9729	; 0x2601
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	dc57      	bgt.n	8001e4e <check_for_error+0x10e>
 8001d9e:	f242 5211 	movw	r2, #9489	; 0x2511
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d03f      	beq.n	8001e26 <check_for_error+0xe6>
 8001da6:	f242 5211 	movw	r2, #9489	; 0x2511
 8001daa:	4293      	cmp	r3, r2
 8001dac:	dc4f      	bgt.n	8001e4e <check_for_error+0x10e>
 8001dae:	f242 5201 	movw	r2, #9473	; 0x2501
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d033      	beq.n	8001e1e <check_for_error+0xde>
 8001db6:	f242 5201 	movw	r2, #9473	; 0x2501
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	dc47      	bgt.n	8001e4e <check_for_error+0x10e>
 8001dbe:	f240 6211 	movw	r2, #1553	; 0x611
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d027      	beq.n	8001e16 <check_for_error+0xd6>
 8001dc6:	f240 6211 	movw	r2, #1553	; 0x611
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	dc3f      	bgt.n	8001e4e <check_for_error+0x10e>
 8001dce:	f240 6201 	movw	r2, #1537	; 0x601
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01b      	beq.n	8001e0e <check_for_error+0xce>
 8001dd6:	f240 6201 	movw	r2, #1537	; 0x601
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	dc37      	bgt.n	8001e4e <check_for_error+0x10e>
 8001dde:	f240 1221 	movw	r2, #289	; 0x121
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00f      	beq.n	8001e06 <check_for_error+0xc6>
 8001de6:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8001dea:	da30      	bge.n	8001e4e <check_for_error+0x10e>
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d002      	beq.n	8001df6 <check_for_error+0xb6>
 8001df0:	2b11      	cmp	r3, #17
 8001df2:	d004      	beq.n	8001dfe <check_for_error+0xbe>
 8001df4:	e02b      	b.n	8001e4e <check_for_error+0x10e>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8001df6:	481a      	ldr	r0, [pc, #104]	; (8001e60 <check_for_error+0x120>)
 8001df8:	f7fe fdd6 	bl	80009a8 <send_debug_logs>
            break;
 8001dfc:	e02b      	b.n	8001e56 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8001dfe:	4819      	ldr	r0, [pc, #100]	; (8001e64 <check_for_error+0x124>)
 8001e00:	f7fe fdd2 	bl	80009a8 <send_debug_logs>
            break;
 8001e04:	e027      	b.n	8001e56 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8001e06:	4818      	ldr	r0, [pc, #96]	; (8001e68 <check_for_error+0x128>)
 8001e08:	f7fe fdce 	bl	80009a8 <send_debug_logs>
            break;
 8001e0c:	e023      	b.n	8001e56 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8001e0e:	4817      	ldr	r0, [pc, #92]	; (8001e6c <check_for_error+0x12c>)
 8001e10:	f7fe fdca 	bl	80009a8 <send_debug_logs>
            break;
 8001e14:	e01f      	b.n	8001e56 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8001e16:	4816      	ldr	r0, [pc, #88]	; (8001e70 <check_for_error+0x130>)
 8001e18:	f7fe fdc6 	bl	80009a8 <send_debug_logs>
            break;
 8001e1c:	e01b      	b.n	8001e56 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8001e1e:	4815      	ldr	r0, [pc, #84]	; (8001e74 <check_for_error+0x134>)
 8001e20:	f7fe fdc2 	bl	80009a8 <send_debug_logs>
            break;
 8001e24:	e017      	b.n	8001e56 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8001e26:	4814      	ldr	r0, [pc, #80]	; (8001e78 <check_for_error+0x138>)
 8001e28:	f7fe fdbe 	bl	80009a8 <send_debug_logs>
            break;
 8001e2c:	e013      	b.n	8001e56 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8001e2e:	4813      	ldr	r0, [pc, #76]	; (8001e7c <check_for_error+0x13c>)
 8001e30:	f7fe fdba 	bl	80009a8 <send_debug_logs>
            break;
 8001e34:	e00f      	b.n	8001e56 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8001e36:	4812      	ldr	r0, [pc, #72]	; (8001e80 <check_for_error+0x140>)
 8001e38:	f7fe fdb6 	bl	80009a8 <send_debug_logs>
            break;
 8001e3c:	e00b      	b.n	8001e56 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 8001e3e:	4811      	ldr	r0, [pc, #68]	; (8001e84 <check_for_error+0x144>)
 8001e40:	f7fe fdb2 	bl	80009a8 <send_debug_logs>
            break;
 8001e44:	e007      	b.n	8001e56 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8001e46:	4810      	ldr	r0, [pc, #64]	; (8001e88 <check_for_error+0x148>)
 8001e48:	f7fe fdae 	bl	80009a8 <send_debug_logs>
            break;
 8001e4c:	e003      	b.n	8001e56 <check_for_error+0x116>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8001e4e:	480f      	ldr	r0, [pc, #60]	; (8001e8c <check_for_error+0x14c>)
 8001e50:	f7fe fdaa 	bl	80009a8 <send_debug_logs>
            break;
 8001e54:	bf00      	nop
    }
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	08005ef8 	.word	0x08005ef8
 8001e64:	08005f44 	.word	0x08005f44
 8001e68:	08005fa8 	.word	0x08005fa8
 8001e6c:	08005fe0 	.word	0x08005fe0
 8001e70:	08006084 	.word	0x08006084
 8001e74:	080060ec 	.word	0x080060ec
 8001e78:	0800614c 	.word	0x0800614c
 8001e7c:	080061d8 	.word	0x080061d8
 8001e80:	08006238 	.word	0x08006238
 8001e84:	080062e4 	.word	0x080062e4
 8001e88:	08006330 	.word	0x08006330
 8001e8c:	08006378 	.word	0x08006378

08001e90 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
    uint16_t length = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	82fb      	strh	r3, [r7, #22]
    uint32_t timeout_answer_received = get_systick();
 8001ea2:	f7fe fde1 	bl	8000a68 <get_systick>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	757b      	strb	r3, [r7, #21]

    while (is_answer_received == false)
 8001eae:	e036      	b.n	8001f1e <receive_astronode_answer+0x8e>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8001eb0:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001eb4:	6938      	ldr	r0, [r7, #16]
 8001eb6:	f7fe fdde 	bl	8000a76 <is_systick_timeout_over>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d004      	beq.n	8001eca <receive_astronode_answer+0x3a>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8001ec0:	481f      	ldr	r0, [pc, #124]	; (8001f40 <receive_astronode_answer+0xb0>)
 8001ec2:	f7fe fd71 	bl	80009a8 <send_debug_logs>
            return RS_FAILURE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e036      	b.n	8001f38 <receive_astronode_answer+0xa8>
        }
        if (is_astronode_character_received(&rx_char))
 8001eca:	f107 030f 	add.w	r3, r7, #15
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fde6 	bl	8000aa0 <is_astronode_character_received>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d021      	beq.n	8001f1e <receive_astronode_answer+0x8e>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d103      	bne.n	8001ee8 <receive_astronode_answer+0x58>
            {
                is_answer_received = false;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	757b      	strb	r3, [r7, #21]
                length = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	82fb      	strh	r3, [r7, #22]
            }

            p_rx_buffer[length] = rx_char;
 8001ee8:	8afb      	ldrh	r3, [r7, #22]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	701a      	strb	r2, [r3, #0]
            length++;
 8001ef2:	8afb      	ldrh	r3, [r7, #22]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	82fb      	strh	r3, [r7, #22]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 8001ef8:	8afb      	ldrh	r3, [r7, #22]
 8001efa:	2bb2      	cmp	r3, #178	; 0xb2
 8001efc:	d904      	bls.n	8001f08 <receive_astronode_answer+0x78>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8001efe:	4811      	ldr	r0, [pc, #68]	; (8001f44 <receive_astronode_answer+0xb4>)
 8001f00:	f7fe fd52 	bl	80009a8 <send_debug_logs>
                return RS_FAILURE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e017      	b.n	8001f38 <receive_astronode_answer+0xa8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d107      	bne.n	8001f1e <receive_astronode_answer+0x8e>
            {
                if (length > 1)
 8001f0e:	8afb      	ldrh	r3, [r7, #22]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d904      	bls.n	8001f1e <receive_astronode_answer+0x8e>
                {
                    *p_buffer_length = length;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	8afa      	ldrh	r2, [r7, #22]
 8001f18:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	757b      	strb	r3, [r7, #21]
    while (is_answer_received == false)
 8001f1e:	7d7b      	ldrb	r3, [r7, #21]
 8001f20:	f083 0301 	eor.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1c2      	bne.n	8001eb0 <receive_astronode_answer+0x20>
                }
            }
        }
    }

    send_debug_logs("Message received from the Astronode <-- ");
 8001f2a:	4807      	ldr	r0, [pc, #28]	; (8001f48 <receive_astronode_answer+0xb8>)
 8001f2c:	f7fe fd3c 	bl	80009a8 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7fe fd39 	bl	80009a8 <send_debug_logs>

    return RS_SUCCESS;
 8001f36:	2301      	movs	r3, #1
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	0800639c 	.word	0x0800639c
 8001f44:	080063c0 	.word	0x080063c0
 8001f48:	0800640c 	.word	0x0800640c

08001f4c <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <uint8_to_ascii_buffer+0x38>)
 8001f62:	5c9a      	ldrb	r2, [r3, r2]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 020f 	and.w	r2, r3, #15
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	4904      	ldr	r1, [pc, #16]	; (8001f84 <uint8_to_ascii_buffer+0x38>)
 8001f74:	5c8a      	ldrb	r2, [r1, r2]
 8001f76:	701a      	strb	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	08006450 	.word	0x08006450

08001f88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f92:	2003      	movs	r0, #3
 8001f94:	f000 f93c 	bl	8002210 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f000 f80d 	bl	8001fb8 <HAL_InitTick>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	71fb      	strb	r3, [r7, #7]
 8001fa8:	e001      	b.n	8001fae <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001faa:	f7fe fdbb 	bl	8000b24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fae:	79fb      	ldrb	r3, [r7, #7]

}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fc4:	4b16      	ldr	r3, [pc, #88]	; (8002020 <HAL_InitTick+0x68>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d022      	beq.n	8002012 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001fcc:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_InitTick+0x6c>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <HAL_InitTick+0x68>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 f93a 	bl	800225a <HAL_SYSTICK_Config>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10f      	bne.n	800200c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b0f      	cmp	r3, #15
 8001ff0:	d809      	bhi.n	8002006 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffa:	f000 f914 	bl	8002226 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_InitTick+0x70>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	e007      	b.n	8002016 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	73fb      	strb	r3, [r7, #15]
 800200a:	e004      	b.n	8002016 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	e001      	b.n	8002016 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000008 	.word	0x20000008
 8002024:	20000000 	.word	0x20000000
 8002028:	20000004 	.word	0x20000004

0800202c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_IncTick+0x1c>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_IncTick+0x20>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4413      	add	r3, r2
 800203a:	4a03      	ldr	r2, [pc, #12]	; (8002048 <HAL_IncTick+0x1c>)
 800203c:	6013      	str	r3, [r2, #0]
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	200001b8 	.word	0x200001b8
 800204c:	20000008 	.word	0x20000008

08002050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return uwTick;
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <HAL_GetTick+0x14>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	200001b8 	.word	0x200001b8

08002068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002070:	f7ff ffee 	bl	8002050 <HAL_GetTick>
 8002074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d004      	beq.n	800208c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_Delay+0x40>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4413      	add	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800208c:	bf00      	nop
 800208e:	f7ff ffdf 	bl	8002050 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	429a      	cmp	r2, r3
 800209c:	d8f7      	bhi.n	800208e <HAL_Delay+0x26>
  {
  }
}
 800209e:	bf00      	nop
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000008 	.word	0x20000008

080020ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c8:	4013      	ands	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020de:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	60d3      	str	r3, [r2, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <__NVIC_GetPriorityGrouping+0x18>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	f003 0307 	and.w	r3, r3, #7
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	6039      	str	r1, [r7, #0]
 800211a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	2b00      	cmp	r3, #0
 8002122:	db0a      	blt.n	800213a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	490c      	ldr	r1, [pc, #48]	; (800215c <__NVIC_SetPriority+0x4c>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	0112      	lsls	r2, r2, #4
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	440b      	add	r3, r1
 8002134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002138:	e00a      	b.n	8002150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4908      	ldr	r1, [pc, #32]	; (8002160 <__NVIC_SetPriority+0x50>)
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	3b04      	subs	r3, #4
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	440b      	add	r3, r1
 800214e:	761a      	strb	r2, [r3, #24]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000e100 	.word	0xe000e100
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f1c3 0307 	rsb	r3, r3, #7
 800217e:	2b04      	cmp	r3, #4
 8002180:	bf28      	it	cs
 8002182:	2304      	movcs	r3, #4
 8002184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3304      	adds	r3, #4
 800218a:	2b06      	cmp	r3, #6
 800218c:	d902      	bls.n	8002194 <NVIC_EncodePriority+0x30>
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3b03      	subs	r3, #3
 8002192:	e000      	b.n	8002196 <NVIC_EncodePriority+0x32>
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	f04f 32ff 	mov.w	r2, #4294967295
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	401a      	ands	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	4313      	orrs	r3, r2
         );
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3724      	adds	r7, #36	; 0x24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021dc:	d301      	bcc.n	80021e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021de:	2301      	movs	r3, #1
 80021e0:	e00f      	b.n	8002202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <SysTick_Config+0x40>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ea:	210f      	movs	r1, #15
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f7ff ff8e 	bl	8002110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <SysTick_Config+0x40>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <SysTick_Config+0x40>)
 80021fc:	2207      	movs	r2, #7
 80021fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	e000e010 	.word	0xe000e010

08002210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ff47 	bl	80020ac <__NVIC_SetPriorityGrouping>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff5e 	bl	80020f4 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff90 	bl	8002164 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5f 	bl	8002110 <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ffb2 	bl	80021cc <SysTick_Config>
 8002268:	4603      	mov	r3, r0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002282:	e15a      	b.n	800253a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	4013      	ands	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 814c 	beq.w	8002534 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d005      	beq.n	80022b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d130      	bne.n	8002316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ea:	2201      	movs	r2, #1
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	f003 0201 	and.w	r2, r3, #1
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b03      	cmp	r3, #3
 8002320:	d017      	beq.n	8002352 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	2203      	movs	r2, #3
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d123      	bne.n	80023a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	08da      	lsrs	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3208      	adds	r2, #8
 8002366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800236a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	220f      	movs	r2, #15
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	08da      	lsrs	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3208      	adds	r2, #8
 80023a0:	6939      	ldr	r1, [r7, #16]
 80023a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0203 	and.w	r2, r3, #3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 80a6 	beq.w	8002534 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e8:	4b5b      	ldr	r3, [pc, #364]	; (8002558 <HAL_GPIO_Init+0x2e4>)
 80023ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ec:	4a5a      	ldr	r2, [pc, #360]	; (8002558 <HAL_GPIO_Init+0x2e4>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6613      	str	r3, [r2, #96]	; 0x60
 80023f4:	4b58      	ldr	r3, [pc, #352]	; (8002558 <HAL_GPIO_Init+0x2e4>)
 80023f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002400:	4a56      	ldr	r2, [pc, #344]	; (800255c <HAL_GPIO_Init+0x2e8>)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	089b      	lsrs	r3, r3, #2
 8002406:	3302      	adds	r3, #2
 8002408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	220f      	movs	r2, #15
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800242a:	d01f      	beq.n	800246c <HAL_GPIO_Init+0x1f8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a4c      	ldr	r2, [pc, #304]	; (8002560 <HAL_GPIO_Init+0x2ec>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d019      	beq.n	8002468 <HAL_GPIO_Init+0x1f4>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a4b      	ldr	r2, [pc, #300]	; (8002564 <HAL_GPIO_Init+0x2f0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d013      	beq.n	8002464 <HAL_GPIO_Init+0x1f0>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a4a      	ldr	r2, [pc, #296]	; (8002568 <HAL_GPIO_Init+0x2f4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00d      	beq.n	8002460 <HAL_GPIO_Init+0x1ec>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a49      	ldr	r2, [pc, #292]	; (800256c <HAL_GPIO_Init+0x2f8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d007      	beq.n	800245c <HAL_GPIO_Init+0x1e8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a48      	ldr	r2, [pc, #288]	; (8002570 <HAL_GPIO_Init+0x2fc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d101      	bne.n	8002458 <HAL_GPIO_Init+0x1e4>
 8002454:	2305      	movs	r3, #5
 8002456:	e00a      	b.n	800246e <HAL_GPIO_Init+0x1fa>
 8002458:	2306      	movs	r3, #6
 800245a:	e008      	b.n	800246e <HAL_GPIO_Init+0x1fa>
 800245c:	2304      	movs	r3, #4
 800245e:	e006      	b.n	800246e <HAL_GPIO_Init+0x1fa>
 8002460:	2303      	movs	r3, #3
 8002462:	e004      	b.n	800246e <HAL_GPIO_Init+0x1fa>
 8002464:	2302      	movs	r3, #2
 8002466:	e002      	b.n	800246e <HAL_GPIO_Init+0x1fa>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <HAL_GPIO_Init+0x1fa>
 800246c:	2300      	movs	r3, #0
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	f002 0203 	and.w	r2, r2, #3
 8002474:	0092      	lsls	r2, r2, #2
 8002476:	4093      	lsls	r3, r2
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800247e:	4937      	ldr	r1, [pc, #220]	; (800255c <HAL_GPIO_Init+0x2e8>)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	3302      	adds	r3, #2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800248c:	4b39      	ldr	r3, [pc, #228]	; (8002574 <HAL_GPIO_Init+0x300>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024b0:	4a30      	ldr	r2, [pc, #192]	; (8002574 <HAL_GPIO_Init+0x300>)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024b6:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <HAL_GPIO_Init+0x300>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024da:	4a26      	ldr	r2, [pc, #152]	; (8002574 <HAL_GPIO_Init+0x300>)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_GPIO_Init+0x300>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002504:	4a1b      	ldr	r2, [pc, #108]	; (8002574 <HAL_GPIO_Init+0x300>)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800250a:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <HAL_GPIO_Init+0x300>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800252e:	4a11      	ldr	r2, [pc, #68]	; (8002574 <HAL_GPIO_Init+0x300>)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	3301      	adds	r3, #1
 8002538:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	f47f ae9d 	bne.w	8002284 <HAL_GPIO_Init+0x10>
  }
}
 800254a:	bf00      	nop
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	40021000 	.word	0x40021000
 800255c:	40010000 	.word	0x40010000
 8002560:	48000400 	.word	0x48000400
 8002564:	48000800 	.word	0x48000800
 8002568:	48000c00 	.word	0x48000c00
 800256c:	48001000 	.word	0x48001000
 8002570:	48001400 	.word	0x48001400
 8002574:	40010400 	.word	0x40010400

08002578 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	887b      	ldrh	r3, [r7, #2]
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
 8002594:	e001      	b.n	800259a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800259a:	7bfb      	ldrb	r3, [r7, #15]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]
 80025b4:	4613      	mov	r3, r2
 80025b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b8:	787b      	ldrb	r3, [r7, #1]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025be:	887a      	ldrh	r2, [r7, #2]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025c4:	e002      	b.n	80025cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d141      	bne.n	800266a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025e6:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f2:	d131      	bne.n	8002658 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025f4:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025fa:	4a46      	ldr	r2, [pc, #280]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002600:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002604:	4b43      	ldr	r3, [pc, #268]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800260c:	4a41      	ldr	r2, [pc, #260]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002612:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002614:	4b40      	ldr	r3, [pc, #256]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2232      	movs	r2, #50	; 0x32
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	4a3f      	ldr	r2, [pc, #252]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	0c9b      	lsrs	r3, r3, #18
 8002626:	3301      	adds	r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800262a:	e002      	b.n	8002632 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3b01      	subs	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002632:	4b38      	ldr	r3, [pc, #224]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800263e:	d102      	bne.n	8002646 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f2      	bne.n	800262c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002646:	4b33      	ldr	r3, [pc, #204]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002652:	d158      	bne.n	8002706 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e057      	b.n	8002708 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002658:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800265e:	4a2d      	ldr	r2, [pc, #180]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002664:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002668:	e04d      	b.n	8002706 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002670:	d141      	bne.n	80026f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002672:	4b28      	ldr	r3, [pc, #160]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800267a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267e:	d131      	bne.n	80026e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002680:	4b24      	ldr	r3, [pc, #144]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002686:	4a23      	ldr	r2, [pc, #140]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002690:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002698:	4a1e      	ldr	r2, [pc, #120]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800269e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2232      	movs	r2, #50	; 0x32
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	4a1c      	ldr	r2, [pc, #112]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	0c9b      	lsrs	r3, r3, #18
 80026b2:	3301      	adds	r3, #1
 80026b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026b6:	e002      	b.n	80026be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ca:	d102      	bne.n	80026d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f2      	bne.n	80026b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026de:	d112      	bne.n	8002706 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e011      	b.n	8002708 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026f4:	e007      	b.n	8002706 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026fe:	4a05      	ldr	r2, [pc, #20]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002700:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002704:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40007000 	.word	0x40007000
 8002718:	20000000 	.word	0x20000000
 800271c:	431bde83 	.word	0x431bde83

08002720 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e306      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d075      	beq.n	800282a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800273e:	4b97      	ldr	r3, [pc, #604]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002748:	4b94      	ldr	r3, [pc, #592]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	d102      	bne.n	800275e <HAL_RCC_OscConfig+0x3e>
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2b03      	cmp	r3, #3
 800275c:	d002      	beq.n	8002764 <HAL_RCC_OscConfig+0x44>
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b08      	cmp	r3, #8
 8002762:	d10b      	bne.n	800277c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	4b8d      	ldr	r3, [pc, #564]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d05b      	beq.n	8002828 <HAL_RCC_OscConfig+0x108>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d157      	bne.n	8002828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e2e1      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002784:	d106      	bne.n	8002794 <HAL_RCC_OscConfig+0x74>
 8002786:	4b85      	ldr	r3, [pc, #532]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a84      	ldr	r2, [pc, #528]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e01d      	b.n	80027d0 <HAL_RCC_OscConfig+0xb0>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x98>
 800279e:	4b7f      	ldr	r3, [pc, #508]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a7e      	ldr	r2, [pc, #504]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b7c      	ldr	r3, [pc, #496]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7b      	ldr	r2, [pc, #492]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e00b      	b.n	80027d0 <HAL_RCC_OscConfig+0xb0>
 80027b8:	4b78      	ldr	r3, [pc, #480]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a77      	ldr	r2, [pc, #476]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	4b75      	ldr	r3, [pc, #468]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a74      	ldr	r2, [pc, #464]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d013      	beq.n	8002800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7ff fc3a 	bl	8002050 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e0:	f7ff fc36 	bl	8002050 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	; 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e2a6      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027f2:	4b6a      	ldr	r3, [pc, #424]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0xc0>
 80027fe:	e014      	b.n	800282a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7ff fc26 	bl	8002050 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002808:	f7ff fc22 	bl	8002050 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	; 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e292      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800281a:	4b60      	ldr	r3, [pc, #384]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0xe8>
 8002826:	e000      	b.n	800282a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d075      	beq.n	8002922 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002836:	4b59      	ldr	r3, [pc, #356]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002840:	4b56      	ldr	r3, [pc, #344]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	2b0c      	cmp	r3, #12
 800284e:	d102      	bne.n	8002856 <HAL_RCC_OscConfig+0x136>
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d002      	beq.n	800285c <HAL_RCC_OscConfig+0x13c>
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b04      	cmp	r3, #4
 800285a:	d11f      	bne.n	800289c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800285c:	4b4f      	ldr	r3, [pc, #316]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_OscConfig+0x154>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e265      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002874:	4b49      	ldr	r3, [pc, #292]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	061b      	lsls	r3, r3, #24
 8002882:	4946      	ldr	r1, [pc, #280]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002888:	4b45      	ldr	r3, [pc, #276]	; (80029a0 <HAL_RCC_OscConfig+0x280>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fb93 	bl	8001fb8 <HAL_InitTick>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d043      	beq.n	8002920 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e251      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d023      	beq.n	80028ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a4:	4b3d      	ldr	r3, [pc, #244]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a3c      	ldr	r2, [pc, #240]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80028aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7ff fbce 	bl	8002050 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b8:	f7ff fbca 	bl	8002050 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e23a      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ca:	4b34      	ldr	r3, [pc, #208]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d6:	4b31      	ldr	r3, [pc, #196]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	061b      	lsls	r3, r3, #24
 80028e4:	492d      	ldr	r1, [pc, #180]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
 80028ea:	e01a      	b.n	8002922 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ec:	4b2b      	ldr	r3, [pc, #172]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a2a      	ldr	r2, [pc, #168]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 80028f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7ff fbaa 	bl	8002050 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002900:	f7ff fba6 	bl	8002050 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e216      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002912:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x1e0>
 800291e:	e000      	b.n	8002922 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002920:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d041      	beq.n	80029b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d01c      	beq.n	8002970 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002936:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293c:	4a17      	ldr	r2, [pc, #92]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7ff fb83 	bl	8002050 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294e:	f7ff fb7f 	bl	8002050 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e1ef      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002960:	4b0e      	ldr	r3, [pc, #56]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0ef      	beq.n	800294e <HAL_RCC_OscConfig+0x22e>
 800296e:	e020      	b.n	80029b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002976:	4a09      	ldr	r2, [pc, #36]	; (800299c <HAL_RCC_OscConfig+0x27c>)
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002980:	f7ff fb66 	bl	8002050 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002986:	e00d      	b.n	80029a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002988:	f7ff fb62 	bl	8002050 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d906      	bls.n	80029a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e1d2      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029a4:	4b8c      	ldr	r3, [pc, #560]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 80029a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1ea      	bne.n	8002988 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80a6 	beq.w	8002b0c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c0:	2300      	movs	r3, #0
 80029c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029c4:	4b84      	ldr	r3, [pc, #528]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_OscConfig+0x2b4>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x2b6>
 80029d4:	2300      	movs	r3, #0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00d      	beq.n	80029f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	4b7f      	ldr	r3, [pc, #508]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 80029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029de:	4a7e      	ldr	r2, [pc, #504]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 80029e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e4:	6593      	str	r3, [r2, #88]	; 0x58
 80029e6:	4b7c      	ldr	r3, [pc, #496]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 80029e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029f2:	2301      	movs	r3, #1
 80029f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f6:	4b79      	ldr	r3, [pc, #484]	; (8002bdc <HAL_RCC_OscConfig+0x4bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d118      	bne.n	8002a34 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a02:	4b76      	ldr	r3, [pc, #472]	; (8002bdc <HAL_RCC_OscConfig+0x4bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a75      	ldr	r2, [pc, #468]	; (8002bdc <HAL_RCC_OscConfig+0x4bc>)
 8002a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0e:	f7ff fb1f 	bl	8002050 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a16:	f7ff fb1b 	bl	8002050 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e18b      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a28:	4b6c      	ldr	r3, [pc, #432]	; (8002bdc <HAL_RCC_OscConfig+0x4bc>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d108      	bne.n	8002a4e <HAL_RCC_OscConfig+0x32e>
 8002a3c:	4b66      	ldr	r3, [pc, #408]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	4a65      	ldr	r2, [pc, #404]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a4c:	e024      	b.n	8002a98 <HAL_RCC_OscConfig+0x378>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b05      	cmp	r3, #5
 8002a54:	d110      	bne.n	8002a78 <HAL_RCC_OscConfig+0x358>
 8002a56:	4b60      	ldr	r3, [pc, #384]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5c:	4a5e      	ldr	r2, [pc, #376]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a66:	4b5c      	ldr	r3, [pc, #368]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6c:	4a5a      	ldr	r2, [pc, #360]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a76:	e00f      	b.n	8002a98 <HAL_RCC_OscConfig+0x378>
 8002a78:	4b57      	ldr	r3, [pc, #348]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	4a56      	ldr	r2, [pc, #344]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a88:	4b53      	ldr	r3, [pc, #332]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8e:	4a52      	ldr	r2, [pc, #328]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002a90:	f023 0304 	bic.w	r3, r3, #4
 8002a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d016      	beq.n	8002ace <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7ff fad6 	bl	8002050 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa8:	f7ff fad2 	bl	8002050 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e140      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002abe:	4b46      	ldr	r3, [pc, #280]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0ed      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x388>
 8002acc:	e015      	b.n	8002afa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ace:	f7ff fabf 	bl	8002050 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad6:	f7ff fabb 	bl	8002050 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e129      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aec:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1ed      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002afa:	7ffb      	ldrb	r3, [r7, #31]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d105      	bne.n	8002b0c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b00:	4b35      	ldr	r3, [pc, #212]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	4a34      	ldr	r2, [pc, #208]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d03c      	beq.n	8002b92 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d01c      	beq.n	8002b5a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b20:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b26:	4a2c      	ldr	r2, [pc, #176]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7ff fa8e 	bl	8002050 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b38:	f7ff fa8a 	bl	8002050 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0fa      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b4a:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0ef      	beq.n	8002b38 <HAL_RCC_OscConfig+0x418>
 8002b58:	e01b      	b.n	8002b92 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b5a:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b60:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b62:	f023 0301 	bic.w	r3, r3, #1
 8002b66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6a:	f7ff fa71 	bl	8002050 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b72:	f7ff fa6d 	bl	8002050 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e0dd      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1ef      	bne.n	8002b72 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 80d1 	beq.w	8002d3e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b0c      	cmp	r3, #12
 8002ba6:	f000 808b 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d15e      	bne.n	8002c70 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a08      	ldr	r2, [pc, #32]	; (8002bd8 <HAL_RCC_OscConfig+0x4b8>)
 8002bb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbe:	f7ff fa47 	bl	8002050 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc4:	e00c      	b.n	8002be0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc6:	f7ff fa43 	bl	8002050 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d905      	bls.n	8002be0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e0b3      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be0:	4b59      	ldr	r3, [pc, #356]	; (8002d48 <HAL_RCC_OscConfig+0x628>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1ec      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bec:	4b56      	ldr	r3, [pc, #344]	; (8002d48 <HAL_RCC_OscConfig+0x628>)
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	4b56      	ldr	r3, [pc, #344]	; (8002d4c <HAL_RCC_OscConfig+0x62c>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6a11      	ldr	r1, [r2, #32]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bfc:	3a01      	subs	r2, #1
 8002bfe:	0112      	lsls	r2, r2, #4
 8002c00:	4311      	orrs	r1, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002c06:	0212      	lsls	r2, r2, #8
 8002c08:	4311      	orrs	r1, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c0e:	0852      	lsrs	r2, r2, #1
 8002c10:	3a01      	subs	r2, #1
 8002c12:	0552      	lsls	r2, r2, #21
 8002c14:	4311      	orrs	r1, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c1a:	0852      	lsrs	r2, r2, #1
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	0652      	lsls	r2, r2, #25
 8002c20:	4311      	orrs	r1, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c26:	06d2      	lsls	r2, r2, #27
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	4947      	ldr	r1, [pc, #284]	; (8002d48 <HAL_RCC_OscConfig+0x628>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c30:	4b45      	ldr	r3, [pc, #276]	; (8002d48 <HAL_RCC_OscConfig+0x628>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a44      	ldr	r2, [pc, #272]	; (8002d48 <HAL_RCC_OscConfig+0x628>)
 8002c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c3c:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_RCC_OscConfig+0x628>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4a41      	ldr	r2, [pc, #260]	; (8002d48 <HAL_RCC_OscConfig+0x628>)
 8002c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7ff fa02 	bl	8002050 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c50:	f7ff f9fe 	bl	8002050 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e06e      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c62:	4b39      	ldr	r3, [pc, #228]	; (8002d48 <HAL_RCC_OscConfig+0x628>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x530>
 8002c6e:	e066      	b.n	8002d3e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c70:	4b35      	ldr	r3, [pc, #212]	; (8002d48 <HAL_RCC_OscConfig+0x628>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a34      	ldr	r2, [pc, #208]	; (8002d48 <HAL_RCC_OscConfig+0x628>)
 8002c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c7a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c7c:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <HAL_RCC_OscConfig+0x628>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4a31      	ldr	r2, [pc, #196]	; (8002d48 <HAL_RCC_OscConfig+0x628>)
 8002c82:	f023 0303 	bic.w	r3, r3, #3
 8002c86:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c88:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <HAL_RCC_OscConfig+0x628>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4a2e      	ldr	r2, [pc, #184]	; (8002d48 <HAL_RCC_OscConfig+0x628>)
 8002c8e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7ff f9da 	bl	8002050 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7ff f9d6 	bl	8002050 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e046      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb2:	4b25      	ldr	r3, [pc, #148]	; (8002d48 <HAL_RCC_OscConfig+0x628>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x580>
 8002cbe:	e03e      	b.n	8002d3e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e039      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ccc:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <HAL_RCC_OscConfig+0x628>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f003 0203 	and.w	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d12c      	bne.n	8002d3a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	3b01      	subs	r3, #1
 8002cec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d123      	bne.n	8002d3a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d11b      	bne.n	8002d3a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d113      	bne.n	8002d3a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	085b      	lsrs	r3, r3, #1
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d109      	bne.n	8002d3a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d30:	085b      	lsrs	r3, r3, #1
 8002d32:	3b01      	subs	r3, #1
 8002d34:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d001      	beq.n	8002d3e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3720      	adds	r7, #32
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	019f800c 	.word	0x019f800c

08002d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e11e      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d68:	4b91      	ldr	r3, [pc, #580]	; (8002fb0 <HAL_RCC_ClockConfig+0x260>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d910      	bls.n	8002d98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d76:	4b8e      	ldr	r3, [pc, #568]	; (8002fb0 <HAL_RCC_ClockConfig+0x260>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 020f 	bic.w	r2, r3, #15
 8002d7e:	498c      	ldr	r1, [pc, #560]	; (8002fb0 <HAL_RCC_ClockConfig+0x260>)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d86:	4b8a      	ldr	r3, [pc, #552]	; (8002fb0 <HAL_RCC_ClockConfig+0x260>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e106      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d073      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d129      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dac:	4b81      	ldr	r3, [pc, #516]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0f4      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002dbc:	f000 f99e 	bl	80030fc <RCC_GetSysClockFreqFromPLLSource>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4a7c      	ldr	r2, [pc, #496]	; (8002fb8 <HAL_RCC_ClockConfig+0x268>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d93f      	bls.n	8002e4a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002dca:	4b7a      	ldr	r3, [pc, #488]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d033      	beq.n	8002e4a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d12f      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dea:	4b72      	ldr	r3, [pc, #456]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df2:	4a70      	ldr	r2, [pc, #448]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e024      	b.n	8002e4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e08:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d109      	bne.n	8002e28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0c6      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e18:	4b66      	ldr	r3, [pc, #408]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0be      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e28:	f000 f8ce 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002e2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4a61      	ldr	r2, [pc, #388]	; (8002fb8 <HAL_RCC_ClockConfig+0x268>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d909      	bls.n	8002e4a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e36:	4b5f      	ldr	r3, [pc, #380]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e3e:	4a5d      	ldr	r2, [pc, #372]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e44:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e4a:	4b5a      	ldr	r3, [pc, #360]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f023 0203 	bic.w	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4957      	ldr	r1, [pc, #348]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e5c:	f7ff f8f8 	bl	8002050 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e64:	f7ff f8f4 	bl	8002050 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e095      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	4b4e      	ldr	r3, [pc, #312]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 020c 	and.w	r2, r3, #12
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d1eb      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d023      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea4:	4b43      	ldr	r3, [pc, #268]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a42      	ldr	r2, [pc, #264]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002eaa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d007      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ebc:	4b3d      	ldr	r3, [pc, #244]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ec4:	4a3b      	ldr	r2, [pc, #236]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002ec6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ecc:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4936      	ldr	r1, [pc, #216]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b80      	cmp	r3, #128	; 0x80
 8002ee4:	d105      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002ee6:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	4a32      	ldr	r2, [pc, #200]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002eec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ef0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef2:	4b2f      	ldr	r3, [pc, #188]	; (8002fb0 <HAL_RCC_ClockConfig+0x260>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d21d      	bcs.n	8002f3c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f00:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <HAL_RCC_ClockConfig+0x260>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 020f 	bic.w	r2, r3, #15
 8002f08:	4929      	ldr	r1, [pc, #164]	; (8002fb0 <HAL_RCC_ClockConfig+0x260>)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f10:	f7ff f89e 	bl	8002050 <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f18:	f7ff f89a 	bl	8002050 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e03b      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_RCC_ClockConfig+0x260>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d1ed      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f48:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4917      	ldr	r1, [pc, #92]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d009      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f66:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	490f      	ldr	r1, [pc, #60]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f7a:	f000 f825 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <HAL_RCC_ClockConfig+0x264>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	490c      	ldr	r1, [pc, #48]	; (8002fbc <HAL_RCC_ClockConfig+0x26c>)
 8002f8c:	5ccb      	ldrb	r3, [r1, r3]
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <HAL_RCC_ClockConfig+0x270>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_RCC_ClockConfig+0x274>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff f80a 	bl	8001fb8 <HAL_InitTick>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40022000 	.word	0x40022000
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	04c4b400 	.word	0x04c4b400
 8002fbc:	08006438 	.word	0x08006438
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	20000004 	.word	0x20000004

08002fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002fce:	4b2c      	ldr	r3, [pc, #176]	; (8003080 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d102      	bne.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fda:	4b2a      	ldr	r3, [pc, #168]	; (8003084 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	e047      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fe0:	4b27      	ldr	r3, [pc, #156]	; (8003080 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d102      	bne.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fec:	4b26      	ldr	r3, [pc, #152]	; (8003088 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	e03e      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002ff2:	4b23      	ldr	r3, [pc, #140]	; (8003080 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	d136      	bne.n	800306c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_RCC_GetSysClockFreq+0xb8>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	3301      	adds	r3, #1
 8003014:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d10c      	bne.n	8003036 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800301c:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <HAL_RCC_GetSysClockFreq+0xc0>)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	fbb2 f3f3 	udiv	r3, r2, r3
 8003024:	4a16      	ldr	r2, [pc, #88]	; (8003080 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003026:	68d2      	ldr	r2, [r2, #12]
 8003028:	0a12      	lsrs	r2, r2, #8
 800302a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	617b      	str	r3, [r7, #20]
      break;
 8003034:	e00c      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003036:	4a13      	ldr	r2, [pc, #76]	; (8003084 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	4a10      	ldr	r2, [pc, #64]	; (8003080 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003040:	68d2      	ldr	r2, [r2, #12]
 8003042:	0a12      	lsrs	r2, r2, #8
 8003044:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003048:	fb02 f303 	mul.w	r3, r2, r3
 800304c:	617b      	str	r3, [r7, #20]
      break;
 800304e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	0e5b      	lsrs	r3, r3, #25
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	3301      	adds	r3, #1
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	e001      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003070:	693b      	ldr	r3, [r7, #16]
}
 8003072:	4618      	mov	r0, r3
 8003074:	371c      	adds	r7, #28
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000
 8003084:	00f42400 	.word	0x00f42400
 8003088:	007a1200 	.word	0x007a1200

0800308c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003090:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000000 	.word	0x20000000

080030a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030a8:	f7ff fff0 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	4904      	ldr	r1, [pc, #16]	; (80030cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000
 80030cc:	08006448 	.word	0x08006448

080030d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030d4:	f7ff ffda 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	0adb      	lsrs	r3, r3, #11
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	4904      	ldr	r1, [pc, #16]	; (80030f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030e6:	5ccb      	ldrb	r3, [r1, r3]
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000
 80030f8:	08006448 	.word	0x08006448

080030fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003102:	4b1e      	ldr	r3, [pc, #120]	; (800317c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800310c:	4b1b      	ldr	r3, [pc, #108]	; (800317c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	3301      	adds	r3, #1
 8003118:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d10c      	bne.n	800313a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003120:	4a17      	ldr	r2, [pc, #92]	; (8003180 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	fbb2 f3f3 	udiv	r3, r2, r3
 8003128:	4a14      	ldr	r2, [pc, #80]	; (800317c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800312a:	68d2      	ldr	r2, [r2, #12]
 800312c:	0a12      	lsrs	r2, r2, #8
 800312e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	617b      	str	r3, [r7, #20]
    break;
 8003138:	e00c      	b.n	8003154 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800313a:	4a12      	ldr	r2, [pc, #72]	; (8003184 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003142:	4a0e      	ldr	r2, [pc, #56]	; (800317c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003144:	68d2      	ldr	r2, [r2, #12]
 8003146:	0a12      	lsrs	r2, r2, #8
 8003148:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800314c:	fb02 f303 	mul.w	r3, r2, r3
 8003150:	617b      	str	r3, [r7, #20]
    break;
 8003152:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003154:	4b09      	ldr	r3, [pc, #36]	; (800317c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0e5b      	lsrs	r3, r3, #25
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	3301      	adds	r3, #1
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800316e:	687b      	ldr	r3, [r7, #4]
}
 8003170:	4618      	mov	r0, r3
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	40021000 	.word	0x40021000
 8003180:	007a1200 	.word	0x007a1200
 8003184:	00f42400 	.word	0x00f42400

08003188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003190:	2300      	movs	r3, #0
 8003192:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003194:	2300      	movs	r3, #0
 8003196:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8098 	beq.w	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a6:	2300      	movs	r3, #0
 80031a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031aa:	4b43      	ldr	r3, [pc, #268]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10d      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b6:	4b40      	ldr	r3, [pc, #256]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	4a3f      	ldr	r2, [pc, #252]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c0:	6593      	str	r3, [r2, #88]	; 0x58
 80031c2:	4b3d      	ldr	r3, [pc, #244]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ce:	2301      	movs	r3, #1
 80031d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031d2:	4b3a      	ldr	r3, [pc, #232]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a39      	ldr	r2, [pc, #228]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80031d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031de:	f7fe ff37 	bl	8002050 <HAL_GetTick>
 80031e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031e4:	e009      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e6:	f7fe ff33 	bl	8002050 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d902      	bls.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	74fb      	strb	r3, [r7, #19]
        break;
 80031f8:	e005      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031fa:	4b30      	ldr	r3, [pc, #192]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0ef      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003206:	7cfb      	ldrb	r3, [r7, #19]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d159      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800320c:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003216:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d01e      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	429a      	cmp	r2, r3
 8003226:	d019      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003228:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003232:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003234:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323a:	4a1f      	ldr	r2, [pc, #124]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003244:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324a:	4a1b      	ldr	r2, [pc, #108]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800324c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003254:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d016      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7fe fef3 	bl	8002050 <HAL_GetTick>
 800326a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800326c:	e00b      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fe feef 	bl	8002050 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	; 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d902      	bls.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	74fb      	strb	r3, [r7, #19]
            break;
 8003284:	e006      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0ec      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10b      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800329a:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800329c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	4903      	ldr	r1, [pc, #12]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032b0:	e008      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032b2:	7cfb      	ldrb	r3, [r7, #19]
 80032b4:	74bb      	strb	r3, [r7, #18]
 80032b6:	e005      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c0:	7cfb      	ldrb	r3, [r7, #19]
 80032c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032c4:	7c7b      	ldrb	r3, [r7, #17]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d105      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ca:	4ba6      	ldr	r3, [pc, #664]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	4aa5      	ldr	r2, [pc, #660]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032e2:	4ba0      	ldr	r3, [pc, #640]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e8:	f023 0203 	bic.w	r2, r3, #3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	499c      	ldr	r1, [pc, #624]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003304:	4b97      	ldr	r3, [pc, #604]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330a:	f023 020c 	bic.w	r2, r3, #12
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	4994      	ldr	r1, [pc, #592]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003326:	4b8f      	ldr	r3, [pc, #572]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	498b      	ldr	r1, [pc, #556]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003348:	4b86      	ldr	r3, [pc, #536]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	4983      	ldr	r1, [pc, #524]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800336a:	4b7e      	ldr	r3, [pc, #504]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003370:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	497a      	ldr	r1, [pc, #488]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800338c:	4b75      	ldr	r3, [pc, #468]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003392:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	4972      	ldr	r1, [pc, #456]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033ae:	4b6d      	ldr	r3, [pc, #436]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	4969      	ldr	r1, [pc, #420]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033d0:	4b64      	ldr	r3, [pc, #400]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	4961      	ldr	r1, [pc, #388]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033f2:	4b5c      	ldr	r3, [pc, #368]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	4958      	ldr	r1, [pc, #352]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d015      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003414:	4b53      	ldr	r3, [pc, #332]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	4950      	ldr	r1, [pc, #320]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003432:	d105      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003434:	4b4b      	ldr	r3, [pc, #300]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4a4a      	ldr	r2, [pc, #296]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800343e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003448:	2b00      	cmp	r3, #0
 800344a:	d015      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800344c:	4b45      	ldr	r3, [pc, #276]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	4942      	ldr	r1, [pc, #264]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346a:	d105      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800346c:	4b3d      	ldr	r3, [pc, #244]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4a3c      	ldr	r2, [pc, #240]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003476:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d015      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003484:	4b37      	ldr	r3, [pc, #220]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	4934      	ldr	r1, [pc, #208]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a2:	d105      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a4:	4b2f      	ldr	r3, [pc, #188]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4a2e      	ldr	r2, [pc, #184]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d015      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034bc:	4b29      	ldr	r3, [pc, #164]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ca:	4926      	ldr	r1, [pc, #152]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034da:	d105      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034dc:	4b21      	ldr	r3, [pc, #132]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4a20      	ldr	r2, [pc, #128]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d015      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034f4:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	4918      	ldr	r1, [pc, #96]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003512:	d105      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003514:	4b13      	ldr	r3, [pc, #76]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4a12      	ldr	r2, [pc, #72]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800351a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800351e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d015      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800352c:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353a:	490a      	ldr	r1, [pc, #40]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800354a:	d105      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4a04      	ldr	r2, [pc, #16]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003556:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003558:	7cbb      	ldrb	r3, [r7, #18]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000

08003568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e042      	b.n	8003600 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003580:	2b00      	cmp	r3, #0
 8003582:	d106      	bne.n	8003592 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7fd faed 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2224      	movs	r2, #36	; 0x24
 8003596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f996 	bl	80038dc <UART_SetConfig>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e022      	b.n	8003600 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fc56 	bl	8003e74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fcdd 	bl	8003fb8 <UART_CheckIdleState>
 80035fe:	4603      	mov	r3, r0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08a      	sub	sp, #40	; 0x28
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800361e:	2b20      	cmp	r3, #32
 8003620:	f040 8083 	bne.w	800372a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_UART_Transmit+0x28>
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e07b      	b.n	800372c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_UART_Transmit+0x3a>
 800363e:	2302      	movs	r3, #2
 8003640:	e074      	b.n	800372c <HAL_UART_Transmit+0x124>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2221      	movs	r2, #33	; 0x21
 8003656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800365a:	f7fe fcf9 	bl	8002050 <HAL_GetTick>
 800365e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	88fa      	ldrh	r2, [r7, #6]
 800366c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003678:	d108      	bne.n	800368c <HAL_UART_Transmit+0x84>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d104      	bne.n	800368c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	e003      	b.n	8003694 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003690:	2300      	movs	r3, #0
 8003692:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800369c:	e02c      	b.n	80036f8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2200      	movs	r2, #0
 80036a6:	2180      	movs	r1, #128	; 0x80
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 fcd0 	bl	800404e <UART_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e039      	b.n	800372c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10b      	bne.n	80036d6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	3302      	adds	r3, #2
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	e007      	b.n	80036e6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	781a      	ldrb	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	3301      	adds	r3, #1
 80036e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1cc      	bne.n	800369e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2200      	movs	r2, #0
 800370c:	2140      	movs	r1, #64	; 0x40
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fc9d 	bl	800404e <UART_WaitOnFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e006      	b.n	800372c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	e000      	b.n	800372c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800372a:	2302      	movs	r3, #2
  }
}
 800372c:	4618      	mov	r0, r3
 800372e:	3720      	adds	r7, #32
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	; 0x28
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	2b20      	cmp	r3, #32
 800374c:	f040 80c0 	bne.w	80038d0 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_UART_Receive+0x28>
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0b8      	b.n	80038d2 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_UART_Receive+0x3a>
 800376a:	2302      	movs	r3, #2
 800376c:	e0b1      	b.n	80038d2 <HAL_UART_Receive+0x19e>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2222      	movs	r2, #34	; 0x22
 8003782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800378c:	f7fe fc60 	bl	8002050 <HAL_GetTick>
 8003790:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	88fa      	ldrh	r2, [r7, #6]
 8003796:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	88fa      	ldrh	r2, [r7, #6]
 800379e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037aa:	d10e      	bne.n	80037ca <HAL_UART_Receive+0x96>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <HAL_UART_Receive+0x8c>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80037ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037be:	e02d      	b.n	800381c <HAL_UART_Receive+0xe8>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	22ff      	movs	r2, #255	; 0xff
 80037c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037c8:	e028      	b.n	800381c <HAL_UART_Receive+0xe8>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10d      	bne.n	80037ee <HAL_UART_Receive+0xba>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d104      	bne.n	80037e4 <HAL_UART_Receive+0xb0>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037e2:	e01b      	b.n	800381c <HAL_UART_Receive+0xe8>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	227f      	movs	r2, #127	; 0x7f
 80037e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037ec:	e016      	b.n	800381c <HAL_UART_Receive+0xe8>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037f6:	d10d      	bne.n	8003814 <HAL_UART_Receive+0xe0>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <HAL_UART_Receive+0xd6>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	227f      	movs	r2, #127	; 0x7f
 8003804:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003808:	e008      	b.n	800381c <HAL_UART_Receive+0xe8>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	223f      	movs	r2, #63	; 0x3f
 800380e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003812:	e003      	b.n	800381c <HAL_UART_Receive+0xe8>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003822:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382c:	d108      	bne.n	8003840 <HAL_UART_Receive+0x10c>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d104      	bne.n	8003840 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	e003      	b.n	8003848 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003850:	e032      	b.n	80038b8 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2200      	movs	r2, #0
 800385a:	2120      	movs	r1, #32
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fbf6 	bl	800404e <UART_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e032      	b.n	80038d2 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10c      	bne.n	800388c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	b29a      	uxth	r2, r3
 800387a:	8a7b      	ldrh	r3, [r7, #18]
 800387c:	4013      	ands	r3, r2
 800387e:	b29a      	uxth	r2, r3
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	3302      	adds	r3, #2
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	e00c      	b.n	80038a6 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	b2da      	uxtb	r2, r3
 8003894:	8a7b      	ldrh	r3, [r7, #18]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	4013      	ands	r3, r2
 800389a:	b2da      	uxtb	r2, r3
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	3301      	adds	r3, #1
 80038a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1c6      	bne.n	8003852 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e0:	b08c      	sub	sp, #48	; 0x30
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	431a      	orrs	r2, r3
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	4313      	orrs	r3, r2
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4bab      	ldr	r3, [pc, #684]	; (8003bb8 <UART_SetConfig+0x2dc>)
 800390c:	4013      	ands	r3, r2
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003914:	430b      	orrs	r3, r1
 8003916:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4aa0      	ldr	r2, [pc, #640]	; (8003bbc <UART_SetConfig+0x2e0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d004      	beq.n	8003948 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003944:	4313      	orrs	r3, r2
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003952:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800395c:	430b      	orrs	r3, r1
 800395e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	f023 010f 	bic.w	r1, r3, #15
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a91      	ldr	r2, [pc, #580]	; (8003bc0 <UART_SetConfig+0x2e4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d125      	bne.n	80039cc <UART_SetConfig+0xf0>
 8003980:	4b90      	ldr	r3, [pc, #576]	; (8003bc4 <UART_SetConfig+0x2e8>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b03      	cmp	r3, #3
 800398c:	d81a      	bhi.n	80039c4 <UART_SetConfig+0xe8>
 800398e:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <UART_SetConfig+0xb8>)
 8003990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003994:	080039a5 	.word	0x080039a5
 8003998:	080039b5 	.word	0x080039b5
 800399c:	080039ad 	.word	0x080039ad
 80039a0:	080039bd 	.word	0x080039bd
 80039a4:	2301      	movs	r3, #1
 80039a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039aa:	e0d6      	b.n	8003b5a <UART_SetConfig+0x27e>
 80039ac:	2302      	movs	r3, #2
 80039ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b2:	e0d2      	b.n	8003b5a <UART_SetConfig+0x27e>
 80039b4:	2304      	movs	r3, #4
 80039b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ba:	e0ce      	b.n	8003b5a <UART_SetConfig+0x27e>
 80039bc:	2308      	movs	r3, #8
 80039be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c2:	e0ca      	b.n	8003b5a <UART_SetConfig+0x27e>
 80039c4:	2310      	movs	r3, #16
 80039c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ca:	e0c6      	b.n	8003b5a <UART_SetConfig+0x27e>
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a7d      	ldr	r2, [pc, #500]	; (8003bc8 <UART_SetConfig+0x2ec>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d138      	bne.n	8003a48 <UART_SetConfig+0x16c>
 80039d6:	4b7b      	ldr	r3, [pc, #492]	; (8003bc4 <UART_SetConfig+0x2e8>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	f003 030c 	and.w	r3, r3, #12
 80039e0:	2b0c      	cmp	r3, #12
 80039e2:	d82d      	bhi.n	8003a40 <UART_SetConfig+0x164>
 80039e4:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <UART_SetConfig+0x110>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003a21 	.word	0x08003a21
 80039f0:	08003a41 	.word	0x08003a41
 80039f4:	08003a41 	.word	0x08003a41
 80039f8:	08003a41 	.word	0x08003a41
 80039fc:	08003a31 	.word	0x08003a31
 8003a00:	08003a41 	.word	0x08003a41
 8003a04:	08003a41 	.word	0x08003a41
 8003a08:	08003a41 	.word	0x08003a41
 8003a0c:	08003a29 	.word	0x08003a29
 8003a10:	08003a41 	.word	0x08003a41
 8003a14:	08003a41 	.word	0x08003a41
 8003a18:	08003a41 	.word	0x08003a41
 8003a1c:	08003a39 	.word	0x08003a39
 8003a20:	2300      	movs	r3, #0
 8003a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a26:	e098      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a2e:	e094      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003a30:	2304      	movs	r3, #4
 8003a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a36:	e090      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003a38:	2308      	movs	r3, #8
 8003a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a3e:	e08c      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003a40:	2310      	movs	r3, #16
 8003a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a46:	e088      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a5f      	ldr	r2, [pc, #380]	; (8003bcc <UART_SetConfig+0x2f0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d125      	bne.n	8003a9e <UART_SetConfig+0x1c2>
 8003a52:	4b5c      	ldr	r3, [pc, #368]	; (8003bc4 <UART_SetConfig+0x2e8>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a5c:	2b30      	cmp	r3, #48	; 0x30
 8003a5e:	d016      	beq.n	8003a8e <UART_SetConfig+0x1b2>
 8003a60:	2b30      	cmp	r3, #48	; 0x30
 8003a62:	d818      	bhi.n	8003a96 <UART_SetConfig+0x1ba>
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d00a      	beq.n	8003a7e <UART_SetConfig+0x1a2>
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d814      	bhi.n	8003a96 <UART_SetConfig+0x1ba>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <UART_SetConfig+0x19a>
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	d008      	beq.n	8003a86 <UART_SetConfig+0x1aa>
 8003a74:	e00f      	b.n	8003a96 <UART_SetConfig+0x1ba>
 8003a76:	2300      	movs	r3, #0
 8003a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a7c:	e06d      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a84:	e069      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003a86:	2304      	movs	r3, #4
 8003a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a8c:	e065      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003a8e:	2308      	movs	r3, #8
 8003a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a94:	e061      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003a96:	2310      	movs	r3, #16
 8003a98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a9c:	e05d      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a4b      	ldr	r2, [pc, #300]	; (8003bd0 <UART_SetConfig+0x2f4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d125      	bne.n	8003af4 <UART_SetConfig+0x218>
 8003aa8:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <UART_SetConfig+0x2e8>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ab2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ab4:	d016      	beq.n	8003ae4 <UART_SetConfig+0x208>
 8003ab6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ab8:	d818      	bhi.n	8003aec <UART_SetConfig+0x210>
 8003aba:	2b80      	cmp	r3, #128	; 0x80
 8003abc:	d00a      	beq.n	8003ad4 <UART_SetConfig+0x1f8>
 8003abe:	2b80      	cmp	r3, #128	; 0x80
 8003ac0:	d814      	bhi.n	8003aec <UART_SetConfig+0x210>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <UART_SetConfig+0x1f0>
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d008      	beq.n	8003adc <UART_SetConfig+0x200>
 8003aca:	e00f      	b.n	8003aec <UART_SetConfig+0x210>
 8003acc:	2300      	movs	r3, #0
 8003ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ad2:	e042      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ada:	e03e      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003adc:	2304      	movs	r3, #4
 8003ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ae2:	e03a      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aea:	e036      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003aec:	2310      	movs	r3, #16
 8003aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003af2:	e032      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a30      	ldr	r2, [pc, #192]	; (8003bbc <UART_SetConfig+0x2e0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d12a      	bne.n	8003b54 <UART_SetConfig+0x278>
 8003afe:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <UART_SetConfig+0x2e8>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b0c:	d01a      	beq.n	8003b44 <UART_SetConfig+0x268>
 8003b0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b12:	d81b      	bhi.n	8003b4c <UART_SetConfig+0x270>
 8003b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b18:	d00c      	beq.n	8003b34 <UART_SetConfig+0x258>
 8003b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1e:	d815      	bhi.n	8003b4c <UART_SetConfig+0x270>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <UART_SetConfig+0x250>
 8003b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b28:	d008      	beq.n	8003b3c <UART_SetConfig+0x260>
 8003b2a:	e00f      	b.n	8003b4c <UART_SetConfig+0x270>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b32:	e012      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003b34:	2302      	movs	r3, #2
 8003b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b3a:	e00e      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b42:	e00a      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003b44:	2308      	movs	r3, #8
 8003b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b4a:	e006      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003b4c:	2310      	movs	r3, #16
 8003b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b52:	e002      	b.n	8003b5a <UART_SetConfig+0x27e>
 8003b54:	2310      	movs	r3, #16
 8003b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <UART_SetConfig+0x2e0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	f040 80a8 	bne.w	8003cb6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d834      	bhi.n	8003bd8 <UART_SetConfig+0x2fc>
 8003b6e:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <UART_SetConfig+0x298>)
 8003b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b74:	08003b99 	.word	0x08003b99
 8003b78:	08003bd9 	.word	0x08003bd9
 8003b7c:	08003ba1 	.word	0x08003ba1
 8003b80:	08003bd9 	.word	0x08003bd9
 8003b84:	08003ba7 	.word	0x08003ba7
 8003b88:	08003bd9 	.word	0x08003bd9
 8003b8c:	08003bd9 	.word	0x08003bd9
 8003b90:	08003bd9 	.word	0x08003bd9
 8003b94:	08003baf 	.word	0x08003baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b98:	f7ff fa84 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8003b9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b9e:	e021      	b.n	8003be4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <UART_SetConfig+0x2f8>)
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ba4:	e01e      	b.n	8003be4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ba6:	f7ff fa0f 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8003baa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bac:	e01a      	b.n	8003be4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bb4:	e016      	b.n	8003be4 <UART_SetConfig+0x308>
 8003bb6:	bf00      	nop
 8003bb8:	cfff69f3 	.word	0xcfff69f3
 8003bbc:	40008000 	.word	0x40008000
 8003bc0:	40013800 	.word	0x40013800
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40004400 	.word	0x40004400
 8003bcc:	40004800 	.word	0x40004800
 8003bd0:	40004c00 	.word	0x40004c00
 8003bd4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003be2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 812a 	beq.w	8003e40 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	4a9e      	ldr	r2, [pc, #632]	; (8003e6c <UART_SetConfig+0x590>)
 8003bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4413      	add	r3, r2
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d305      	bcc.n	8003c1c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d903      	bls.n	8003c24 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c22:	e10d      	b.n	8003e40 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	2200      	movs	r2, #0
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	60fa      	str	r2, [r7, #12]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	4a8e      	ldr	r2, [pc, #568]	; (8003e6c <UART_SetConfig+0x590>)
 8003c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2200      	movs	r2, #0
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c46:	f7fc fb43 	bl	80002d0 <__aeabi_uldivmod>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	020b      	lsls	r3, r1, #8
 8003c5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c60:	0202      	lsls	r2, r0, #8
 8003c62:	6979      	ldr	r1, [r7, #20]
 8003c64:	6849      	ldr	r1, [r1, #4]
 8003c66:	0849      	lsrs	r1, r1, #1
 8003c68:	2000      	movs	r0, #0
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	4605      	mov	r5, r0
 8003c6e:	eb12 0804 	adds.w	r8, r2, r4
 8003c72:	eb43 0905 	adc.w	r9, r3, r5
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	469a      	mov	sl, r3
 8003c7e:	4693      	mov	fp, r2
 8003c80:	4652      	mov	r2, sl
 8003c82:	465b      	mov	r3, fp
 8003c84:	4640      	mov	r0, r8
 8003c86:	4649      	mov	r1, r9
 8003c88:	f7fc fb22 	bl	80002d0 <__aeabi_uldivmod>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4613      	mov	r3, r2
 8003c92:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c9a:	d308      	bcc.n	8003cae <UART_SetConfig+0x3d2>
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ca2:	d204      	bcs.n	8003cae <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6a3a      	ldr	r2, [r7, #32]
 8003caa:	60da      	str	r2, [r3, #12]
 8003cac:	e0c8      	b.n	8003e40 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003cb4:	e0c4      	b.n	8003e40 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cbe:	d167      	bne.n	8003d90 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003cc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d828      	bhi.n	8003d1a <UART_SetConfig+0x43e>
 8003cc8:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <UART_SetConfig+0x3f4>)
 8003cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cce:	bf00      	nop
 8003cd0:	08003cf5 	.word	0x08003cf5
 8003cd4:	08003cfd 	.word	0x08003cfd
 8003cd8:	08003d05 	.word	0x08003d05
 8003cdc:	08003d1b 	.word	0x08003d1b
 8003ce0:	08003d0b 	.word	0x08003d0b
 8003ce4:	08003d1b 	.word	0x08003d1b
 8003ce8:	08003d1b 	.word	0x08003d1b
 8003cec:	08003d1b 	.word	0x08003d1b
 8003cf0:	08003d13 	.word	0x08003d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf4:	f7ff f9d6 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8003cf8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cfa:	e014      	b.n	8003d26 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cfc:	f7ff f9e8 	bl	80030d0 <HAL_RCC_GetPCLK2Freq>
 8003d00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d02:	e010      	b.n	8003d26 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d04:	4b5a      	ldr	r3, [pc, #360]	; (8003e70 <UART_SetConfig+0x594>)
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d08:	e00d      	b.n	8003d26 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0a:	f7ff f95d 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8003d0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d10:	e009      	b.n	8003d26 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d18:	e005      	b.n	8003d26 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 8089 	beq.w	8003e40 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	4a4e      	ldr	r2, [pc, #312]	; (8003e6c <UART_SetConfig+0x590>)
 8003d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d40:	005a      	lsls	r2, r3, #1
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	441a      	add	r2, r3
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	2b0f      	cmp	r3, #15
 8003d58:	d916      	bls.n	8003d88 <UART_SetConfig+0x4ac>
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d60:	d212      	bcs.n	8003d88 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f023 030f 	bic.w	r3, r3, #15
 8003d6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	8bfb      	ldrh	r3, [r7, #30]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	8bfa      	ldrh	r2, [r7, #30]
 8003d84:	60da      	str	r2, [r3, #12]
 8003d86:	e05b      	b.n	8003e40 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d8e:	e057      	b.n	8003e40 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d828      	bhi.n	8003dea <UART_SetConfig+0x50e>
 8003d98:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <UART_SetConfig+0x4c4>)
 8003d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9e:	bf00      	nop
 8003da0:	08003dc5 	.word	0x08003dc5
 8003da4:	08003dcd 	.word	0x08003dcd
 8003da8:	08003dd5 	.word	0x08003dd5
 8003dac:	08003deb 	.word	0x08003deb
 8003db0:	08003ddb 	.word	0x08003ddb
 8003db4:	08003deb 	.word	0x08003deb
 8003db8:	08003deb 	.word	0x08003deb
 8003dbc:	08003deb 	.word	0x08003deb
 8003dc0:	08003de3 	.word	0x08003de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc4:	f7ff f96e 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8003dc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dca:	e014      	b.n	8003df6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dcc:	f7ff f980 	bl	80030d0 <HAL_RCC_GetPCLK2Freq>
 8003dd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dd2:	e010      	b.n	8003df6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd4:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <UART_SetConfig+0x594>)
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dd8:	e00d      	b.n	8003df6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dda:	f7ff f8f5 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8003dde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003de0:	e009      	b.n	8003df6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003de8:	e005      	b.n	8003df6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003df4:	bf00      	nop
    }

    if (pclk != 0U)
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d021      	beq.n	8003e40 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	4a1a      	ldr	r2, [pc, #104]	; (8003e6c <UART_SetConfig+0x590>)
 8003e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e06:	461a      	mov	r2, r3
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	441a      	add	r2, r3
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	2b0f      	cmp	r3, #15
 8003e24:	d909      	bls.n	8003e3a <UART_SetConfig+0x55e>
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2c:	d205      	bcs.n	8003e3a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60da      	str	r2, [r3, #12]
 8003e38:	e002      	b.n	8003e40 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2200      	movs	r2, #0
 8003e54:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003e5c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3730      	adds	r7, #48	; 0x30
 8003e64:	46bd      	mov	sp, r7
 8003e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e6a:	bf00      	nop
 8003e6c:	08006460 	.word	0x08006460
 8003e70:	00f42400 	.word	0x00f42400

08003e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01a      	beq.n	8003f8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f72:	d10a      	bne.n	8003f8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
  }
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fc8:	f7fe f842 	bl	8002050 <HAL_GetTick>
 8003fcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d10e      	bne.n	8003ffa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f82f 	bl	800404e <UART_WaitOnFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e025      	b.n	8004046 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b04      	cmp	r3, #4
 8004006:	d10e      	bne.n	8004026 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f819 	bl	800404e <UART_WaitOnFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e00f      	b.n	8004046 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b09c      	sub	sp, #112	; 0x70
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	4613      	mov	r3, r2
 800405c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405e:	e0a9      	b.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004060:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004066:	f000 80a5 	beq.w	80041b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800406a:	f7fd fff1 	bl	8002050 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004076:	429a      	cmp	r2, r3
 8004078:	d302      	bcc.n	8004080 <UART_WaitOnFlagUntilTimeout+0x32>
 800407a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800407c:	2b00      	cmp	r3, #0
 800407e:	d140      	bne.n	8004102 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800408e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004090:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004094:	667b      	str	r3, [r7, #100]	; 0x64
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800409e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040a6:	e841 2300 	strex	r3, r2, [r1]
 80040aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80040ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1e6      	bne.n	8004080 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3308      	adds	r3, #8
 80040b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040bc:	e853 3f00 	ldrex	r3, [r3]
 80040c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c4:	f023 0301 	bic.w	r3, r3, #1
 80040c8:	663b      	str	r3, [r7, #96]	; 0x60
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3308      	adds	r3, #8
 80040d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80040d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e5      	bne.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e069      	b.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d051      	beq.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800411e:	d149      	bne.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004128:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800413e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004148:	637b      	str	r3, [r7, #52]	; 0x34
 800414a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800414e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e6      	bne.n	800412a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3308      	adds	r3, #8
 8004162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	613b      	str	r3, [r7, #16]
   return(result);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	66bb      	str	r3, [r7, #104]	; 0x68
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3308      	adds	r3, #8
 800417a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800417c:	623a      	str	r2, [r7, #32]
 800417e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	69f9      	ldr	r1, [r7, #28]
 8004182:	6a3a      	ldr	r2, [r7, #32]
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	61bb      	str	r3, [r7, #24]
   return(result);
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e010      	b.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4013      	ands	r3, r2
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	f43f af46 	beq.w	8004060 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3770      	adds	r7, #112	; 0x70
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e027      	b.n	8004244 <HAL_UARTEx_DisableFifoMode+0x66>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2224      	movs	r2, #36	; 0x24
 8004200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004222:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004264:	2302      	movs	r3, #2
 8004266:	e02d      	b.n	80042c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2224      	movs	r2, #36	; 0x24
 8004274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0201 	bic.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f84f 	bl	8004348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e02d      	b.n	8004340 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2224      	movs	r2, #36	; 0x24
 80042f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0201 	bic.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f811 	bl	8004348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004354:	2b00      	cmp	r3, #0
 8004356:	d108      	bne.n	800436a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004368:	e031      	b.n	80043ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800436a:	2308      	movs	r3, #8
 800436c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800436e:	2308      	movs	r3, #8
 8004370:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	0e5b      	lsrs	r3, r3, #25
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	0f5b      	lsrs	r3, r3, #29
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004392:	7bbb      	ldrb	r3, [r7, #14]
 8004394:	7b3a      	ldrb	r2, [r7, #12]
 8004396:	4911      	ldr	r1, [pc, #68]	; (80043dc <UARTEx_SetNbDataToProcess+0x94>)
 8004398:	5c8a      	ldrb	r2, [r1, r2]
 800439a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800439e:	7b3a      	ldrb	r2, [r7, #12]
 80043a0:	490f      	ldr	r1, [pc, #60]	; (80043e0 <UARTEx_SetNbDataToProcess+0x98>)
 80043a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	7b7a      	ldrb	r2, [r7, #13]
 80043b4:	4909      	ldr	r1, [pc, #36]	; (80043dc <UARTEx_SetNbDataToProcess+0x94>)
 80043b6:	5c8a      	ldrb	r2, [r1, r2]
 80043b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80043bc:	7b7a      	ldrb	r2, [r7, #13]
 80043be:	4908      	ldr	r1, [pc, #32]	; (80043e0 <UARTEx_SetNbDataToProcess+0x98>)
 80043c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80043ce:	bf00      	nop
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	08006478 	.word	0x08006478
 80043e0:	08006480 	.word	0x08006480

080043e4 <__errno>:
 80043e4:	4b01      	ldr	r3, [pc, #4]	; (80043ec <__errno+0x8>)
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	2000000c 	.word	0x2000000c

080043f0 <__libc_init_array>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	4d0d      	ldr	r5, [pc, #52]	; (8004428 <__libc_init_array+0x38>)
 80043f4:	4c0d      	ldr	r4, [pc, #52]	; (800442c <__libc_init_array+0x3c>)
 80043f6:	1b64      	subs	r4, r4, r5
 80043f8:	10a4      	asrs	r4, r4, #2
 80043fa:	2600      	movs	r6, #0
 80043fc:	42a6      	cmp	r6, r4
 80043fe:	d109      	bne.n	8004414 <__libc_init_array+0x24>
 8004400:	4d0b      	ldr	r5, [pc, #44]	; (8004430 <__libc_init_array+0x40>)
 8004402:	4c0c      	ldr	r4, [pc, #48]	; (8004434 <__libc_init_array+0x44>)
 8004404:	f000 fcc2 	bl	8004d8c <_init>
 8004408:	1b64      	subs	r4, r4, r5
 800440a:	10a4      	asrs	r4, r4, #2
 800440c:	2600      	movs	r6, #0
 800440e:	42a6      	cmp	r6, r4
 8004410:	d105      	bne.n	800441e <__libc_init_array+0x2e>
 8004412:	bd70      	pop	{r4, r5, r6, pc}
 8004414:	f855 3b04 	ldr.w	r3, [r5], #4
 8004418:	4798      	blx	r3
 800441a:	3601      	adds	r6, #1
 800441c:	e7ee      	b.n	80043fc <__libc_init_array+0xc>
 800441e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004422:	4798      	blx	r3
 8004424:	3601      	adds	r6, #1
 8004426:	e7f2      	b.n	800440e <__libc_init_array+0x1e>
 8004428:	080065c4 	.word	0x080065c4
 800442c:	080065c4 	.word	0x080065c4
 8004430:	080065c4 	.word	0x080065c4
 8004434:	080065c8 	.word	0x080065c8

08004438 <memcpy>:
 8004438:	440a      	add	r2, r1
 800443a:	4291      	cmp	r1, r2
 800443c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004440:	d100      	bne.n	8004444 <memcpy+0xc>
 8004442:	4770      	bx	lr
 8004444:	b510      	push	{r4, lr}
 8004446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800444a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800444e:	4291      	cmp	r1, r2
 8004450:	d1f9      	bne.n	8004446 <memcpy+0xe>
 8004452:	bd10      	pop	{r4, pc}

08004454 <memset>:
 8004454:	4402      	add	r2, r0
 8004456:	4603      	mov	r3, r0
 8004458:	4293      	cmp	r3, r2
 800445a:	d100      	bne.n	800445e <memset+0xa>
 800445c:	4770      	bx	lr
 800445e:	f803 1b01 	strb.w	r1, [r3], #1
 8004462:	e7f9      	b.n	8004458 <memset+0x4>

08004464 <sniprintf>:
 8004464:	b40c      	push	{r2, r3}
 8004466:	b530      	push	{r4, r5, lr}
 8004468:	4b17      	ldr	r3, [pc, #92]	; (80044c8 <sniprintf+0x64>)
 800446a:	1e0c      	subs	r4, r1, #0
 800446c:	681d      	ldr	r5, [r3, #0]
 800446e:	b09d      	sub	sp, #116	; 0x74
 8004470:	da08      	bge.n	8004484 <sniprintf+0x20>
 8004472:	238b      	movs	r3, #139	; 0x8b
 8004474:	602b      	str	r3, [r5, #0]
 8004476:	f04f 30ff 	mov.w	r0, #4294967295
 800447a:	b01d      	add	sp, #116	; 0x74
 800447c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004480:	b002      	add	sp, #8
 8004482:	4770      	bx	lr
 8004484:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004488:	f8ad 3014 	strh.w	r3, [sp, #20]
 800448c:	bf14      	ite	ne
 800448e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004492:	4623      	moveq	r3, r4
 8004494:	9304      	str	r3, [sp, #16]
 8004496:	9307      	str	r3, [sp, #28]
 8004498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800449c:	9002      	str	r0, [sp, #8]
 800449e:	9006      	str	r0, [sp, #24]
 80044a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80044a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80044a6:	ab21      	add	r3, sp, #132	; 0x84
 80044a8:	a902      	add	r1, sp, #8
 80044aa:	4628      	mov	r0, r5
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	f000 f889 	bl	80045c4 <_svfiprintf_r>
 80044b2:	1c43      	adds	r3, r0, #1
 80044b4:	bfbc      	itt	lt
 80044b6:	238b      	movlt	r3, #139	; 0x8b
 80044b8:	602b      	strlt	r3, [r5, #0]
 80044ba:	2c00      	cmp	r4, #0
 80044bc:	d0dd      	beq.n	800447a <sniprintf+0x16>
 80044be:	9b02      	ldr	r3, [sp, #8]
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	e7d9      	b.n	800447a <sniprintf+0x16>
 80044c6:	bf00      	nop
 80044c8:	2000000c 	.word	0x2000000c

080044cc <siprintf>:
 80044cc:	b40e      	push	{r1, r2, r3}
 80044ce:	b500      	push	{lr}
 80044d0:	b09c      	sub	sp, #112	; 0x70
 80044d2:	ab1d      	add	r3, sp, #116	; 0x74
 80044d4:	9002      	str	r0, [sp, #8]
 80044d6:	9006      	str	r0, [sp, #24]
 80044d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044dc:	4809      	ldr	r0, [pc, #36]	; (8004504 <siprintf+0x38>)
 80044de:	9107      	str	r1, [sp, #28]
 80044e0:	9104      	str	r1, [sp, #16]
 80044e2:	4909      	ldr	r1, [pc, #36]	; (8004508 <siprintf+0x3c>)
 80044e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80044e8:	9105      	str	r1, [sp, #20]
 80044ea:	6800      	ldr	r0, [r0, #0]
 80044ec:	9301      	str	r3, [sp, #4]
 80044ee:	a902      	add	r1, sp, #8
 80044f0:	f000 f868 	bl	80045c4 <_svfiprintf_r>
 80044f4:	9b02      	ldr	r3, [sp, #8]
 80044f6:	2200      	movs	r2, #0
 80044f8:	701a      	strb	r2, [r3, #0]
 80044fa:	b01c      	add	sp, #112	; 0x70
 80044fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004500:	b003      	add	sp, #12
 8004502:	4770      	bx	lr
 8004504:	2000000c 	.word	0x2000000c
 8004508:	ffff0208 	.word	0xffff0208

0800450c <__ssputs_r>:
 800450c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004510:	688e      	ldr	r6, [r1, #8]
 8004512:	429e      	cmp	r6, r3
 8004514:	4682      	mov	sl, r0
 8004516:	460c      	mov	r4, r1
 8004518:	4690      	mov	r8, r2
 800451a:	461f      	mov	r7, r3
 800451c:	d838      	bhi.n	8004590 <__ssputs_r+0x84>
 800451e:	898a      	ldrh	r2, [r1, #12]
 8004520:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004524:	d032      	beq.n	800458c <__ssputs_r+0x80>
 8004526:	6825      	ldr	r5, [r4, #0]
 8004528:	6909      	ldr	r1, [r1, #16]
 800452a:	eba5 0901 	sub.w	r9, r5, r1
 800452e:	6965      	ldr	r5, [r4, #20]
 8004530:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004534:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004538:	3301      	adds	r3, #1
 800453a:	444b      	add	r3, r9
 800453c:	106d      	asrs	r5, r5, #1
 800453e:	429d      	cmp	r5, r3
 8004540:	bf38      	it	cc
 8004542:	461d      	movcc	r5, r3
 8004544:	0553      	lsls	r3, r2, #21
 8004546:	d531      	bpl.n	80045ac <__ssputs_r+0xa0>
 8004548:	4629      	mov	r1, r5
 800454a:	f000 fb55 	bl	8004bf8 <_malloc_r>
 800454e:	4606      	mov	r6, r0
 8004550:	b950      	cbnz	r0, 8004568 <__ssputs_r+0x5c>
 8004552:	230c      	movs	r3, #12
 8004554:	f8ca 3000 	str.w	r3, [sl]
 8004558:	89a3      	ldrh	r3, [r4, #12]
 800455a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800455e:	81a3      	strh	r3, [r4, #12]
 8004560:	f04f 30ff 	mov.w	r0, #4294967295
 8004564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004568:	6921      	ldr	r1, [r4, #16]
 800456a:	464a      	mov	r2, r9
 800456c:	f7ff ff64 	bl	8004438 <memcpy>
 8004570:	89a3      	ldrh	r3, [r4, #12]
 8004572:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800457a:	81a3      	strh	r3, [r4, #12]
 800457c:	6126      	str	r6, [r4, #16]
 800457e:	6165      	str	r5, [r4, #20]
 8004580:	444e      	add	r6, r9
 8004582:	eba5 0509 	sub.w	r5, r5, r9
 8004586:	6026      	str	r6, [r4, #0]
 8004588:	60a5      	str	r5, [r4, #8]
 800458a:	463e      	mov	r6, r7
 800458c:	42be      	cmp	r6, r7
 800458e:	d900      	bls.n	8004592 <__ssputs_r+0x86>
 8004590:	463e      	mov	r6, r7
 8004592:	6820      	ldr	r0, [r4, #0]
 8004594:	4632      	mov	r2, r6
 8004596:	4641      	mov	r1, r8
 8004598:	f000 faa8 	bl	8004aec <memmove>
 800459c:	68a3      	ldr	r3, [r4, #8]
 800459e:	1b9b      	subs	r3, r3, r6
 80045a0:	60a3      	str	r3, [r4, #8]
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	4433      	add	r3, r6
 80045a6:	6023      	str	r3, [r4, #0]
 80045a8:	2000      	movs	r0, #0
 80045aa:	e7db      	b.n	8004564 <__ssputs_r+0x58>
 80045ac:	462a      	mov	r2, r5
 80045ae:	f000 fb97 	bl	8004ce0 <_realloc_r>
 80045b2:	4606      	mov	r6, r0
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d1e1      	bne.n	800457c <__ssputs_r+0x70>
 80045b8:	6921      	ldr	r1, [r4, #16]
 80045ba:	4650      	mov	r0, sl
 80045bc:	f000 fab0 	bl	8004b20 <_free_r>
 80045c0:	e7c7      	b.n	8004552 <__ssputs_r+0x46>
	...

080045c4 <_svfiprintf_r>:
 80045c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c8:	4698      	mov	r8, r3
 80045ca:	898b      	ldrh	r3, [r1, #12]
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	b09d      	sub	sp, #116	; 0x74
 80045d0:	4607      	mov	r7, r0
 80045d2:	460d      	mov	r5, r1
 80045d4:	4614      	mov	r4, r2
 80045d6:	d50e      	bpl.n	80045f6 <_svfiprintf_r+0x32>
 80045d8:	690b      	ldr	r3, [r1, #16]
 80045da:	b963      	cbnz	r3, 80045f6 <_svfiprintf_r+0x32>
 80045dc:	2140      	movs	r1, #64	; 0x40
 80045de:	f000 fb0b 	bl	8004bf8 <_malloc_r>
 80045e2:	6028      	str	r0, [r5, #0]
 80045e4:	6128      	str	r0, [r5, #16]
 80045e6:	b920      	cbnz	r0, 80045f2 <_svfiprintf_r+0x2e>
 80045e8:	230c      	movs	r3, #12
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	f04f 30ff 	mov.w	r0, #4294967295
 80045f0:	e0d1      	b.n	8004796 <_svfiprintf_r+0x1d2>
 80045f2:	2340      	movs	r3, #64	; 0x40
 80045f4:	616b      	str	r3, [r5, #20]
 80045f6:	2300      	movs	r3, #0
 80045f8:	9309      	str	r3, [sp, #36]	; 0x24
 80045fa:	2320      	movs	r3, #32
 80045fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004600:	f8cd 800c 	str.w	r8, [sp, #12]
 8004604:	2330      	movs	r3, #48	; 0x30
 8004606:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80047b0 <_svfiprintf_r+0x1ec>
 800460a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800460e:	f04f 0901 	mov.w	r9, #1
 8004612:	4623      	mov	r3, r4
 8004614:	469a      	mov	sl, r3
 8004616:	f813 2b01 	ldrb.w	r2, [r3], #1
 800461a:	b10a      	cbz	r2, 8004620 <_svfiprintf_r+0x5c>
 800461c:	2a25      	cmp	r2, #37	; 0x25
 800461e:	d1f9      	bne.n	8004614 <_svfiprintf_r+0x50>
 8004620:	ebba 0b04 	subs.w	fp, sl, r4
 8004624:	d00b      	beq.n	800463e <_svfiprintf_r+0x7a>
 8004626:	465b      	mov	r3, fp
 8004628:	4622      	mov	r2, r4
 800462a:	4629      	mov	r1, r5
 800462c:	4638      	mov	r0, r7
 800462e:	f7ff ff6d 	bl	800450c <__ssputs_r>
 8004632:	3001      	adds	r0, #1
 8004634:	f000 80aa 	beq.w	800478c <_svfiprintf_r+0x1c8>
 8004638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800463a:	445a      	add	r2, fp
 800463c:	9209      	str	r2, [sp, #36]	; 0x24
 800463e:	f89a 3000 	ldrb.w	r3, [sl]
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 80a2 	beq.w	800478c <_svfiprintf_r+0x1c8>
 8004648:	2300      	movs	r3, #0
 800464a:	f04f 32ff 	mov.w	r2, #4294967295
 800464e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004652:	f10a 0a01 	add.w	sl, sl, #1
 8004656:	9304      	str	r3, [sp, #16]
 8004658:	9307      	str	r3, [sp, #28]
 800465a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800465e:	931a      	str	r3, [sp, #104]	; 0x68
 8004660:	4654      	mov	r4, sl
 8004662:	2205      	movs	r2, #5
 8004664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004668:	4851      	ldr	r0, [pc, #324]	; (80047b0 <_svfiprintf_r+0x1ec>)
 800466a:	f7fb fde1 	bl	8000230 <memchr>
 800466e:	9a04      	ldr	r2, [sp, #16]
 8004670:	b9d8      	cbnz	r0, 80046aa <_svfiprintf_r+0xe6>
 8004672:	06d0      	lsls	r0, r2, #27
 8004674:	bf44      	itt	mi
 8004676:	2320      	movmi	r3, #32
 8004678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800467c:	0711      	lsls	r1, r2, #28
 800467e:	bf44      	itt	mi
 8004680:	232b      	movmi	r3, #43	; 0x2b
 8004682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004686:	f89a 3000 	ldrb.w	r3, [sl]
 800468a:	2b2a      	cmp	r3, #42	; 0x2a
 800468c:	d015      	beq.n	80046ba <_svfiprintf_r+0xf6>
 800468e:	9a07      	ldr	r2, [sp, #28]
 8004690:	4654      	mov	r4, sl
 8004692:	2000      	movs	r0, #0
 8004694:	f04f 0c0a 	mov.w	ip, #10
 8004698:	4621      	mov	r1, r4
 800469a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800469e:	3b30      	subs	r3, #48	; 0x30
 80046a0:	2b09      	cmp	r3, #9
 80046a2:	d94e      	bls.n	8004742 <_svfiprintf_r+0x17e>
 80046a4:	b1b0      	cbz	r0, 80046d4 <_svfiprintf_r+0x110>
 80046a6:	9207      	str	r2, [sp, #28]
 80046a8:	e014      	b.n	80046d4 <_svfiprintf_r+0x110>
 80046aa:	eba0 0308 	sub.w	r3, r0, r8
 80046ae:	fa09 f303 	lsl.w	r3, r9, r3
 80046b2:	4313      	orrs	r3, r2
 80046b4:	9304      	str	r3, [sp, #16]
 80046b6:	46a2      	mov	sl, r4
 80046b8:	e7d2      	b.n	8004660 <_svfiprintf_r+0x9c>
 80046ba:	9b03      	ldr	r3, [sp, #12]
 80046bc:	1d19      	adds	r1, r3, #4
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	9103      	str	r1, [sp, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	bfbb      	ittet	lt
 80046c6:	425b      	neglt	r3, r3
 80046c8:	f042 0202 	orrlt.w	r2, r2, #2
 80046cc:	9307      	strge	r3, [sp, #28]
 80046ce:	9307      	strlt	r3, [sp, #28]
 80046d0:	bfb8      	it	lt
 80046d2:	9204      	strlt	r2, [sp, #16]
 80046d4:	7823      	ldrb	r3, [r4, #0]
 80046d6:	2b2e      	cmp	r3, #46	; 0x2e
 80046d8:	d10c      	bne.n	80046f4 <_svfiprintf_r+0x130>
 80046da:	7863      	ldrb	r3, [r4, #1]
 80046dc:	2b2a      	cmp	r3, #42	; 0x2a
 80046de:	d135      	bne.n	800474c <_svfiprintf_r+0x188>
 80046e0:	9b03      	ldr	r3, [sp, #12]
 80046e2:	1d1a      	adds	r2, r3, #4
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	9203      	str	r2, [sp, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bfb8      	it	lt
 80046ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80046f0:	3402      	adds	r4, #2
 80046f2:	9305      	str	r3, [sp, #20]
 80046f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047c0 <_svfiprintf_r+0x1fc>
 80046f8:	7821      	ldrb	r1, [r4, #0]
 80046fa:	2203      	movs	r2, #3
 80046fc:	4650      	mov	r0, sl
 80046fe:	f7fb fd97 	bl	8000230 <memchr>
 8004702:	b140      	cbz	r0, 8004716 <_svfiprintf_r+0x152>
 8004704:	2340      	movs	r3, #64	; 0x40
 8004706:	eba0 000a 	sub.w	r0, r0, sl
 800470a:	fa03 f000 	lsl.w	r0, r3, r0
 800470e:	9b04      	ldr	r3, [sp, #16]
 8004710:	4303      	orrs	r3, r0
 8004712:	3401      	adds	r4, #1
 8004714:	9304      	str	r3, [sp, #16]
 8004716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800471a:	4826      	ldr	r0, [pc, #152]	; (80047b4 <_svfiprintf_r+0x1f0>)
 800471c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004720:	2206      	movs	r2, #6
 8004722:	f7fb fd85 	bl	8000230 <memchr>
 8004726:	2800      	cmp	r0, #0
 8004728:	d038      	beq.n	800479c <_svfiprintf_r+0x1d8>
 800472a:	4b23      	ldr	r3, [pc, #140]	; (80047b8 <_svfiprintf_r+0x1f4>)
 800472c:	bb1b      	cbnz	r3, 8004776 <_svfiprintf_r+0x1b2>
 800472e:	9b03      	ldr	r3, [sp, #12]
 8004730:	3307      	adds	r3, #7
 8004732:	f023 0307 	bic.w	r3, r3, #7
 8004736:	3308      	adds	r3, #8
 8004738:	9303      	str	r3, [sp, #12]
 800473a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800473c:	4433      	add	r3, r6
 800473e:	9309      	str	r3, [sp, #36]	; 0x24
 8004740:	e767      	b.n	8004612 <_svfiprintf_r+0x4e>
 8004742:	fb0c 3202 	mla	r2, ip, r2, r3
 8004746:	460c      	mov	r4, r1
 8004748:	2001      	movs	r0, #1
 800474a:	e7a5      	b.n	8004698 <_svfiprintf_r+0xd4>
 800474c:	2300      	movs	r3, #0
 800474e:	3401      	adds	r4, #1
 8004750:	9305      	str	r3, [sp, #20]
 8004752:	4619      	mov	r1, r3
 8004754:	f04f 0c0a 	mov.w	ip, #10
 8004758:	4620      	mov	r0, r4
 800475a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800475e:	3a30      	subs	r2, #48	; 0x30
 8004760:	2a09      	cmp	r2, #9
 8004762:	d903      	bls.n	800476c <_svfiprintf_r+0x1a8>
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0c5      	beq.n	80046f4 <_svfiprintf_r+0x130>
 8004768:	9105      	str	r1, [sp, #20]
 800476a:	e7c3      	b.n	80046f4 <_svfiprintf_r+0x130>
 800476c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004770:	4604      	mov	r4, r0
 8004772:	2301      	movs	r3, #1
 8004774:	e7f0      	b.n	8004758 <_svfiprintf_r+0x194>
 8004776:	ab03      	add	r3, sp, #12
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	462a      	mov	r2, r5
 800477c:	4b0f      	ldr	r3, [pc, #60]	; (80047bc <_svfiprintf_r+0x1f8>)
 800477e:	a904      	add	r1, sp, #16
 8004780:	4638      	mov	r0, r7
 8004782:	f3af 8000 	nop.w
 8004786:	1c42      	adds	r2, r0, #1
 8004788:	4606      	mov	r6, r0
 800478a:	d1d6      	bne.n	800473a <_svfiprintf_r+0x176>
 800478c:	89ab      	ldrh	r3, [r5, #12]
 800478e:	065b      	lsls	r3, r3, #25
 8004790:	f53f af2c 	bmi.w	80045ec <_svfiprintf_r+0x28>
 8004794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004796:	b01d      	add	sp, #116	; 0x74
 8004798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800479c:	ab03      	add	r3, sp, #12
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	462a      	mov	r2, r5
 80047a2:	4b06      	ldr	r3, [pc, #24]	; (80047bc <_svfiprintf_r+0x1f8>)
 80047a4:	a904      	add	r1, sp, #16
 80047a6:	4638      	mov	r0, r7
 80047a8:	f000 f87a 	bl	80048a0 <_printf_i>
 80047ac:	e7eb      	b.n	8004786 <_svfiprintf_r+0x1c2>
 80047ae:	bf00      	nop
 80047b0:	08006589 	.word	0x08006589
 80047b4:	08006593 	.word	0x08006593
 80047b8:	00000000 	.word	0x00000000
 80047bc:	0800450d 	.word	0x0800450d
 80047c0:	0800658f 	.word	0x0800658f

080047c4 <_printf_common>:
 80047c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047c8:	4616      	mov	r6, r2
 80047ca:	4699      	mov	r9, r3
 80047cc:	688a      	ldr	r2, [r1, #8]
 80047ce:	690b      	ldr	r3, [r1, #16]
 80047d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047d4:	4293      	cmp	r3, r2
 80047d6:	bfb8      	it	lt
 80047d8:	4613      	movlt	r3, r2
 80047da:	6033      	str	r3, [r6, #0]
 80047dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047e0:	4607      	mov	r7, r0
 80047e2:	460c      	mov	r4, r1
 80047e4:	b10a      	cbz	r2, 80047ea <_printf_common+0x26>
 80047e6:	3301      	adds	r3, #1
 80047e8:	6033      	str	r3, [r6, #0]
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	0699      	lsls	r1, r3, #26
 80047ee:	bf42      	ittt	mi
 80047f0:	6833      	ldrmi	r3, [r6, #0]
 80047f2:	3302      	addmi	r3, #2
 80047f4:	6033      	strmi	r3, [r6, #0]
 80047f6:	6825      	ldr	r5, [r4, #0]
 80047f8:	f015 0506 	ands.w	r5, r5, #6
 80047fc:	d106      	bne.n	800480c <_printf_common+0x48>
 80047fe:	f104 0a19 	add.w	sl, r4, #25
 8004802:	68e3      	ldr	r3, [r4, #12]
 8004804:	6832      	ldr	r2, [r6, #0]
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	42ab      	cmp	r3, r5
 800480a:	dc26      	bgt.n	800485a <_printf_common+0x96>
 800480c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004810:	1e13      	subs	r3, r2, #0
 8004812:	6822      	ldr	r2, [r4, #0]
 8004814:	bf18      	it	ne
 8004816:	2301      	movne	r3, #1
 8004818:	0692      	lsls	r2, r2, #26
 800481a:	d42b      	bmi.n	8004874 <_printf_common+0xb0>
 800481c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004820:	4649      	mov	r1, r9
 8004822:	4638      	mov	r0, r7
 8004824:	47c0      	blx	r8
 8004826:	3001      	adds	r0, #1
 8004828:	d01e      	beq.n	8004868 <_printf_common+0xa4>
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	68e5      	ldr	r5, [r4, #12]
 800482e:	6832      	ldr	r2, [r6, #0]
 8004830:	f003 0306 	and.w	r3, r3, #6
 8004834:	2b04      	cmp	r3, #4
 8004836:	bf08      	it	eq
 8004838:	1aad      	subeq	r5, r5, r2
 800483a:	68a3      	ldr	r3, [r4, #8]
 800483c:	6922      	ldr	r2, [r4, #16]
 800483e:	bf0c      	ite	eq
 8004840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004844:	2500      	movne	r5, #0
 8004846:	4293      	cmp	r3, r2
 8004848:	bfc4      	itt	gt
 800484a:	1a9b      	subgt	r3, r3, r2
 800484c:	18ed      	addgt	r5, r5, r3
 800484e:	2600      	movs	r6, #0
 8004850:	341a      	adds	r4, #26
 8004852:	42b5      	cmp	r5, r6
 8004854:	d11a      	bne.n	800488c <_printf_common+0xc8>
 8004856:	2000      	movs	r0, #0
 8004858:	e008      	b.n	800486c <_printf_common+0xa8>
 800485a:	2301      	movs	r3, #1
 800485c:	4652      	mov	r2, sl
 800485e:	4649      	mov	r1, r9
 8004860:	4638      	mov	r0, r7
 8004862:	47c0      	blx	r8
 8004864:	3001      	adds	r0, #1
 8004866:	d103      	bne.n	8004870 <_printf_common+0xac>
 8004868:	f04f 30ff 	mov.w	r0, #4294967295
 800486c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004870:	3501      	adds	r5, #1
 8004872:	e7c6      	b.n	8004802 <_printf_common+0x3e>
 8004874:	18e1      	adds	r1, r4, r3
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	2030      	movs	r0, #48	; 0x30
 800487a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800487e:	4422      	add	r2, r4
 8004880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004888:	3302      	adds	r3, #2
 800488a:	e7c7      	b.n	800481c <_printf_common+0x58>
 800488c:	2301      	movs	r3, #1
 800488e:	4622      	mov	r2, r4
 8004890:	4649      	mov	r1, r9
 8004892:	4638      	mov	r0, r7
 8004894:	47c0      	blx	r8
 8004896:	3001      	adds	r0, #1
 8004898:	d0e6      	beq.n	8004868 <_printf_common+0xa4>
 800489a:	3601      	adds	r6, #1
 800489c:	e7d9      	b.n	8004852 <_printf_common+0x8e>
	...

080048a0 <_printf_i>:
 80048a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048a4:	7e0f      	ldrb	r7, [r1, #24]
 80048a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048a8:	2f78      	cmp	r7, #120	; 0x78
 80048aa:	4691      	mov	r9, r2
 80048ac:	4680      	mov	r8, r0
 80048ae:	460c      	mov	r4, r1
 80048b0:	469a      	mov	sl, r3
 80048b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048b6:	d807      	bhi.n	80048c8 <_printf_i+0x28>
 80048b8:	2f62      	cmp	r7, #98	; 0x62
 80048ba:	d80a      	bhi.n	80048d2 <_printf_i+0x32>
 80048bc:	2f00      	cmp	r7, #0
 80048be:	f000 80d8 	beq.w	8004a72 <_printf_i+0x1d2>
 80048c2:	2f58      	cmp	r7, #88	; 0x58
 80048c4:	f000 80a3 	beq.w	8004a0e <_printf_i+0x16e>
 80048c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048d0:	e03a      	b.n	8004948 <_printf_i+0xa8>
 80048d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048d6:	2b15      	cmp	r3, #21
 80048d8:	d8f6      	bhi.n	80048c8 <_printf_i+0x28>
 80048da:	a101      	add	r1, pc, #4	; (adr r1, 80048e0 <_printf_i+0x40>)
 80048dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048e0:	08004939 	.word	0x08004939
 80048e4:	0800494d 	.word	0x0800494d
 80048e8:	080048c9 	.word	0x080048c9
 80048ec:	080048c9 	.word	0x080048c9
 80048f0:	080048c9 	.word	0x080048c9
 80048f4:	080048c9 	.word	0x080048c9
 80048f8:	0800494d 	.word	0x0800494d
 80048fc:	080048c9 	.word	0x080048c9
 8004900:	080048c9 	.word	0x080048c9
 8004904:	080048c9 	.word	0x080048c9
 8004908:	080048c9 	.word	0x080048c9
 800490c:	08004a59 	.word	0x08004a59
 8004910:	0800497d 	.word	0x0800497d
 8004914:	08004a3b 	.word	0x08004a3b
 8004918:	080048c9 	.word	0x080048c9
 800491c:	080048c9 	.word	0x080048c9
 8004920:	08004a7b 	.word	0x08004a7b
 8004924:	080048c9 	.word	0x080048c9
 8004928:	0800497d 	.word	0x0800497d
 800492c:	080048c9 	.word	0x080048c9
 8004930:	080048c9 	.word	0x080048c9
 8004934:	08004a43 	.word	0x08004a43
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	1d1a      	adds	r2, r3, #4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	602a      	str	r2, [r5, #0]
 8004940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004948:	2301      	movs	r3, #1
 800494a:	e0a3      	b.n	8004a94 <_printf_i+0x1f4>
 800494c:	6820      	ldr	r0, [r4, #0]
 800494e:	6829      	ldr	r1, [r5, #0]
 8004950:	0606      	lsls	r6, r0, #24
 8004952:	f101 0304 	add.w	r3, r1, #4
 8004956:	d50a      	bpl.n	800496e <_printf_i+0xce>
 8004958:	680e      	ldr	r6, [r1, #0]
 800495a:	602b      	str	r3, [r5, #0]
 800495c:	2e00      	cmp	r6, #0
 800495e:	da03      	bge.n	8004968 <_printf_i+0xc8>
 8004960:	232d      	movs	r3, #45	; 0x2d
 8004962:	4276      	negs	r6, r6
 8004964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004968:	485e      	ldr	r0, [pc, #376]	; (8004ae4 <_printf_i+0x244>)
 800496a:	230a      	movs	r3, #10
 800496c:	e019      	b.n	80049a2 <_printf_i+0x102>
 800496e:	680e      	ldr	r6, [r1, #0]
 8004970:	602b      	str	r3, [r5, #0]
 8004972:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004976:	bf18      	it	ne
 8004978:	b236      	sxthne	r6, r6
 800497a:	e7ef      	b.n	800495c <_printf_i+0xbc>
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	6820      	ldr	r0, [r4, #0]
 8004980:	1d19      	adds	r1, r3, #4
 8004982:	6029      	str	r1, [r5, #0]
 8004984:	0601      	lsls	r1, r0, #24
 8004986:	d501      	bpl.n	800498c <_printf_i+0xec>
 8004988:	681e      	ldr	r6, [r3, #0]
 800498a:	e002      	b.n	8004992 <_printf_i+0xf2>
 800498c:	0646      	lsls	r6, r0, #25
 800498e:	d5fb      	bpl.n	8004988 <_printf_i+0xe8>
 8004990:	881e      	ldrh	r6, [r3, #0]
 8004992:	4854      	ldr	r0, [pc, #336]	; (8004ae4 <_printf_i+0x244>)
 8004994:	2f6f      	cmp	r7, #111	; 0x6f
 8004996:	bf0c      	ite	eq
 8004998:	2308      	moveq	r3, #8
 800499a:	230a      	movne	r3, #10
 800499c:	2100      	movs	r1, #0
 800499e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049a2:	6865      	ldr	r5, [r4, #4]
 80049a4:	60a5      	str	r5, [r4, #8]
 80049a6:	2d00      	cmp	r5, #0
 80049a8:	bfa2      	ittt	ge
 80049aa:	6821      	ldrge	r1, [r4, #0]
 80049ac:	f021 0104 	bicge.w	r1, r1, #4
 80049b0:	6021      	strge	r1, [r4, #0]
 80049b2:	b90e      	cbnz	r6, 80049b8 <_printf_i+0x118>
 80049b4:	2d00      	cmp	r5, #0
 80049b6:	d04d      	beq.n	8004a54 <_printf_i+0x1b4>
 80049b8:	4615      	mov	r5, r2
 80049ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80049be:	fb03 6711 	mls	r7, r3, r1, r6
 80049c2:	5dc7      	ldrb	r7, [r0, r7]
 80049c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049c8:	4637      	mov	r7, r6
 80049ca:	42bb      	cmp	r3, r7
 80049cc:	460e      	mov	r6, r1
 80049ce:	d9f4      	bls.n	80049ba <_printf_i+0x11a>
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d10b      	bne.n	80049ec <_printf_i+0x14c>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	07de      	lsls	r6, r3, #31
 80049d8:	d508      	bpl.n	80049ec <_printf_i+0x14c>
 80049da:	6923      	ldr	r3, [r4, #16]
 80049dc:	6861      	ldr	r1, [r4, #4]
 80049de:	4299      	cmp	r1, r3
 80049e0:	bfde      	ittt	le
 80049e2:	2330      	movle	r3, #48	; 0x30
 80049e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049ec:	1b52      	subs	r2, r2, r5
 80049ee:	6122      	str	r2, [r4, #16]
 80049f0:	f8cd a000 	str.w	sl, [sp]
 80049f4:	464b      	mov	r3, r9
 80049f6:	aa03      	add	r2, sp, #12
 80049f8:	4621      	mov	r1, r4
 80049fa:	4640      	mov	r0, r8
 80049fc:	f7ff fee2 	bl	80047c4 <_printf_common>
 8004a00:	3001      	adds	r0, #1
 8004a02:	d14c      	bne.n	8004a9e <_printf_i+0x1fe>
 8004a04:	f04f 30ff 	mov.w	r0, #4294967295
 8004a08:	b004      	add	sp, #16
 8004a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a0e:	4835      	ldr	r0, [pc, #212]	; (8004ae4 <_printf_i+0x244>)
 8004a10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a14:	6829      	ldr	r1, [r5, #0]
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a1c:	6029      	str	r1, [r5, #0]
 8004a1e:	061d      	lsls	r5, r3, #24
 8004a20:	d514      	bpl.n	8004a4c <_printf_i+0x1ac>
 8004a22:	07df      	lsls	r7, r3, #31
 8004a24:	bf44      	itt	mi
 8004a26:	f043 0320 	orrmi.w	r3, r3, #32
 8004a2a:	6023      	strmi	r3, [r4, #0]
 8004a2c:	b91e      	cbnz	r6, 8004a36 <_printf_i+0x196>
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	f023 0320 	bic.w	r3, r3, #32
 8004a34:	6023      	str	r3, [r4, #0]
 8004a36:	2310      	movs	r3, #16
 8004a38:	e7b0      	b.n	800499c <_printf_i+0xfc>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	f043 0320 	orr.w	r3, r3, #32
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	2378      	movs	r3, #120	; 0x78
 8004a44:	4828      	ldr	r0, [pc, #160]	; (8004ae8 <_printf_i+0x248>)
 8004a46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a4a:	e7e3      	b.n	8004a14 <_printf_i+0x174>
 8004a4c:	0659      	lsls	r1, r3, #25
 8004a4e:	bf48      	it	mi
 8004a50:	b2b6      	uxthmi	r6, r6
 8004a52:	e7e6      	b.n	8004a22 <_printf_i+0x182>
 8004a54:	4615      	mov	r5, r2
 8004a56:	e7bb      	b.n	80049d0 <_printf_i+0x130>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	6826      	ldr	r6, [r4, #0]
 8004a5c:	6961      	ldr	r1, [r4, #20]
 8004a5e:	1d18      	adds	r0, r3, #4
 8004a60:	6028      	str	r0, [r5, #0]
 8004a62:	0635      	lsls	r5, r6, #24
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	d501      	bpl.n	8004a6c <_printf_i+0x1cc>
 8004a68:	6019      	str	r1, [r3, #0]
 8004a6a:	e002      	b.n	8004a72 <_printf_i+0x1d2>
 8004a6c:	0670      	lsls	r0, r6, #25
 8004a6e:	d5fb      	bpl.n	8004a68 <_printf_i+0x1c8>
 8004a70:	8019      	strh	r1, [r3, #0]
 8004a72:	2300      	movs	r3, #0
 8004a74:	6123      	str	r3, [r4, #16]
 8004a76:	4615      	mov	r5, r2
 8004a78:	e7ba      	b.n	80049f0 <_printf_i+0x150>
 8004a7a:	682b      	ldr	r3, [r5, #0]
 8004a7c:	1d1a      	adds	r2, r3, #4
 8004a7e:	602a      	str	r2, [r5, #0]
 8004a80:	681d      	ldr	r5, [r3, #0]
 8004a82:	6862      	ldr	r2, [r4, #4]
 8004a84:	2100      	movs	r1, #0
 8004a86:	4628      	mov	r0, r5
 8004a88:	f7fb fbd2 	bl	8000230 <memchr>
 8004a8c:	b108      	cbz	r0, 8004a92 <_printf_i+0x1f2>
 8004a8e:	1b40      	subs	r0, r0, r5
 8004a90:	6060      	str	r0, [r4, #4]
 8004a92:	6863      	ldr	r3, [r4, #4]
 8004a94:	6123      	str	r3, [r4, #16]
 8004a96:	2300      	movs	r3, #0
 8004a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a9c:	e7a8      	b.n	80049f0 <_printf_i+0x150>
 8004a9e:	6923      	ldr	r3, [r4, #16]
 8004aa0:	462a      	mov	r2, r5
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	4640      	mov	r0, r8
 8004aa6:	47d0      	blx	sl
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d0ab      	beq.n	8004a04 <_printf_i+0x164>
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	079b      	lsls	r3, r3, #30
 8004ab0:	d413      	bmi.n	8004ada <_printf_i+0x23a>
 8004ab2:	68e0      	ldr	r0, [r4, #12]
 8004ab4:	9b03      	ldr	r3, [sp, #12]
 8004ab6:	4298      	cmp	r0, r3
 8004ab8:	bfb8      	it	lt
 8004aba:	4618      	movlt	r0, r3
 8004abc:	e7a4      	b.n	8004a08 <_printf_i+0x168>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	4632      	mov	r2, r6
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	4640      	mov	r0, r8
 8004ac6:	47d0      	blx	sl
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d09b      	beq.n	8004a04 <_printf_i+0x164>
 8004acc:	3501      	adds	r5, #1
 8004ace:	68e3      	ldr	r3, [r4, #12]
 8004ad0:	9903      	ldr	r1, [sp, #12]
 8004ad2:	1a5b      	subs	r3, r3, r1
 8004ad4:	42ab      	cmp	r3, r5
 8004ad6:	dcf2      	bgt.n	8004abe <_printf_i+0x21e>
 8004ad8:	e7eb      	b.n	8004ab2 <_printf_i+0x212>
 8004ada:	2500      	movs	r5, #0
 8004adc:	f104 0619 	add.w	r6, r4, #25
 8004ae0:	e7f5      	b.n	8004ace <_printf_i+0x22e>
 8004ae2:	bf00      	nop
 8004ae4:	0800659a 	.word	0x0800659a
 8004ae8:	080065ab 	.word	0x080065ab

08004aec <memmove>:
 8004aec:	4288      	cmp	r0, r1
 8004aee:	b510      	push	{r4, lr}
 8004af0:	eb01 0402 	add.w	r4, r1, r2
 8004af4:	d902      	bls.n	8004afc <memmove+0x10>
 8004af6:	4284      	cmp	r4, r0
 8004af8:	4623      	mov	r3, r4
 8004afa:	d807      	bhi.n	8004b0c <memmove+0x20>
 8004afc:	1e43      	subs	r3, r0, #1
 8004afe:	42a1      	cmp	r1, r4
 8004b00:	d008      	beq.n	8004b14 <memmove+0x28>
 8004b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b0a:	e7f8      	b.n	8004afe <memmove+0x12>
 8004b0c:	4402      	add	r2, r0
 8004b0e:	4601      	mov	r1, r0
 8004b10:	428a      	cmp	r2, r1
 8004b12:	d100      	bne.n	8004b16 <memmove+0x2a>
 8004b14:	bd10      	pop	{r4, pc}
 8004b16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b1e:	e7f7      	b.n	8004b10 <memmove+0x24>

08004b20 <_free_r>:
 8004b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b22:	2900      	cmp	r1, #0
 8004b24:	d044      	beq.n	8004bb0 <_free_r+0x90>
 8004b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b2a:	9001      	str	r0, [sp, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004b32:	bfb8      	it	lt
 8004b34:	18e4      	addlt	r4, r4, r3
 8004b36:	f000 f913 	bl	8004d60 <__malloc_lock>
 8004b3a:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <_free_r+0x94>)
 8004b3c:	9801      	ldr	r0, [sp, #4]
 8004b3e:	6813      	ldr	r3, [r2, #0]
 8004b40:	b933      	cbnz	r3, 8004b50 <_free_r+0x30>
 8004b42:	6063      	str	r3, [r4, #4]
 8004b44:	6014      	str	r4, [r2, #0]
 8004b46:	b003      	add	sp, #12
 8004b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b4c:	f000 b90e 	b.w	8004d6c <__malloc_unlock>
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	d908      	bls.n	8004b66 <_free_r+0x46>
 8004b54:	6825      	ldr	r5, [r4, #0]
 8004b56:	1961      	adds	r1, r4, r5
 8004b58:	428b      	cmp	r3, r1
 8004b5a:	bf01      	itttt	eq
 8004b5c:	6819      	ldreq	r1, [r3, #0]
 8004b5e:	685b      	ldreq	r3, [r3, #4]
 8004b60:	1949      	addeq	r1, r1, r5
 8004b62:	6021      	streq	r1, [r4, #0]
 8004b64:	e7ed      	b.n	8004b42 <_free_r+0x22>
 8004b66:	461a      	mov	r2, r3
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	b10b      	cbz	r3, 8004b70 <_free_r+0x50>
 8004b6c:	42a3      	cmp	r3, r4
 8004b6e:	d9fa      	bls.n	8004b66 <_free_r+0x46>
 8004b70:	6811      	ldr	r1, [r2, #0]
 8004b72:	1855      	adds	r5, r2, r1
 8004b74:	42a5      	cmp	r5, r4
 8004b76:	d10b      	bne.n	8004b90 <_free_r+0x70>
 8004b78:	6824      	ldr	r4, [r4, #0]
 8004b7a:	4421      	add	r1, r4
 8004b7c:	1854      	adds	r4, r2, r1
 8004b7e:	42a3      	cmp	r3, r4
 8004b80:	6011      	str	r1, [r2, #0]
 8004b82:	d1e0      	bne.n	8004b46 <_free_r+0x26>
 8004b84:	681c      	ldr	r4, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	6053      	str	r3, [r2, #4]
 8004b8a:	4421      	add	r1, r4
 8004b8c:	6011      	str	r1, [r2, #0]
 8004b8e:	e7da      	b.n	8004b46 <_free_r+0x26>
 8004b90:	d902      	bls.n	8004b98 <_free_r+0x78>
 8004b92:	230c      	movs	r3, #12
 8004b94:	6003      	str	r3, [r0, #0]
 8004b96:	e7d6      	b.n	8004b46 <_free_r+0x26>
 8004b98:	6825      	ldr	r5, [r4, #0]
 8004b9a:	1961      	adds	r1, r4, r5
 8004b9c:	428b      	cmp	r3, r1
 8004b9e:	bf04      	itt	eq
 8004ba0:	6819      	ldreq	r1, [r3, #0]
 8004ba2:	685b      	ldreq	r3, [r3, #4]
 8004ba4:	6063      	str	r3, [r4, #4]
 8004ba6:	bf04      	itt	eq
 8004ba8:	1949      	addeq	r1, r1, r5
 8004baa:	6021      	streq	r1, [r4, #0]
 8004bac:	6054      	str	r4, [r2, #4]
 8004bae:	e7ca      	b.n	8004b46 <_free_r+0x26>
 8004bb0:	b003      	add	sp, #12
 8004bb2:	bd30      	pop	{r4, r5, pc}
 8004bb4:	200001bc 	.word	0x200001bc

08004bb8 <sbrk_aligned>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	4e0e      	ldr	r6, [pc, #56]	; (8004bf4 <sbrk_aligned+0x3c>)
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	6831      	ldr	r1, [r6, #0]
 8004bc0:	4605      	mov	r5, r0
 8004bc2:	b911      	cbnz	r1, 8004bca <sbrk_aligned+0x12>
 8004bc4:	f000 f8bc 	bl	8004d40 <_sbrk_r>
 8004bc8:	6030      	str	r0, [r6, #0]
 8004bca:	4621      	mov	r1, r4
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f000 f8b7 	bl	8004d40 <_sbrk_r>
 8004bd2:	1c43      	adds	r3, r0, #1
 8004bd4:	d00a      	beq.n	8004bec <sbrk_aligned+0x34>
 8004bd6:	1cc4      	adds	r4, r0, #3
 8004bd8:	f024 0403 	bic.w	r4, r4, #3
 8004bdc:	42a0      	cmp	r0, r4
 8004bde:	d007      	beq.n	8004bf0 <sbrk_aligned+0x38>
 8004be0:	1a21      	subs	r1, r4, r0
 8004be2:	4628      	mov	r0, r5
 8004be4:	f000 f8ac 	bl	8004d40 <_sbrk_r>
 8004be8:	3001      	adds	r0, #1
 8004bea:	d101      	bne.n	8004bf0 <sbrk_aligned+0x38>
 8004bec:	f04f 34ff 	mov.w	r4, #4294967295
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	bd70      	pop	{r4, r5, r6, pc}
 8004bf4:	200001c0 	.word	0x200001c0

08004bf8 <_malloc_r>:
 8004bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfc:	1ccd      	adds	r5, r1, #3
 8004bfe:	f025 0503 	bic.w	r5, r5, #3
 8004c02:	3508      	adds	r5, #8
 8004c04:	2d0c      	cmp	r5, #12
 8004c06:	bf38      	it	cc
 8004c08:	250c      	movcc	r5, #12
 8004c0a:	2d00      	cmp	r5, #0
 8004c0c:	4607      	mov	r7, r0
 8004c0e:	db01      	blt.n	8004c14 <_malloc_r+0x1c>
 8004c10:	42a9      	cmp	r1, r5
 8004c12:	d905      	bls.n	8004c20 <_malloc_r+0x28>
 8004c14:	230c      	movs	r3, #12
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	2600      	movs	r6, #0
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c20:	4e2e      	ldr	r6, [pc, #184]	; (8004cdc <_malloc_r+0xe4>)
 8004c22:	f000 f89d 	bl	8004d60 <__malloc_lock>
 8004c26:	6833      	ldr	r3, [r6, #0]
 8004c28:	461c      	mov	r4, r3
 8004c2a:	bb34      	cbnz	r4, 8004c7a <_malloc_r+0x82>
 8004c2c:	4629      	mov	r1, r5
 8004c2e:	4638      	mov	r0, r7
 8004c30:	f7ff ffc2 	bl	8004bb8 <sbrk_aligned>
 8004c34:	1c43      	adds	r3, r0, #1
 8004c36:	4604      	mov	r4, r0
 8004c38:	d14d      	bne.n	8004cd6 <_malloc_r+0xde>
 8004c3a:	6834      	ldr	r4, [r6, #0]
 8004c3c:	4626      	mov	r6, r4
 8004c3e:	2e00      	cmp	r6, #0
 8004c40:	d140      	bne.n	8004cc4 <_malloc_r+0xcc>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	4631      	mov	r1, r6
 8004c46:	4638      	mov	r0, r7
 8004c48:	eb04 0803 	add.w	r8, r4, r3
 8004c4c:	f000 f878 	bl	8004d40 <_sbrk_r>
 8004c50:	4580      	cmp	r8, r0
 8004c52:	d13a      	bne.n	8004cca <_malloc_r+0xd2>
 8004c54:	6821      	ldr	r1, [r4, #0]
 8004c56:	3503      	adds	r5, #3
 8004c58:	1a6d      	subs	r5, r5, r1
 8004c5a:	f025 0503 	bic.w	r5, r5, #3
 8004c5e:	3508      	adds	r5, #8
 8004c60:	2d0c      	cmp	r5, #12
 8004c62:	bf38      	it	cc
 8004c64:	250c      	movcc	r5, #12
 8004c66:	4629      	mov	r1, r5
 8004c68:	4638      	mov	r0, r7
 8004c6a:	f7ff ffa5 	bl	8004bb8 <sbrk_aligned>
 8004c6e:	3001      	adds	r0, #1
 8004c70:	d02b      	beq.n	8004cca <_malloc_r+0xd2>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	442b      	add	r3, r5
 8004c76:	6023      	str	r3, [r4, #0]
 8004c78:	e00e      	b.n	8004c98 <_malloc_r+0xa0>
 8004c7a:	6822      	ldr	r2, [r4, #0]
 8004c7c:	1b52      	subs	r2, r2, r5
 8004c7e:	d41e      	bmi.n	8004cbe <_malloc_r+0xc6>
 8004c80:	2a0b      	cmp	r2, #11
 8004c82:	d916      	bls.n	8004cb2 <_malloc_r+0xba>
 8004c84:	1961      	adds	r1, r4, r5
 8004c86:	42a3      	cmp	r3, r4
 8004c88:	6025      	str	r5, [r4, #0]
 8004c8a:	bf18      	it	ne
 8004c8c:	6059      	strne	r1, [r3, #4]
 8004c8e:	6863      	ldr	r3, [r4, #4]
 8004c90:	bf08      	it	eq
 8004c92:	6031      	streq	r1, [r6, #0]
 8004c94:	5162      	str	r2, [r4, r5]
 8004c96:	604b      	str	r3, [r1, #4]
 8004c98:	4638      	mov	r0, r7
 8004c9a:	f104 060b 	add.w	r6, r4, #11
 8004c9e:	f000 f865 	bl	8004d6c <__malloc_unlock>
 8004ca2:	f026 0607 	bic.w	r6, r6, #7
 8004ca6:	1d23      	adds	r3, r4, #4
 8004ca8:	1af2      	subs	r2, r6, r3
 8004caa:	d0b6      	beq.n	8004c1a <_malloc_r+0x22>
 8004cac:	1b9b      	subs	r3, r3, r6
 8004cae:	50a3      	str	r3, [r4, r2]
 8004cb0:	e7b3      	b.n	8004c1a <_malloc_r+0x22>
 8004cb2:	6862      	ldr	r2, [r4, #4]
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	bf0c      	ite	eq
 8004cb8:	6032      	streq	r2, [r6, #0]
 8004cba:	605a      	strne	r2, [r3, #4]
 8004cbc:	e7ec      	b.n	8004c98 <_malloc_r+0xa0>
 8004cbe:	4623      	mov	r3, r4
 8004cc0:	6864      	ldr	r4, [r4, #4]
 8004cc2:	e7b2      	b.n	8004c2a <_malloc_r+0x32>
 8004cc4:	4634      	mov	r4, r6
 8004cc6:	6876      	ldr	r6, [r6, #4]
 8004cc8:	e7b9      	b.n	8004c3e <_malloc_r+0x46>
 8004cca:	230c      	movs	r3, #12
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	4638      	mov	r0, r7
 8004cd0:	f000 f84c 	bl	8004d6c <__malloc_unlock>
 8004cd4:	e7a1      	b.n	8004c1a <_malloc_r+0x22>
 8004cd6:	6025      	str	r5, [r4, #0]
 8004cd8:	e7de      	b.n	8004c98 <_malloc_r+0xa0>
 8004cda:	bf00      	nop
 8004cdc:	200001bc 	.word	0x200001bc

08004ce0 <_realloc_r>:
 8004ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce4:	4680      	mov	r8, r0
 8004ce6:	4614      	mov	r4, r2
 8004ce8:	460e      	mov	r6, r1
 8004cea:	b921      	cbnz	r1, 8004cf6 <_realloc_r+0x16>
 8004cec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	f7ff bf81 	b.w	8004bf8 <_malloc_r>
 8004cf6:	b92a      	cbnz	r2, 8004d04 <_realloc_r+0x24>
 8004cf8:	f7ff ff12 	bl	8004b20 <_free_r>
 8004cfc:	4625      	mov	r5, r4
 8004cfe:	4628      	mov	r0, r5
 8004d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d04:	f000 f838 	bl	8004d78 <_malloc_usable_size_r>
 8004d08:	4284      	cmp	r4, r0
 8004d0a:	4607      	mov	r7, r0
 8004d0c:	d802      	bhi.n	8004d14 <_realloc_r+0x34>
 8004d0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d12:	d812      	bhi.n	8004d3a <_realloc_r+0x5a>
 8004d14:	4621      	mov	r1, r4
 8004d16:	4640      	mov	r0, r8
 8004d18:	f7ff ff6e 	bl	8004bf8 <_malloc_r>
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d0ed      	beq.n	8004cfe <_realloc_r+0x1e>
 8004d22:	42bc      	cmp	r4, r7
 8004d24:	4622      	mov	r2, r4
 8004d26:	4631      	mov	r1, r6
 8004d28:	bf28      	it	cs
 8004d2a:	463a      	movcs	r2, r7
 8004d2c:	f7ff fb84 	bl	8004438 <memcpy>
 8004d30:	4631      	mov	r1, r6
 8004d32:	4640      	mov	r0, r8
 8004d34:	f7ff fef4 	bl	8004b20 <_free_r>
 8004d38:	e7e1      	b.n	8004cfe <_realloc_r+0x1e>
 8004d3a:	4635      	mov	r5, r6
 8004d3c:	e7df      	b.n	8004cfe <_realloc_r+0x1e>
	...

08004d40 <_sbrk_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4d06      	ldr	r5, [pc, #24]	; (8004d5c <_sbrk_r+0x1c>)
 8004d44:	2300      	movs	r3, #0
 8004d46:	4604      	mov	r4, r0
 8004d48:	4608      	mov	r0, r1
 8004d4a:	602b      	str	r3, [r5, #0]
 8004d4c:	f7fb ffd0 	bl	8000cf0 <_sbrk>
 8004d50:	1c43      	adds	r3, r0, #1
 8004d52:	d102      	bne.n	8004d5a <_sbrk_r+0x1a>
 8004d54:	682b      	ldr	r3, [r5, #0]
 8004d56:	b103      	cbz	r3, 8004d5a <_sbrk_r+0x1a>
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	bd38      	pop	{r3, r4, r5, pc}
 8004d5c:	200001c4 	.word	0x200001c4

08004d60 <__malloc_lock>:
 8004d60:	4801      	ldr	r0, [pc, #4]	; (8004d68 <__malloc_lock+0x8>)
 8004d62:	f000 b811 	b.w	8004d88 <__retarget_lock_acquire_recursive>
 8004d66:	bf00      	nop
 8004d68:	200001c8 	.word	0x200001c8

08004d6c <__malloc_unlock>:
 8004d6c:	4801      	ldr	r0, [pc, #4]	; (8004d74 <__malloc_unlock+0x8>)
 8004d6e:	f000 b80c 	b.w	8004d8a <__retarget_lock_release_recursive>
 8004d72:	bf00      	nop
 8004d74:	200001c8 	.word	0x200001c8

08004d78 <_malloc_usable_size_r>:
 8004d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d7c:	1f18      	subs	r0, r3, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bfbc      	itt	lt
 8004d82:	580b      	ldrlt	r3, [r1, r0]
 8004d84:	18c0      	addlt	r0, r0, r3
 8004d86:	4770      	bx	lr

08004d88 <__retarget_lock_acquire_recursive>:
 8004d88:	4770      	bx	lr

08004d8a <__retarget_lock_release_recursive>:
 8004d8a:	4770      	bx	lr

08004d8c <_init>:
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8e:	bf00      	nop
 8004d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d92:	bc08      	pop	{r3}
 8004d94:	469e      	mov	lr, r3
 8004d96:	4770      	bx	lr

08004d98 <_fini>:
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	bf00      	nop
 8004d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9e:	bc08      	pop	{r3}
 8004da0:	469e      	mov	lr, r3
 8004da2:	4770      	bx	lr
