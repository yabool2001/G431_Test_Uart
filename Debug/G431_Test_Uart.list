
G431_Test_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001880  08004f98  08004f98  00014f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006818  08006818  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006818  08006818  00016818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006820  08006820  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006820  08006820  00016820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006824  08006824  00016824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000074  0800689c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  0800689c  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e317  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa4  00000000  00000000  0002e3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00030360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  00030e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8f2  00000000  00000000  000318c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d58c  00000000  00000000  0004f1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8ff2  00000000  00000000  0005c73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115730  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003114  00000000  00000000  00115780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004f80 	.word	0x08004f80

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08004f80 	.word	0x08004f80

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b0ea      	sub	sp, #424	; 0x1a8
 80005d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f001 fdbb 	bl	8002154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f981 	bl	80008e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 fa63 	bl	8000aac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e6:	f000 fa15 	bl	8000a14 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005ea:	f000 f9c7 	bl	800097c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  send_debug_logs ( "\nStart the application." ) ;
 80005ee:	48a8      	ldr	r0, [pc, #672]	; (8000890 <main+0x2bc>)
 80005f0:	f000 fac0 	bl	8000b74 <send_debug_logs>
  reset_astronode () ;
 80005f4:	f000 faec 	bl	8000bd0 <reset_astronode>

  uint8_t cfg_fr[] = { 0x02 , 0x31 , 0x30 , 0x45 , 0x30 , 0x45 , 0x33 , 0x03 } ;
 80005f8:	4aa6      	ldr	r2, [pc, #664]	; (8000894 <main+0x2c0>)
 80005fa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80005fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000602:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t cfg_sa[100] ;
  uint8_t cfg_sa_expected[] = { 0x02 , 0x39 , 0x31 , 0x36 , 0x38 , 0x37 , 0x32 , 0x03 } ;
 8000606:	4aa4      	ldr	r2, [pc, #656]	; (8000898 <main+0x2c4>)
 8000608:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800060c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000610:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t cfg_rr[] = { 0x02 , 0x31 , 0x35 , 0x36 , 0x34 , 0x41 , 0x33 , 0x03 } ;
 8000614:	4aa1      	ldr	r2, [pc, #644]	; (800089c <main+0x2c8>)
 8000616:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800061a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t cfg_ra[100] ;
  uint8_t cfg_ra_expected[] = { 0x02 , 0x39 , 0x35 , 0x30 , 0x33 , 0x30 , 0x31 , 0x30 , 0x32 , 0x30 , 0x31 , 0x30 , 0x30 , 0x00 , 0x35 , 0x30 , 0x30 , 0x30 , 0x31 , 0x32 , 0x36 , 0x32 , 0x39 , 0x03 } ;
 8000622:	4b9f      	ldr	r3, [pc, #636]	; (80008a0 <main+0x2cc>)
 8000624:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000628:	461d      	mov	r5, r3
 800062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000632:	e884 0003 	stmia.w	r4, {r0, r1}

  astro_reset_state = HAL_GPIO_ReadPin ( GPIOA , ASTRO_RESET_Pin ) ;
 8000636:	2101      	movs	r1, #1
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f002 f882 	bl	8002744 <HAL_GPIO_ReadPin>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b97      	ldr	r3, [pc, #604]	; (80008a4 <main+0x2d0>)
 8000646:	701a      	strb	r2, [r3, #0]
  astro_event_state = HAL_GPIO_ReadPin ( ASTRO_EVENT_EXTI12_GPIO_Port , ASTRO_EVENT_EXTI12_Pin ) ;
 8000648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f002 f878 	bl	8002744 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	4b93      	ldr	r3, [pc, #588]	; (80008a8 <main+0x2d4>)
 800065a:	701a      	strb	r2, [r3, #0]
  HAL_Delay ( 1000 ) ;
 800065c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000660:	f001 fde8 	bl	8002234 <HAL_Delay>

  result = HAL_UART_Transmit ( HUART_ASTRO , cfg_fr , 8 , 1000 ) ;
 8000664:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8000668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066c:	2208      	movs	r2, #8
 800066e:	488f      	ldr	r0, [pc, #572]	; (80008ac <main+0x2d8>)
 8000670:	f003 f8b0 	bl	80037d4 <HAL_UART_Transmit>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b8d      	ldr	r3, [pc, #564]	; (80008b0 <main+0x2dc>)
 800067a:	701a      	strb	r2, [r3, #0]
  result = HAL_UART_Receive ( HUART_ASTRO , cfg_sa , 8 , 1000 ) ;
 800067c:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 8000680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000684:	2208      	movs	r2, #8
 8000686:	4889      	ldr	r0, [pc, #548]	; (80008ac <main+0x2d8>)
 8000688:	f003 f93a 	bl	8003900 <HAL_UART_Receive>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b87      	ldr	r3, [pc, #540]	; (80008b0 <main+0x2dc>)
 8000692:	701a      	strb	r2, [r3, #0]
  if ( strncmp( cfg_sa , cfg_sa_expected , sizeof ( cfg_sa_expected ) ) == 0 )
 8000694:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8000698:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800069c:	2208      	movs	r2, #8
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 f81a 	bl	80046d8 <strncmp>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d103      	bne.n	80006b2 <main+0xde>
  	send_debug_logs ( "cfg_sa ok." ) ;
 80006aa:	4882      	ldr	r0, [pc, #520]	; (80008b4 <main+0x2e0>)
 80006ac:	f000 fa62 	bl	8000b74 <send_debug_logs>
 80006b0:	e002      	b.n	80006b8 <main+0xe4>
  else
  	send_debug_logs ( "cfg_sa not ok." ) ;
 80006b2:	4881      	ldr	r0, [pc, #516]	; (80008b8 <main+0x2e4>)
 80006b4:	f000 fa5e 	bl	8000b74 <send_debug_logs>
  result = HAL_UART_Transmit ( HUART_ASTRO , cfg_fr , 8 , 1000 ) ;
 80006b8:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 80006bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c0:	2208      	movs	r2, #8
 80006c2:	487a      	ldr	r0, [pc, #488]	; (80008ac <main+0x2d8>)
 80006c4:	f003 f886 	bl	80037d4 <HAL_UART_Transmit>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b78      	ldr	r3, [pc, #480]	; (80008b0 <main+0x2dc>)
 80006ce:	701a      	strb	r2, [r3, #0]
  result = HAL_UART_Receive ( HUART_ASTRO , cfg_sa , 8 , 1000 ) ;
 80006d0:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 80006d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d8:	2208      	movs	r2, #8
 80006da:	4874      	ldr	r0, [pc, #464]	; (80008ac <main+0x2d8>)
 80006dc:	f003 f910 	bl	8003900 <HAL_UART_Receive>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b72      	ldr	r3, [pc, #456]	; (80008b0 <main+0x2dc>)
 80006e6:	701a      	strb	r2, [r3, #0]
  if ( strncmp( cfg_sa , cfg_sa_expected , sizeof ( cfg_sa_expected ) ) == 0 )
 80006e8:	f507 7192 	add.w	r1, r7, #292	; 0x124
 80006ec:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80006f0:	2208      	movs	r2, #8
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 fff0 	bl	80046d8 <strncmp>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d103      	bne.n	8000706 <main+0x132>
	send_debug_logs ( "cfg_sa ok." ) ;
 80006fe:	486d      	ldr	r0, [pc, #436]	; (80008b4 <main+0x2e0>)
 8000700:	f000 fa38 	bl	8000b74 <send_debug_logs>
 8000704:	e002      	b.n	800070c <main+0x138>
  else
	send_debug_logs ( "cfg_sa not ok." ) ;
 8000706:	486c      	ldr	r0, [pc, #432]	; (80008b8 <main+0x2e4>)
 8000708:	f000 fa34 	bl	8000b74 <send_debug_logs>
  result = HAL_UART_Transmit ( HUART_ASTRO , cfg_rr , 8 , 1000 ) ;
 800070c:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8000710:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000714:	2208      	movs	r2, #8
 8000716:	4865      	ldr	r0, [pc, #404]	; (80008ac <main+0x2d8>)
 8000718:	f003 f85c 	bl	80037d4 <HAL_UART_Transmit>
 800071c:	4603      	mov	r3, r0
 800071e:	461a      	mov	r2, r3
 8000720:	4b63      	ldr	r3, [pc, #396]	; (80008b0 <main+0x2dc>)
 8000722:	701a      	strb	r2, [r3, #0]
  result = HAL_UART_Receive ( HUART_ASTRO , cfg_ra , 24 , 1000 ) ;
 8000724:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8000728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072c:	2218      	movs	r2, #24
 800072e:	485f      	ldr	r0, [pc, #380]	; (80008ac <main+0x2d8>)
 8000730:	f003 f8e6 	bl	8003900 <HAL_UART_Receive>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	4b5d      	ldr	r3, [pc, #372]	; (80008b0 <main+0x2dc>)
 800073a:	701a      	strb	r2, [r3, #0]
  if ( strncmp( cfg_ra , cfg_ra_expected , sizeof ( cfg_ra_expected ) ) == 0 )
 800073c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000740:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000744:	2218      	movs	r2, #24
 8000746:	4618      	mov	r0, r3
 8000748:	f003 ffc6 	bl	80046d8 <strncmp>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d103      	bne.n	800075a <main+0x186>
    send_debug_logs ( "cfg_ra ok." ) ;
 8000752:	485a      	ldr	r0, [pc, #360]	; (80008bc <main+0x2e8>)
 8000754:	f000 fa0e 	bl	8000b74 <send_debug_logs>
 8000758:	e002      	b.n	8000760 <main+0x18c>
  else
    send_debug_logs ( "cfg_ra not ok." ) ;
 800075a:	4859      	ldr	r0, [pc, #356]	; (80008c0 <main+0x2ec>)
 800075c:	f000 fa0a 	bl	8000b74 <send_debug_logs>
  //result = HAL_UART_Transmit ( HUART_ASTRO , cfg_read_request , 8 , 1000 ) ;
  //result = HAL_UART_Receive ( HUART_ASTRO , cfg , 24 , 1000 ) ;


  print_housekeeping_timer = get_systick () ;
 8000760:	f000 fa68 	bl	8000c34 <get_systick>
 8000764:	4603      	mov	r3, r0
 8000766:	4a57      	ldr	r2, [pc, #348]	; (80008c4 <main+0x2f0>)
 8000768:	6013      	str	r3, [r2, #0]
  // application cfg
  //astronode_send_cfg_wr ( true , false , true , false , true , true , true , false ) ;
  //default cfg
  //astronode_send_cfg_wr ( true , false , true, false , true , false , true , false ) ;
  //test
  HAL_Delay ( 1000 ) ;
 800076a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076e:	f001 fd61 	bl	8002234 <HAL_Delay>
  astronode_send_cfg_wr ( true , false , true , false , true , true , true , false ) ;
 8000772:	2300      	movs	r3, #0
 8000774:	9303      	str	r3, [sp, #12]
 8000776:	2301      	movs	r3, #1
 8000778:	9302      	str	r3, [sp, #8]
 800077a:	2301      	movs	r3, #1
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	2301      	movs	r3, #1
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2300      	movs	r3, #0
 8000784:	2201      	movs	r2, #1
 8000786:	2100      	movs	r1, #0
 8000788:	2001      	movs	r0, #1
 800078a:	f000 fc3f 	bl	800100c <astronode_send_cfg_wr>
  astronode_send_cfg_wr ( true , false , true , false , true , true , true , false ) ;
 800078e:	2300      	movs	r3, #0
 8000790:	9303      	str	r3, [sp, #12]
 8000792:	2301      	movs	r3, #1
 8000794:	9302      	str	r3, [sp, #8]
 8000796:	2301      	movs	r3, #1
 8000798:	9301      	str	r3, [sp, #4]
 800079a:	2301      	movs	r3, #1
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	2300      	movs	r3, #0
 80007a0:	2201      	movs	r2, #1
 80007a2:	2100      	movs	r1, #0
 80007a4:	2001      	movs	r0, #1
 80007a6:	f000 fc31 	bl	800100c <astronode_send_cfg_wr>
  astronode_send_cfg_sr () ;
 80007aa:	f000 fbf9 	bl	8000fa0 <astronode_send_cfg_sr>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (is_evt_pin_high())
 80007ae:	f000 fa73 	bl	8000c98 <is_evt_pin_high>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d029      	beq.n	800080c <main+0x238>
	  {
		  send_debug_logs("Evt pin is high.");
 80007b8:	4843      	ldr	r0, [pc, #268]	; (80008c8 <main+0x2f4>)
 80007ba:	f000 f9db 	bl	8000b74 <send_debug_logs>
		  astronode_send_evt_rr();
 80007be:	f000 fcb9 	bl	8001134 <astronode_send_evt_rr>
		  if (is_sak_available())
 80007c2:	f001 f901 	bl	80019c8 <is_sak_available>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d008      	beq.n	80007de <main+0x20a>
		  {
			  astronode_send_sak_rr();
 80007cc:	f000 fdf6 	bl	80013bc <astronode_send_sak_rr>
			  astronode_send_sak_cr();
 80007d0:	f000 fe46 	bl	8001460 <astronode_send_sak_cr>
			  send_debug_logs("Message has been acknowledged.");
 80007d4:	483d      	ldr	r0, [pc, #244]	; (80008cc <main+0x2f8>)
 80007d6:	f000 f9cd 	bl	8000b74 <send_debug_logs>
			  astronode_send_per_rr();
 80007da:	f000 febb 	bl	8001554 <astronode_send_per_rr>
		  }
		  if (is_astronode_reset())
 80007de:	f001 f8ff 	bl	80019e0 <is_astronode_reset>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d004      	beq.n	80007f2 <main+0x21e>
		  {
			  send_debug_logs("Terminal has been reset.");
 80007e8:	4839      	ldr	r0, [pc, #228]	; (80008d0 <main+0x2fc>)
 80007ea:	f000 f9c3 	bl	8000b74 <send_debug_logs>
			  astronode_send_res_cr();
 80007ee:	f000 fda7 	bl	8001340 <astronode_send_res_cr>
		  }
		  if (is_command_available())
 80007f2:	f001 f901 	bl	80019f8 <is_command_available>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d036      	beq.n	800086a <main+0x296>
		  {
			  send_debug_logs("Unicast command is available");
 80007fc:	4835      	ldr	r0, [pc, #212]	; (80008d4 <main+0x300>)
 80007fe:	f000 f9b9 	bl	8000b74 <send_debug_logs>
			  astronode_send_cmd_rr();
 8000802:	f000 ffe3 	bl	80017cc <astronode_send_cmd_rr>
			  astronode_send_cmd_cr();
 8000806:	f000 ffa3 	bl	8001750 <astronode_send_cmd_cr>
 800080a:	e02e      	b.n	800086a <main+0x296>
		  }
	  }
	  else if ( is_message_available () )
 800080c:	f000 fa54 	bl	8000cb8 <is_message_available>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d029      	beq.n	800086a <main+0x296>
	  {
		  send_debug_logs ( "The button is pressed." ) ;
 8000816:	4830      	ldr	r0, [pc, #192]	; (80008d8 <main+0x304>)
 8000818:	f000 f9ac 	bl	8000b74 <send_debug_logs>

		  g_payload_id_counter++;
 800081c:	4b2f      	ldr	r3, [pc, #188]	; (80008dc <main+0x308>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	b29a      	uxth	r2, r3
 8000824:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <main+0x308>)
 8000826:	801a      	strh	r2, [r3, #0]
		  char payload[ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES] = {0};
 8000828:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800082c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	3304      	adds	r3, #4
 8000836:	229c      	movs	r2, #156	; 0x9c
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f003 fef0 	bl	8004620 <memset>

		  sprintf ( payload , "Test message %d" , g_payload_id_counter ) ;
 8000840:	4b26      	ldr	r3, [pc, #152]	; (80008dc <main+0x308>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	463b      	mov	r3, r7
 8000848:	4925      	ldr	r1, [pc, #148]	; (80008e0 <main+0x30c>)
 800084a:	4618      	mov	r0, r3
 800084c:	f003 ff24 	bl	8004698 <siprintf>

		  astronode_send_pld_er ( g_payload_id_counter , payload , strlen ( payload ) ) ;
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <main+0x308>)
 8000852:	881c      	ldrh	r4, [r3, #0]
 8000854:	463b      	mov	r3, r7
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fce2 	bl	8000220 <strlen>
 800085c:	4603      	mov	r3, r0
 800085e:	b29a      	uxth	r2, r3
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4620      	mov	r0, r4
 8000866:	f000 fcdf 	bl	8001228 <astronode_send_pld_er>
	  }

	  if ( get_systick () - print_housekeeping_timer > 60000)
 800086a:	f000 f9e3 	bl	8000c34 <get_systick>
 800086e:	4602      	mov	r2, r0
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <main+0x2f0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	f64e 2260 	movw	r2, #60000	; 0xea60
 800087a:	4293      	cmp	r3, r2
 800087c:	d997      	bls.n	80007ae <main+0x1da>
	  {
		  astronode_send_per_rr () ;
 800087e:	f000 fe69 	bl	8001554 <astronode_send_per_rr>
		  print_housekeeping_timer = get_systick () ;
 8000882:	f000 f9d7 	bl	8000c34 <get_systick>
 8000886:	4603      	mov	r3, r0
 8000888:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <main+0x2f0>)
 800088a:	6013      	str	r3, [r2, #0]
	  if (is_evt_pin_high())
 800088c:	e78f      	b.n	80007ae <main+0x1da>
 800088e:	bf00      	nop
 8000890:	08004f98 	.word	0x08004f98
 8000894:	08005080 	.word	0x08005080
 8000898:	08005088 	.word	0x08005088
 800089c:	08005090 	.word	0x08005090
 80008a0:	08005098 	.word	0x08005098
 80008a4:	20000001 	.word	0x20000001
 80008a8:	20000002 	.word	0x20000002
 80008ac:	20000090 	.word	0x20000090
 80008b0:	20000000 	.word	0x20000000
 80008b4:	08004fb0 	.word	0x08004fb0
 80008b8:	08004fbc 	.word	0x08004fbc
 80008bc:	08004fcc 	.word	0x08004fcc
 80008c0:	08004fd8 	.word	0x08004fd8
 80008c4:	200001b4 	.word	0x200001b4
 80008c8:	08004fe8 	.word	0x08004fe8
 80008cc:	08004ffc 	.word	0x08004ffc
 80008d0:	0800501c 	.word	0x0800501c
 80008d4:	08005038 	.word	0x08005038
 80008d8:	08005058 	.word	0x08005058
 80008dc:	200001b0 	.word	0x200001b0
 80008e0:	08005070 	.word	0x08005070

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b094      	sub	sp, #80	; 0x50
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	2238      	movs	r2, #56	; 0x38
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 fe94 	bl	8004620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000906:	2000      	movs	r0, #0
 8000908:	f001 ff4c 	bl	80027a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090c:	2302      	movs	r3, #2
 800090e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000916:	2340      	movs	r3, #64	; 0x40
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800091e:	2302      	movs	r3, #2
 8000920:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000922:	2304      	movs	r3, #4
 8000924:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000926:	2355      	movs	r3, #85	; 0x55
 8000928:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800092a:	2302      	movs	r3, #2
 800092c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800092e:	2302      	movs	r3, #2
 8000930:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000932:	2302      	movs	r3, #2
 8000934:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000936:	f107 0318 	add.w	r3, r7, #24
 800093a:	4618      	mov	r0, r3
 800093c:	f001 ffd6 	bl	80028ec <HAL_RCC_OscConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000946:	f000 f9cd 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094a:	230f      	movs	r3, #15
 800094c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094e:	2303      	movs	r3, #3
 8000950:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2104      	movs	r1, #4
 8000962:	4618      	mov	r0, r3
 8000964:	f002 fada 	bl	8002f1c <HAL_RCC_ClockConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800096e:	f000 f9b9 	bl	8000ce4 <Error_Handler>
  }
}
 8000972:	bf00      	nop
 8000974:	3750      	adds	r7, #80	; 0x50
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 8000982:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <MX_USART1_UART_Init+0x94>)
 8000984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 8000988:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800098c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009c6:	f002 feb5 	bl	8003734 <HAL_UART_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009d0:	f000 f988 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009d8:	f003 fd20 	bl	800441c <HAL_UARTEx_SetTxFifoThreshold>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009e2:	f000 f97f 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009ea:	f003 fd55 	bl	8004498 <HAL_UARTEx_SetRxFifoThreshold>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009f4:	f000 f976 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009fa:	f003 fcd6 	bl	80043aa <HAL_UARTEx_DisableFifoMode>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a04:	f000 f96e 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000090 	.word	0x20000090
 8000a10:	40013800 	.word	0x40013800

08000a14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a1a:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <MX_USART2_UART_Init+0x94>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5c:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a5e:	f002 fe69 	bl	8003734 <HAL_UART_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a68:	f000 f93c 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a70:	f003 fcd4 	bl	800441c <HAL_UARTEx_SetTxFifoThreshold>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a7a:	f000 f933 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a82:	f003 fd09 	bl	8004498 <HAL_UARTEx_SetRxFifoThreshold>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a8c:	f000 f92a 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_USART2_UART_Init+0x90>)
 8000a92:	f003 fc8a 	bl	80043aa <HAL_UARTEx_DisableFifoMode>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a9c:	f000 f922 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000120 	.word	0x20000120
 8000aa8:	40004400 	.word	0x40004400

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <MX_GPIO_Init+0xc0>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4a29      	ldr	r2, [pc, #164]	; (8000b6c <MX_GPIO_Init+0xc0>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <MX_GPIO_Init+0xc0>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <MX_GPIO_Init+0xc0>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	4a23      	ldr	r2, [pc, #140]	; (8000b6c <MX_GPIO_Init+0xc0>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_GPIO_Init+0xc0>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ASTRO_RESET_Pin|ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2103      	movs	r1, #3
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f001 fe3b 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b04:	481a      	ldr	r0, [pc, #104]	; (8000b70 <MX_GPIO_Init+0xc4>)
 8000b06:	f001 fe35 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ASTRO_RESET_Pin ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = ASTRO_RESET_Pin|ASTRO_WAKEUP_Pin;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b24:	f001 fc8c 	bl	8002440 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVENT_EXTI12_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVENT_EXTI12_Pin;
 8000b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ASTRO_EVENT_EXTI12_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f001 fc7d 	bl	8002440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4804      	ldr	r0, [pc, #16]	; (8000b70 <MX_GPIO_Init+0xc4>)
 8000b60:	f001 fc6e 	bl	8002440 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	48000400 	.word	0x48000400

08000b74 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fb4f 	bl	8000220 <strlen>
 8000b82:	60f8      	str	r0, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2bfa      	cmp	r3, #250	; 0xfa
 8000b88:	d908      	bls.n	8000b9c <send_debug_logs+0x28>
    {
        HAL_UART_Transmit ( HUART_USB , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8000b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8e:	222a      	movs	r2, #42	; 0x2a
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <send_debug_logs+0x50>)
 8000b92:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <send_debug_logs+0x54>)
 8000b94:	f002 fe1e 	bl	80037d4 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8000b98:	23fa      	movs	r3, #250	; 0xfa
 8000b9a:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_USB , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <send_debug_logs+0x54>)
 8000ba8:	f002 fe14 	bl	80037d4 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_USB , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8000bac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4906      	ldr	r1, [pc, #24]	; (8000bcc <send_debug_logs+0x58>)
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <send_debug_logs+0x54>)
 8000bb6:	f002 fe0d 	bl	80037d4 <HAL_UART_Transmit>
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	080050b0 	.word	0x080050b0
 8000bc8:	20000120 	.word	0x20000120
 8000bcc:	080050dc 	.word	0x080050dc

08000bd0 <reset_astronode>:
void reset_astronode ( void )
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RESET_GPIO_Port , ASTRO_RESET_Pin , GPIO_PIN_SET ) ;
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bdc:	f001 fdca 	bl	8002774 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8000be0:	2001      	movs	r0, #1
 8000be2:	f001 fb27 	bl	8002234 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RESET_GPIO_Port , ASTRO_RESET_Pin , GPIO_PIN_RESET ) ;
 8000be6:	2200      	movs	r2, #0
 8000be8:	2101      	movs	r1, #1
 8000bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bee:	f001 fdc1 	bl	8002774 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8000bf2:	20fa      	movs	r0, #250	; 0xfa
 8000bf4:	f001 fb1e 	bl	8002234 <HAL_Delay>
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8000c06:	4809      	ldr	r0, [pc, #36]	; (8000c2c <send_astronode_request+0x30>)
 8000c08:	f7ff ffb4 	bl	8000b74 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ffb1 	bl	8000b74 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <send_astronode_request+0x34>)
 8000c1e:	f002 fdd9 	bl	80037d4 <HAL_UART_Transmit>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	080050e0 	.word	0x080050e0
 8000c30:	20000090 	.word	0x20000090

08000c34 <get_systick>:
uint32_t get_systick ( void )
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8000c38:	f001 faf0 	bl	800221c <HAL_GetTick>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	807b      	strh	r3, [r7, #2]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8000c4e:	f7ff fff1 	bl	8000c34 <get_systick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	1ad2      	subs	r2, r2, r3
 8000c58:	887b      	ldrh	r3, [r7, #2]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	bf8c      	ite	hi
 8000c5e:	2301      	movhi	r3, #1
 8000c60:	2300      	movls	r3, #0
 8000c62:	b2db      	uxtb	r3, r3
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8000c74:	2364      	movs	r3, #100	; 0x64
 8000c76:	2201      	movs	r2, #1
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <is_astronode_character_received+0x28>)
 8000c7c:	f002 fe40 	bl	8003900 <HAL_UART_Receive>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	bf0c      	ite	eq
 8000c86:	2301      	moveq	r3, #1
 8000c88:	2300      	movne	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000090 	.word	0x20000090

08000c98 <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
    return ( HAL_GPIO_ReadPin ( ASTRO_EVENT_EXTI12_GPIO_Port , ASTRO_EVENT_EXTI12_Pin ) == GPIO_PIN_SET ? true : false ) ;
 8000c9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f001 fd4e 	bl	8002744 <HAL_GPIO_ReadPin>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	bf0c      	ite	eq
 8000cae:	2301      	moveq	r3, #1
 8000cb0:	2300      	movne	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <is_message_available>:
bool is_message_available ( void )
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
    if ( g_number_of_message_to_send > 0 )
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <is_message_available+0x28>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d007      	beq.n	8000cd4 <is_message_available+0x1c>
    {
        g_number_of_message_to_send--;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <is_message_available+0x28>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <is_message_available+0x28>)
 8000cce:	701a      	strb	r2, [r3, #0]
        return true;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e000      	b.n	8000cd6 <is_message_available+0x1e>
    }
    else
    {
        return false;
 8000cd4:	2300      	movs	r3, #0
    }
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	200001b2 	.word	0x200001b2

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cec:	e7fe      	b.n	8000cec <Error_Handler+0x8>
	...

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_MspInit+0x44>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <HAL_MspInit+0x44>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6613      	str	r3, [r2, #96]	; 0x60
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_MspInit+0x44>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_MspInit+0x44>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d12:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <HAL_MspInit+0x44>)
 8000d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d18:	6593      	str	r3, [r2, #88]	; 0x58
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_MspInit+0x44>)
 8000d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b09c      	sub	sp, #112	; 0x70
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d50:	f107 0318 	add.w	r3, r7, #24
 8000d54:	2244      	movs	r2, #68	; 0x44
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f003 fc61 	bl	8004620 <memset>
  if(huart->Instance==USART1)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a3e      	ldr	r2, [pc, #248]	; (8000e5c <HAL_UART_MspInit+0x124>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d138      	bne.n	8000dda <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d70:	f107 0318 	add.w	r3, r7, #24
 8000d74:	4618      	mov	r0, r3
 8000d76:	f002 faed 	bl	8003354 <HAL_RCCEx_PeriphCLKConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d80:	f7ff ffb0 	bl	8000ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d84:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <HAL_UART_MspInit+0x128>)
 8000d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d88:	4a35      	ldr	r2, [pc, #212]	; (8000e60 <HAL_UART_MspInit+0x128>)
 8000d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8e:	6613      	str	r3, [r2, #96]	; 0x60
 8000d90:	4b33      	ldr	r3, [pc, #204]	; (8000e60 <HAL_UART_MspInit+0x128>)
 8000d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b30      	ldr	r3, [pc, #192]	; (8000e60 <HAL_UART_MspInit+0x128>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da0:	4a2f      	ldr	r2, [pc, #188]	; (8000e60 <HAL_UART_MspInit+0x128>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da8:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <HAL_UART_MspInit+0x128>)
 8000daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000db4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000db8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f001 fb34 	bl	8002440 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dd8:	e03b      	b.n	8000e52 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <HAL_UART_MspInit+0x12c>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d136      	bne.n	8000e52 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dec:	f107 0318 	add.w	r3, r7, #24
 8000df0:	4618      	mov	r0, r3
 8000df2:	f002 faaf 	bl	8003354 <HAL_RCCEx_PeriphCLKConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000dfc:	f7ff ff72 	bl	8000ce4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_UART_MspInit+0x128>)
 8000e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e04:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <HAL_UART_MspInit+0x128>)
 8000e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_UART_MspInit+0x128>)
 8000e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_UART_MspInit+0x128>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1c:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <HAL_UART_MspInit+0x128>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_UART_MspInit+0x128>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000e30:	230c      	movs	r3, #12
 8000e32:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e40:	2307      	movs	r3, #7
 8000e42:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4e:	f001 faf7 	bl	8002440 <HAL_GPIO_Init>
}
 8000e52:	bf00      	nop
 8000e54:	3770      	adds	r7, #112	; 0x70
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40013800 	.word	0x40013800
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40004400 	.word	0x40004400

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <NMI_Handler+0x4>

08000e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb4:	f001 f9a0 	bl	80021f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f003 fb60 	bl	80045b0 <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20008000 	.word	0x20008000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	200001b8 	.word	0x200001b8
 8000f24:	200001d8 	.word	0x200001d8

08000f28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <LoopForever+0xe>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f68:	4c0b      	ldr	r4, [pc, #44]	; (8000f98 <LoopForever+0x16>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f76:	f7ff ffd7 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f003 fb1f 	bl	80045bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7e:	f7ff fb29 	bl	80005d4 <main>

08000f82 <LoopForever>:

LoopForever:
    b LoopForever
 8000f82:	e7fe      	b.n	8000f82 <LoopForever>
  ldr   r0, =_estack
 8000f84:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f90:	08006828 	.word	0x08006828
  ldr r2, =_sbss
 8000f94:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f98:	200001d4 	.word	0x200001d4

08000f9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC1_2_IRQHandler>
	...

08000fa0 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b0e4      	sub	sp, #400	; 0x190
 8000fa4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000fa6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000faa:	22c6      	movs	r2, #198	; 0xc6
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 fb36 	bl	8004620 <memset>
    astronode_app_msg_t answer = {0};
 8000fb4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000fb8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	23c6      	movs	r3, #198	; 0xc6
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	f003 fb2c 	bl	8004620 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    astronode_transport_send_receive(&request, &answer);
 8000fce:	463a      	mov	r2, r7
 8000fd0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fefa 	bl	8001dd0 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8000fdc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000fe0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b90      	cmp	r3, #144	; 0x90
 8000fe8:	d103      	bne.n	8000ff2 <astronode_send_cfg_sr+0x52>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <astronode_send_cfg_sr+0x64>)
 8000fec:	f7ff fdc2 	bl	8000b74 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8000ff0:	e002      	b.n	8000ff8 <astronode_send_cfg_sr+0x58>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <astronode_send_cfg_sr+0x68>)
 8000ff4:	f7ff fdbe 	bl	8000b74 <send_debug_logs>
}
 8000ff8:	bf00      	nop
 8000ffa:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	08005514 	.word	0x08005514
 8001008:	08005548 	.word	0x08005548

0800100c <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 800100c:	b5b0      	push	{r4, r5, r7, lr}
 800100e:	b0e6      	sub	sp, #408	; 0x198
 8001010:	af00      	add	r7, sp, #0
 8001012:	4605      	mov	r5, r0
 8001014:	460c      	mov	r4, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800101e:	f2a3 1391 	subw	r3, r3, #401	; 0x191
 8001022:	462a      	mov	r2, r5
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800102a:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 800102e:	4622      	mov	r2, r4
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001036:	f2a3 1393 	subw	r3, r3, #403	; 0x193
 800103a:	4602      	mov	r2, r0
 800103c:	701a      	strb	r2, [r3, #0]
 800103e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001042:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001046:	460a      	mov	r2, r1
 8001048:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 800104a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800104e:	22c6      	movs	r2, #198	; 0xc6
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f003 fae4 	bl	8004620 <memset>
    astronode_app_msg_t answer = {0};
 8001058:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800105c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001060:	4618      	mov	r0, r3
 8001062:	23c6      	movs	r3, #198	; 0xc6
 8001064:	461a      	mov	r2, r3
 8001066:	2100      	movs	r1, #0
 8001068:	f003 fada 	bl	8004620 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 800106c:	2305      	movs	r3, #5
 800106e:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8001072:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001076:	f2a3 1391 	subw	r3, r3, #401	; 0x191
 800107a:	f993 2000 	ldrsb.w	r2, [r3]
 800107e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001082:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	b25b      	sxtb	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8001090:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001094:	f2a3 1393 	subw	r3, r3, #403	; 0x193
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	b25b      	sxtb	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 80010a2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80010a6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	b2db      	uxtb	r3, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 80010b6:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 80010ba:	f997 21a8 	ldrsb.w	r2, [r7, #424]	; 0x1a8
 80010be:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 80010ca:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 80010d6:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 80010e4:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

    request.payload_len = 3;
 80010e8:	2303      	movs	r3, #3
 80010ea:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80010ee:	f107 0208 	add.w	r2, r7, #8
 80010f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fe69 	bl	8001dd0 <astronode_transport_send_receive>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b01      	cmp	r3, #1
 8001102:	d10d      	bne.n	8001120 <astronode_send_cfg_wr+0x114>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8001104:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001108:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b85      	cmp	r3, #133	; 0x85
 8001110:	d103      	bne.n	800111a <astronode_send_cfg_wr+0x10e>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <astronode_send_cfg_wr+0x120>)
 8001114:	f7ff fd2e 	bl	8000b74 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
        }
    }
}
 8001118:	e002      	b.n	8001120 <astronode_send_cfg_wr+0x114>
            send_debug_logs("Failed to set the Astronode configuration.");
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <astronode_send_cfg_wr+0x124>)
 800111c:	f7ff fd2a 	bl	8000b74 <send_debug_logs>
}
 8001120:	bf00      	nop
 8001122:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8001126:	46bd      	mov	sp, r7
 8001128:	bdb0      	pop	{r4, r5, r7, pc}
 800112a:	bf00      	nop
 800112c:	0800557c 	.word	0x0800557c
 8001130:	080055a8 	.word	0x080055a8

08001134 <astronode_send_evt_rr>:
        }
    }
}

void astronode_send_evt_rr(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0e4      	sub	sp, #400	; 0x190
 8001138:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800113a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800113e:	22c6      	movs	r2, #198	; 0xc6
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f003 fa6c 	bl	8004620 <memset>
    astronode_app_msg_t answer = {0};
 8001148:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800114c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001150:	4618      	mov	r0, r3
 8001152:	23c6      	movs	r3, #198	; 0xc6
 8001154:	461a      	mov	r2, r3
 8001156:	2100      	movs	r1, #0
 8001158:	f003 fa62 	bl	8004620 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 800115c:	2365      	movs	r3, #101	; 0x65
 800115e:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8001162:	463a      	mov	r2, r7
 8001164:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fe30 	bl	8001dd0 <astronode_transport_send_receive>
 8001170:	4603      	mov	r3, r0
 8001172:	2b01      	cmp	r3, #1
 8001174:	d142      	bne.n	80011fc <astronode_send_evt_rr+0xc8>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8001176:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800117a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2be5      	cmp	r3, #229	; 0xe5
 8001182:	d13b      	bne.n	80011fc <astronode_send_evt_rr+0xc8>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8001184:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001188:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800118c:	785b      	ldrb	r3, [r3, #1]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d005      	beq.n	80011a2 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <astronode_send_evt_rr+0xd4>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 800119c:	481b      	ldr	r0, [pc, #108]	; (800120c <astronode_send_evt_rr+0xd8>)
 800119e:	f7ff fce9 	bl	8000b74 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 80011a2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80011a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80011aa:	785b      	ldrb	r3, [r3, #1]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <astronode_send_evt_rr+0x8c>
            {
                g_is_astronode_reset = true;
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <astronode_send_evt_rr+0xdc>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 80011ba:	4816      	ldr	r0, [pc, #88]	; (8001214 <astronode_send_evt_rr+0xe0>)
 80011bc:	f7ff fcda 	bl	8000b74 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 80011c0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80011c4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80011c8:	785b      	ldrb	r3, [r3, #1]
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d005      	beq.n	80011de <astronode_send_evt_rr+0xaa>
            {
                g_is_command_available = true;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <astronode_send_evt_rr+0xe4>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 80011d8:	4810      	ldr	r0, [pc, #64]	; (800121c <astronode_send_evt_rr+0xe8>)
 80011da:	f7ff fccb 	bl	8000b74 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 80011de:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80011e2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80011e6:	785b      	ldrb	r3, [r3, #1]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <astronode_send_evt_rr+0xc8>
            {
                g_is_tx_msg_pending = true;
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <astronode_send_evt_rr+0xec>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 80011f6:	480b      	ldr	r0, [pc, #44]	; (8001224 <astronode_send_evt_rr+0xf0>)
 80011f8:	f7ff fcbc 	bl	8000b74 <send_debug_logs>
            }

        }
    }
}
 80011fc:	bf00      	nop
 80011fe:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200001bc 	.word	0x200001bc
 800120c:	08005728 	.word	0x08005728
 8001210:	200001bd 	.word	0x200001bd
 8001214:	0800574c 	.word	0x0800574c
 8001218:	200001be 	.word	0x200001be
 800121c:	08005764 	.word	0x08005764
 8001220:	200001bf 	.word	0x200001bf
 8001224:	08005778 	.word	0x08005778

08001228 <astronode_send_pld_er>:
        }
    }
}

void astronode_send_pld_er(uint16_t payload_id, char *p_payload, uint16_t payload_length)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b0e6      	sub	sp, #408	; 0x198
 800122c:	af00      	add	r7, sp, #0
 800122e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001232:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001236:	6019      	str	r1, [r3, #0]
 8001238:	4611      	mov	r1, r2
 800123a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800123e:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 8001242:	4602      	mov	r2, r0
 8001244:	801a      	strh	r2, [r3, #0]
 8001246:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800124a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800124e:	460a      	mov	r2, r1
 8001250:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8001252:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001256:	22c6      	movs	r2, #198	; 0xc6
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f003 f9e0 	bl	8004620 <memset>
    astronode_app_msg_t answer = {0};
 8001260:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001264:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001268:	4618      	mov	r0, r3
 800126a:	23c6      	movs	r3, #198	; 0xc6
 800126c:	461a      	mov	r2, r3
 800126e:	2100      	movs	r1, #0
 8001270:	f003 f9d6 	bl	8004620 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 8001274:	2325      	movs	r3, #37	; 0x25
 8001276:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 800127a:	f8b7 3194 	ldrh.w	r3, [r7, #404]	; 0x194
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	b292      	uxth	r2, r2
 8001282:	f8a7 2194 	strh.w	r2, [r7, #404]	; 0x194
 8001286:	4619      	mov	r1, r3
 8001288:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800128c:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	f501 73cc 	add.w	r3, r1, #408	; 0x198
 8001298:	443b      	add	r3, r7
 800129a:	f803 2cc7 	strb.w	r2, [r3, #-199]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 800129e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80012a2:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	f8b7 3194 	ldrh.w	r3, [r7, #404]	; 0x194
 80012b0:	1c59      	adds	r1, r3, #1
 80012b2:	b289      	uxth	r1, r1
 80012b4:	f8a7 1194 	strh.w	r1, [r7, #404]	; 0x194
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80012be:	443b      	add	r3, r7
 80012c0:	f803 2cc7 	strb.w	r2, [r3, #-199]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 80012c4:	f8b7 3194 	ldrh.w	r3, [r7, #404]	; 0x194
 80012c8:	461a      	mov	r2, r3
 80012ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80012ce:	4413      	add	r3, r2
 80012d0:	1c58      	adds	r0, r3, #1
 80012d2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80012d6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80012da:	881a      	ldrh	r2, [r3, #0]
 80012dc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80012e0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80012e4:	6819      	ldr	r1, [r3, #0]
 80012e6:	f003 f98d 	bl	8004604 <memcpy>
    request.payload_len = 2 + payload_length;
 80012ea:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80012ee:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	3302      	adds	r3, #2
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80012fc:	f107 0208 	add.w	r2, r7, #8
 8001300:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fd62 	bl	8001dd0 <astronode_transport_send_receive>
 800130c:	4603      	mov	r3, r0
 800130e:	2b01      	cmp	r3, #1
 8001310:	d10d      	bne.n	800132e <astronode_send_pld_er+0x106>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8001312:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001316:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2ba5      	cmp	r3, #165	; 0xa5
 800131e:	d103      	bne.n	8001328 <astronode_send_pld_er+0x100>
        {
            send_debug_logs("Payload was successfully queued.");
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <astronode_send_pld_er+0x110>)
 8001322:	f7ff fc27 	bl	8000b74 <send_debug_logs>
        else
        {
            send_debug_logs("Payload failed to be queued.");
        }
    }
}
 8001326:	e002      	b.n	800132e <astronode_send_pld_er+0x106>
            send_debug_logs("Payload failed to be queued.");
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <astronode_send_pld_er+0x114>)
 800132a:	f7ff fc23 	bl	8000b74 <send_debug_logs>
}
 800132e:	bf00      	nop
 8001330:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	08005830 	.word	0x08005830
 800133c:	08005854 	.word	0x08005854

08001340 <astronode_send_res_cr>:
        }
    }
}

void astronode_send_res_cr(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0e4      	sub	sp, #400	; 0x190
 8001344:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8001346:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800134a:	22c6      	movs	r2, #198	; 0xc6
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f003 f966 	bl	8004620 <memset>
    astronode_app_msg_t answer = {0};
 8001354:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001358:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800135c:	4618      	mov	r0, r3
 800135e:	23c6      	movs	r3, #198	; 0xc6
 8001360:	461a      	mov	r2, r3
 8001362:	2100      	movs	r1, #0
 8001364:	f003 f95c 	bl	8004620 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8001368:	2355      	movs	r3, #85	; 0x55
 800136a:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800136e:	463a      	mov	r2, r7
 8001370:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fd2a 	bl	8001dd0 <astronode_transport_send_receive>
 800137c:	4603      	mov	r3, r0
 800137e:	2b01      	cmp	r3, #1
 8001380:	d110      	bne.n	80013a4 <astronode_send_res_cr+0x64>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8001382:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001386:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2bd5      	cmp	r3, #213	; 0xd5
 800138e:	d106      	bne.n	800139e <astronode_send_res_cr+0x5e>
        {
            g_is_astronode_reset = false;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <astronode_send_res_cr+0x70>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The reset has been cleared.");
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <astronode_send_res_cr+0x74>)
 8001398:	f7ff fbec 	bl	8000b74 <send_debug_logs>
        else
        {
            send_debug_logs("No reset to clear.");
        }
    }
}
 800139c:	e002      	b.n	80013a4 <astronode_send_res_cr+0x64>
            send_debug_logs("No reset to clear.");
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <astronode_send_res_cr+0x78>)
 80013a0:	f7ff fbe8 	bl	8000b74 <send_debug_logs>
}
 80013a4:	bf00      	nop
 80013a6:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200001bd 	.word	0x200001bd
 80013b4:	080058c0 	.word	0x080058c0
 80013b8:	080058dc 	.word	0x080058dc

080013bc <astronode_send_sak_rr>:
        }
    }
}

void astronode_send_sak_rr(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b0f8      	sub	sp, #480	; 0x1e0
 80013c0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80013c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013c6:	22c6      	movs	r2, #198	; 0xc6
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 f928 	bl	8004620 <memset>
    astronode_app_msg_t answer = {0};
 80013d0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80013d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80013d8:	4618      	mov	r0, r3
 80013da:	23c6      	movs	r3, #198	; 0xc6
 80013dc:	461a      	mov	r2, r3
 80013de:	2100      	movs	r1, #0
 80013e0:	f003 f91e 	bl	8004620 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 80013e4:	2345      	movs	r3, #69	; 0x45
 80013e6:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80013ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80013ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fceb 	bl	8001dd0 <astronode_transport_send_receive>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d126      	bne.n	800144e <astronode_send_sak_rr+0x92>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8001400:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001404:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2bc5      	cmp	r3, #197	; 0xc5
 800140c:	d11c      	bne.n	8001448 <astronode_send_sak_rr+0x8c>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 800140e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001412:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001416:	785b      	ldrb	r3, [r3, #1]
 8001418:	b29a      	uxth	r2, r3
 800141a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800141e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001422:	789b      	ldrb	r3, [r3, #2]
 8001424:	b29b      	uxth	r3, r3
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	b29b      	uxth	r3, r3
 800142a:	4413      	add	r3, r2
 800142c:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8001430:	f8b7 21de 	ldrh.w	r2, [r7, #478]	; 0x1de
 8001434:	463b      	mov	r3, r7
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <astronode_send_sak_rr+0x9c>)
 8001438:	4618      	mov	r0, r3
 800143a:	f003 f92d 	bl	8004698 <siprintf>
            send_debug_logs(str);
 800143e:	463b      	mov	r3, r7
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fb97 	bl	8000b74 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8001446:	e002      	b.n	800144e <astronode_send_sak_rr+0x92>
            send_debug_logs("No acknowledgment available.");
 8001448:	4804      	ldr	r0, [pc, #16]	; (800145c <astronode_send_sak_rr+0xa0>)
 800144a:	f7ff fb93 	bl	8000b74 <send_debug_logs>
}
 800144e:	bf00      	nop
 8001450:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	0800594c 	.word	0x0800594c
 800145c:	08005978 	.word	0x08005978

08001460 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b0e4      	sub	sp, #400	; 0x190
 8001464:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8001466:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800146a:	22c6      	movs	r2, #198	; 0xc6
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f003 f8d6 	bl	8004620 <memset>
    astronode_app_msg_t answer = {0};
 8001474:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001478:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800147c:	4618      	mov	r0, r3
 800147e:	23c6      	movs	r3, #198	; 0xc6
 8001480:	461a      	mov	r2, r3
 8001482:	2100      	movs	r1, #0
 8001484:	f003 f8cc 	bl	8004620 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8001488:	2346      	movs	r3, #70	; 0x46
 800148a:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800148e:	463a      	mov	r2, r7
 8001490:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001494:	4611      	mov	r1, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fc9a 	bl	8001dd0 <astronode_transport_send_receive>
 800149c:	4603      	mov	r3, r0
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d110      	bne.n	80014c4 <astronode_send_sak_cr+0x64>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 80014a2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2bc6      	cmp	r3, #198	; 0xc6
 80014ae:	d106      	bne.n	80014be <astronode_send_sak_cr+0x5e>
        {
            g_is_sak_available = false;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <astronode_send_sak_cr+0x70>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 80014b6:	4807      	ldr	r0, [pc, #28]	; (80014d4 <astronode_send_sak_cr+0x74>)
 80014b8:	f7ff fb5c 	bl	8000b74 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 80014bc:	e002      	b.n	80014c4 <astronode_send_sak_cr+0x64>
            send_debug_logs("No acknowledgment available.");
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <astronode_send_sak_cr+0x78>)
 80014c0:	f7ff fb58 	bl	8000b74 <send_debug_logs>
}
 80014c4:	bf00      	nop
 80014c6:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200001bc 	.word	0x200001bc
 80014d4:	08005998 	.word	0x08005998
 80014d8:	08005978 	.word	0x08005978

080014dc <append_multiple_data_size_to_string>:
        }
    }
}

void append_multiple_data_size_to_string(char * const p_str, uint32_t * const p_data, uint8_t size)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	4613      	mov	r3, r2
 80014e8:	71fb      	strb	r3, [r7, #7]
    switch (size)
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d018      	beq.n	8001522 <append_multiple_data_size_to_string+0x46>
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	dc1e      	bgt.n	8001532 <append_multiple_data_size_to_string+0x56>
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d002      	beq.n	80014fe <append_multiple_data_size_to_string+0x22>
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d009      	beq.n	8001510 <append_multiple_data_size_to_string+0x34>
 80014fc:	e019      	b.n	8001532 <append_multiple_data_size_to_string+0x56>
    {
        case 1:
            sprintf(p_str, "%u", (uint8_t) *p_data);
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	461a      	mov	r2, r3
 8001506:	4910      	ldr	r1, [pc, #64]	; (8001548 <append_multiple_data_size_to_string+0x6c>)
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f003 f8c5 	bl	8004698 <siprintf>
            break;
 800150e:	e017      	b.n	8001540 <append_multiple_data_size_to_string+0x64>
        case 2:
            sprintf(p_str, "%u", (uint16_t) *p_data);
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	b29b      	uxth	r3, r3
 8001516:	461a      	mov	r2, r3
 8001518:	490b      	ldr	r1, [pc, #44]	; (8001548 <append_multiple_data_size_to_string+0x6c>)
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f003 f8bc 	bl	8004698 <siprintf>
            break;
 8001520:	e00e      	b.n	8001540 <append_multiple_data_size_to_string+0x64>
        case 4:
            sprintf(p_str, "%lu", *p_data);
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	4908      	ldr	r1, [pc, #32]	; (800154c <append_multiple_data_size_to_string+0x70>)
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f003 f8b4 	bl	8004698 <siprintf>
            break;
 8001530:	e006      	b.n	8001540 <append_multiple_data_size_to_string+0x64>
        default:
            sprintf(p_str, "tlv size error %u", size);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	461a      	mov	r2, r3
 8001536:	4906      	ldr	r1, [pc, #24]	; (8001550 <append_multiple_data_size_to_string+0x74>)
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f003 f8ad 	bl	8004698 <siprintf>
    }
}
 800153e:	bf00      	nop
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	08005a84 	.word	0x08005a84
 800154c:	08005a88 	.word	0x08005a88
 8001550:	08005a8c 	.word	0x08005a8c

08001554 <astronode_send_per_rr>:

void astronode_send_per_rr(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0fa      	sub	sp, #488	; 0x1e8
 8001558:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800155a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800155e:	22c6      	movs	r2, #198	; 0xc6
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f003 f85c 	bl	8004620 <memset>
    astronode_app_msg_t answer = {0};
 8001568:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800156c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001570:	4618      	mov	r0, r3
 8001572:	23c6      	movs	r3, #198	; 0xc6
 8001574:	461a      	mov	r2, r3
 8001576:	2100      	movs	r1, #0
 8001578:	f003 f852 	bl	8004620 <memset>

    request.op_code = ASTRONODE_OP_CODE_PER_RR;
 800157c:	2367      	movs	r3, #103	; 0x67
 800157e:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8001582:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001586:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f000 fc1f 	bl	8001dd0 <astronode_transport_send_receive>
 8001592:	4603      	mov	r3, r0
 8001594:	2b01      	cmp	r3, #1
 8001596:	f040 80b6 	bne.w	8001706 <astronode_send_per_rr+0x1b2>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PER_RA)
 800159a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800159e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2be7      	cmp	r3, #231	; 0xe7
 80015a6:	f040 80ab 	bne.w	8001700 <astronode_send_per_rr+0x1ac>
        {
            uint16_t tlv_index = 0; // size 16bits to fit to payload_len
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
            char log_text[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            uint8_t tlv_size = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 31e5 	strb.w	r3, [r7, #485]	; 0x1e5
            while (tlv_index < answer.payload_len)
 80015b6:	e097      	b.n	80016e8 <astronode_send_per_rr+0x194>
            {
                uint32_t *p_data = (uint32_t *) &answer.p_payload[tlv_index + 2];
 80015b8:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 80015bc:	3302      	adds	r3, #2
 80015be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80015c2:	4413      	add	r3, r2
 80015c4:	3301      	adds	r3, #1
 80015c6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
                tlv_size = answer.p_payload[tlv_index + 1];
 80015ca:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 80015ce:	3301      	adds	r3, #1
 80015d0:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 80015d4:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 80015d8:	4413      	add	r3, r2
 80015da:	785b      	ldrb	r3, [r3, #1]
 80015dc:	f887 31e5 	strb.w	r3, [r7, #485]	; 0x1e5
                switch (answer.p_payload[tlv_index])
 80015e0:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 80015e4:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 80015e8:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 80015ec:	4413      	add	r3, r2
 80015ee:	785b      	ldrb	r3, [r3, #1]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	2b0d      	cmp	r3, #13
 80015f4:	d856      	bhi.n	80016a4 <astronode_send_per_rr+0x150>
 80015f6:	a201      	add	r2, pc, #4	; (adr r2, 80015fc <astronode_send_per_rr+0xa8>)
 80015f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fc:	08001635 	.word	0x08001635
 8001600:	0800163d 	.word	0x0800163d
 8001604:	08001645 	.word	0x08001645
 8001608:	0800164d 	.word	0x0800164d
 800160c:	08001655 	.word	0x08001655
 8001610:	0800165d 	.word	0x0800165d
 8001614:	08001665 	.word	0x08001665
 8001618:	0800166d 	.word	0x0800166d
 800161c:	08001675 	.word	0x08001675
 8001620:	0800167d 	.word	0x0800167d
 8001624:	08001685 	.word	0x08001685
 8001628:	0800168d 	.word	0x0800168d
 800162c:	08001695 	.word	0x08001695
 8001630:	0800169d 	.word	0x0800169d
                {
                    case PC_COUNTER_ID_SAT_DET_PHASE_COUNT:
                        send_debug_logs("PC sat det phase count is: ");
 8001634:	4836      	ldr	r0, [pc, #216]	; (8001710 <astronode_send_per_rr+0x1bc>)
 8001636:	f7ff fa9d 	bl	8000b74 <send_debug_logs>
                        break;
 800163a:	e039      	b.n	80016b0 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_SAT_DET_OPERATIONS_COUNT:
                        send_debug_logs("PC sat det operation count is: ");
 800163c:	4835      	ldr	r0, [pc, #212]	; (8001714 <astronode_send_per_rr+0x1c0>)
 800163e:	f7ff fa99 	bl	8000b74 <send_debug_logs>
                        break;
 8001642:	e035      	b.n	80016b0 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_SIGNALLING_DEMOD_PHASE_COUNT:
                        send_debug_logs("PC signalling demod phase count is: ");
 8001644:	4834      	ldr	r0, [pc, #208]	; (8001718 <astronode_send_per_rr+0x1c4>)
 8001646:	f7ff fa95 	bl	8000b74 <send_debug_logs>
                        break;
 800164a:	e031      	b.n	80016b0 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_SIGNALLING_DEMOD_ATTEMPTS_COUNT:
                        send_debug_logs("PC signalling demod attemps count is: ");
 800164c:	4833      	ldr	r0, [pc, #204]	; (800171c <astronode_send_per_rr+0x1c8>)
 800164e:	f7ff fa91 	bl	8000b74 <send_debug_logs>
                        break;
 8001652:	e02d      	b.n	80016b0 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_SIGNALLING_DEMOD_SUCCESSES_COUNT:
                        send_debug_logs("PC signalling demod successes count is: ");
 8001654:	4832      	ldr	r0, [pc, #200]	; (8001720 <astronode_send_per_rr+0x1cc>)
 8001656:	f7ff fa8d 	bl	8000b74 <send_debug_logs>
                        break;
 800165a:	e029      	b.n	80016b0 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_ACK_DEMOD_ATTEMPTS_COUNT:
                        send_debug_logs("PC ack demod attemps count is: ");
 800165c:	4831      	ldr	r0, [pc, #196]	; (8001724 <astronode_send_per_rr+0x1d0>)
 800165e:	f7ff fa89 	bl	8000b74 <send_debug_logs>
                        break;
 8001662:	e025      	b.n	80016b0 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_ACK_DEMOD_SUCCESS_COUNT:
                        send_debug_logs("PC ack demod success count is: ");
 8001664:	4830      	ldr	r0, [pc, #192]	; (8001728 <astronode_send_per_rr+0x1d4>)
 8001666:	f7ff fa85 	bl	8000b74 <send_debug_logs>
                        break;
 800166a:	e021      	b.n	80016b0 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_QUEUED_MSG_COUNT:
                        send_debug_logs("PC queued message count is: ");
 800166c:	482f      	ldr	r0, [pc, #188]	; (800172c <astronode_send_per_rr+0x1d8>)
 800166e:	f7ff fa81 	bl	8000b74 <send_debug_logs>
                        break;
 8001672:	e01d      	b.n	80016b0 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_DEQUEUED_UNACKED_MSG_COUNT:
                        send_debug_logs("PC dequeued unacked message count is: ");
 8001674:	482e      	ldr	r0, [pc, #184]	; (8001730 <astronode_send_per_rr+0x1dc>)
 8001676:	f7ff fa7d 	bl	8000b74 <send_debug_logs>
                        break;
 800167a:	e019      	b.n	80016b0 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_ACKED_MSG_COUNT:
                        send_debug_logs("PC acked message count is: ");
 800167c:	482d      	ldr	r0, [pc, #180]	; (8001734 <astronode_send_per_rr+0x1e0>)
 800167e:	f7ff fa79 	bl	8000b74 <send_debug_logs>
                        break;
 8001682:	e015      	b.n	80016b0 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_SENT_FRAG_COUNT:
                        send_debug_logs("PC sent frag count is: ");
 8001684:	482c      	ldr	r0, [pc, #176]	; (8001738 <astronode_send_per_rr+0x1e4>)
 8001686:	f7ff fa75 	bl	8000b74 <send_debug_logs>
                        break;
 800168a:	e011      	b.n	80016b0 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_ACKED_FRAG_COUNT:
                        send_debug_logs("PC ack frag count is: ");
 800168c:	482b      	ldr	r0, [pc, #172]	; (800173c <astronode_send_per_rr+0x1e8>)
 800168e:	f7ff fa71 	bl	8000b74 <send_debug_logs>
                        break;
 8001692:	e00d      	b.n	80016b0 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_COMMAND_DEMOD_ATTEMPT_COUNT:
                        send_debug_logs("PC unicast demod attempt count is: ");
 8001694:	482a      	ldr	r0, [pc, #168]	; (8001740 <astronode_send_per_rr+0x1ec>)
 8001696:	f7ff fa6d 	bl	8000b74 <send_debug_logs>
                        break;
 800169a:	e009      	b.n	80016b0 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_COMMAND_DEMOD_SUCCESS_COUNT:
                        send_debug_logs("PC unicast demod success count is: ");
 800169c:	4829      	ldr	r0, [pc, #164]	; (8001744 <astronode_send_per_rr+0x1f0>)
 800169e:	f7ff fa69 	bl	8000b74 <send_debug_logs>
                        break;
 80016a2:	e005      	b.n	80016b0 <astronode_send_per_rr+0x15c>
                    default:
                        send_debug_logs("PC error, type unknown");
 80016a4:	4828      	ldr	r0, [pc, #160]	; (8001748 <astronode_send_per_rr+0x1f4>)
 80016a6:	f7ff fa65 	bl	8000b74 <send_debug_logs>
                        tlv_size = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f887 31e5 	strb.w	r3, [r7, #485]	; 0x1e5
                }
                append_multiple_data_size_to_string(log_text, p_data, tlv_size);
 80016b0:	f897 21e5 	ldrb.w	r2, [r7, #485]	; 0x1e5
 80016b4:	463b      	mov	r3, r7
 80016b6:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff0e 	bl	80014dc <append_multiple_data_size_to_string>
                send_debug_logs(log_text);
 80016c0:	463b      	mov	r3, r7
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fa56 	bl	8000b74 <send_debug_logs>
                log_text[0] = '\0';
 80016c8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80016cc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
                tlv_index += tlv_size + 2;
 80016d4:	f897 31e5 	ldrb.w	r3, [r7, #485]	; 0x1e5
 80016d8:	b29a      	uxth	r2, r3
 80016da:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 80016de:	4413      	add	r3, r2
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	3302      	adds	r3, #2
 80016e4:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
            while (tlv_index < answer.payload_len)
 80016e8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80016ec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80016f0:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80016f4:	f8b7 21e6 	ldrh.w	r2, [r7, #486]	; 0x1e6
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f4ff af5d 	bcc.w	80015b8 <astronode_send_per_rr+0x64>
        else
        {
            send_debug_logs("Failed to get performance counters.");
        }
    }
}
 80016fe:	e002      	b.n	8001706 <astronode_send_per_rr+0x1b2>
            send_debug_logs("Failed to get performance counters.");
 8001700:	4812      	ldr	r0, [pc, #72]	; (800174c <astronode_send_per_rr+0x1f8>)
 8001702:	f7ff fa37 	bl	8000b74 <send_debug_logs>
}
 8001706:	bf00      	nop
 8001708:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	08005aa0 	.word	0x08005aa0
 8001714:	08005abc 	.word	0x08005abc
 8001718:	08005adc 	.word	0x08005adc
 800171c:	08005b04 	.word	0x08005b04
 8001720:	08005b2c 	.word	0x08005b2c
 8001724:	08005b58 	.word	0x08005b58
 8001728:	08005b78 	.word	0x08005b78
 800172c:	08005b98 	.word	0x08005b98
 8001730:	08005bb8 	.word	0x08005bb8
 8001734:	08005be0 	.word	0x08005be0
 8001738:	08005bfc 	.word	0x08005bfc
 800173c:	08005c14 	.word	0x08005c14
 8001740:	08005c2c 	.word	0x08005c2c
 8001744:	08005c50 	.word	0x08005c50
 8001748:	08005c74 	.word	0x08005c74
 800174c:	08005c8c 	.word	0x08005c8c

08001750 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0e4      	sub	sp, #400	; 0x190
 8001754:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8001756:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800175a:	22c6      	movs	r2, #198	; 0xc6
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f002 ff5e 	bl	8004620 <memset>
    astronode_app_msg_t answer = {0};
 8001764:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001768:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800176c:	4618      	mov	r0, r3
 800176e:	23c6      	movs	r3, #198	; 0xc6
 8001770:	461a      	mov	r2, r3
 8001772:	2100      	movs	r1, #0
 8001774:	f002 ff54 	bl	8004620 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8001778:	2348      	movs	r3, #72	; 0x48
 800177a:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800177e:	463a      	mov	r2, r7
 8001780:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f000 fb22 	bl	8001dd0 <astronode_transport_send_receive>
 800178c:	4603      	mov	r3, r0
 800178e:	2b01      	cmp	r3, #1
 8001790:	d110      	bne.n	80017b4 <astronode_send_cmd_cr+0x64>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8001792:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001796:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2bc8      	cmp	r3, #200	; 0xc8
 800179e:	d106      	bne.n	80017ae <astronode_send_cmd_cr+0x5e>
        {
            g_is_command_available = false;
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <astronode_send_cmd_cr+0x70>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 80017a6:	4807      	ldr	r0, [pc, #28]	; (80017c4 <astronode_send_cmd_cr+0x74>)
 80017a8:	f7ff f9e4 	bl	8000b74 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 80017ac:	e002      	b.n	80017b4 <astronode_send_cmd_cr+0x64>
            send_debug_logs("No command to clear.");
 80017ae:	4806      	ldr	r0, [pc, #24]	; (80017c8 <astronode_send_cmd_cr+0x78>)
 80017b0:	f7ff f9e0 	bl	8000b74 <send_debug_logs>
}
 80017b4:	bf00      	nop
 80017b6:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200001be 	.word	0x200001be
 80017c4:	08005eb8 	.word	0x08005eb8
 80017c8:	08005edc 	.word	0x08005edc

080017cc <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 80017cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017d0:	b0fd      	sub	sp, #500	; 0x1f4
 80017d2:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80017d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017d8:	22c6      	movs	r2, #198	; 0xc6
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 ff1f 	bl	8004620 <memset>
    astronode_app_msg_t answer = {0};
 80017e2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80017e6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80017ea:	4618      	mov	r0, r3
 80017ec:	23c6      	movs	r3, #198	; 0xc6
 80017ee:	461a      	mov	r2, r3
 80017f0:	2100      	movs	r1, #0
 80017f2:	f002 ff15 	bl	8004620 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 80017f6:	2347      	movs	r3, #71	; 0x47
 80017f8:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80017fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001800:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f000 fae2 	bl	8001dd0 <astronode_transport_send_receive>
 800180c:	4603      	mov	r3, r0
 800180e:	2b01      	cmp	r3, #1
 8001810:	f040 80c2 	bne.w	8001998 <astronode_send_cmd_rr+0x1cc>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8001814:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001818:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2bc7      	cmp	r3, #199	; 0xc7
 8001820:	f040 80b7 	bne.w	8001992 <astronode_send_cmd_rr+0x1c6>
        {
 8001824:	466b      	mov	r3, sp
 8001826:	461e      	mov	r6, r3
            send_debug_logs("Received downlink command");
 8001828:	485e      	ldr	r0, [pc, #376]	; (80019a4 <astronode_send_cmd_rr+0x1d8>)
 800182a:	f7ff f9a3 	bl	8000b74 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 800182e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001832:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	461a      	mov	r2, r3
                                + (answer.p_payload[1] << 8)
 800183a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800183e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001842:	789b      	ldrb	r3, [r3, #2]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	441a      	add	r2, r3
                                + (answer.p_payload[2] << 16)
 8001848:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800184c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001850:	78db      	ldrb	r3, [r3, #3]
 8001852:	041b      	lsls	r3, r3, #16
 8001854:	441a      	add	r2, r3
                                + (answer.p_payload[3] << 24);
 8001856:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800185a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800185e:	791b      	ldrb	r3, [r3, #4]
 8001860:	061b      	lsls	r3, r3, #24
 8001862:	4413      	add	r3, r2
            uint32_t rtc_time = answer.p_payload[0]
 8001864:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8001868:	463b      	mov	r3, r7
 800186a:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 800186e:	494e      	ldr	r1, [pc, #312]	; (80019a8 <astronode_send_cmd_rr+0x1dc>)
 8001870:	4618      	mov	r0, r3
 8001872:	f002 ff11 	bl	8004698 <siprintf>
            send_debug_logs(str);
 8001876:	463b      	mov	r3, r7
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff f97b 	bl	8000b74 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 800187e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001882:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001886:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800188a:	2b2c      	cmp	r3, #44	; 0x2c
 800188c:	d00b      	beq.n	80018a6 <astronode_send_cmd_rr+0xda>
 800188e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001892:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001896:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d003      	beq.n	80018a6 <astronode_send_cmd_rr+0xda>
            {
                send_debug_logs("Command size error");
 800189e:	4843      	ldr	r0, [pc, #268]	; (80019ac <astronode_send_cmd_rr+0x1e0>)
 80018a0:	f7ff f968 	bl	8000b74 <send_debug_logs>
                return;
 80018a4:	e073      	b.n	800198e <astronode_send_cmd_rr+0x1c2>
            }

            char command_content[answer.payload_len];
 80018a6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80018aa:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80018ae:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
 80018b2:	460b      	mov	r3, r1
 80018b4:	3b01      	subs	r3, #1
 80018b6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018ba:	b28b      	uxth	r3, r1
 80018bc:	2200      	movs	r2, #0
 80018be:	4698      	mov	r8, r3
 80018c0:	4691      	mov	r9, r2
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018d6:	b28b      	uxth	r3, r1
 80018d8:	2200      	movs	r2, #0
 80018da:	461c      	mov	r4, r3
 80018dc:	4615      	mov	r5, r2
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	00eb      	lsls	r3, r5, #3
 80018e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ec:	00e2      	lsls	r2, r4, #3
 80018ee:	460b      	mov	r3, r1
 80018f0:	3307      	adds	r3, #7
 80018f2:	08db      	lsrs	r3, r3, #3
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	ebad 0d03 	sub.w	sp, sp, r3
 80018fa:	466b      	mov	r3, sp
 80018fc:	3300      	adds	r3, #0
 80018fe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8001902:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001906:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800190a:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800190e:	3b03      	subs	r3, #3
 8001910:	4619      	mov	r1, r3
 8001912:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001916:	3305      	adds	r3, #5
 8001918:	4a25      	ldr	r2, [pc, #148]	; (80019b0 <astronode_send_cmd_rr+0x1e4>)
 800191a:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800191e:	f002 fe87 	bl	8004630 <sniprintf>
 8001922:	4603      	mov	r3, r0
 8001924:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
            for (uint8_t index = 0; index < command_content_size; index++)
 8001928:	2300      	movs	r3, #0
 800192a:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
 800192e:	e015      	b.n	800195c <astronode_send_cmd_rr+0x190>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8001930:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 8001934:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	3301      	adds	r3, #1
 800193c:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <astronode_send_cmd_rr+0x1e8>)
 800193e:	4413      	add	r3, r2
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8001946:	2b00      	cmp	r3, #0
 8001948:	d103      	bne.n	8001952 <astronode_send_cmd_rr+0x186>
                {
                    send_debug_logs("Command contains non printable characters");
 800194a:	481b      	ldr	r0, [pc, #108]	; (80019b8 <astronode_send_cmd_rr+0x1ec>)
 800194c:	f7ff f912 	bl	8000b74 <send_debug_logs>
                    return;
 8001950:	e01d      	b.n	800198e <astronode_send_cmd_rr+0x1c2>
            for (uint8_t index = 0; index < command_content_size; index++)
 8001952:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 8001956:	3301      	adds	r3, #1
 8001958:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
 800195c:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 8001960:	b29b      	uxth	r3, r3
 8001962:	f8b7 21de 	ldrh.w	r2, [r7, #478]	; 0x1de
 8001966:	429a      	cmp	r2, r3
 8001968:	d8e2      	bhi.n	8001930 <astronode_send_cmd_rr+0x164>
                }
            }
            send_debug_logs("Command content is: ");
 800196a:	4814      	ldr	r0, [pc, #80]	; (80019bc <astronode_send_cmd_rr+0x1f0>)
 800196c:	f7ff f902 	bl	8000b74 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8001970:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001974:	3305      	adds	r3, #5
 8001976:	461a      	mov	r2, r3
 8001978:	4911      	ldr	r1, [pc, #68]	; (80019c0 <astronode_send_cmd_rr+0x1f4>)
 800197a:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800197e:	f002 fe8b 	bl	8004698 <siprintf>
            send_debug_logs(command_content);
 8001982:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 8001986:	f7ff f8f5 	bl	8000b74 <send_debug_logs>
 800198a:	46b5      	mov	sp, r6
 800198c:	e004      	b.n	8001998 <astronode_send_cmd_rr+0x1cc>
 800198e:	46b5      	mov	sp, r6
 8001990:	e002      	b.n	8001998 <astronode_send_cmd_rr+0x1cc>
        }
        else
        {
            send_debug_logs("No command available.");
 8001992:	480c      	ldr	r0, [pc, #48]	; (80019c4 <astronode_send_cmd_rr+0x1f8>)
 8001994:	f7ff f8ee 	bl	8000b74 <send_debug_logs>
        }
    }
}
 8001998:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 800199c:	46bd      	mov	sp, r7
 800199e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019a2:	bf00      	nop
 80019a4:	08005ef4 	.word	0x08005ef4
 80019a8:	08005f10 	.word	0x08005f10
 80019ac:	08005f60 	.word	0x08005f60
 80019b0:	08005644 	.word	0x08005644
 80019b4:	080066e4 	.word	0x080066e4
 80019b8:	08005f74 	.word	0x08005f74
 80019bc:	08005fa0 	.word	0x08005fa0
 80019c0:	08005fb8 	.word	0x08005fb8
 80019c4:	08005fbc 	.word	0x08005fbc

080019c8 <is_sak_available>:

bool is_sak_available()
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <is_sak_available+0x14>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	200001bc 	.word	0x200001bc

080019e0 <is_astronode_reset>:

bool is_astronode_reset()
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <is_astronode_reset+0x14>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	200001bd 	.word	0x200001bd

080019f8 <is_command_available>:

bool is_command_available()
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
    return g_is_command_available;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <is_command_available+0x14>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	200001be 	.word	0x200001be

08001a10 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
    if (ascii >= '0' && ascii <= '9')
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	2b2f      	cmp	r3, #47	; 0x2f
 8001a20:	d909      	bls.n	8001a36 <ascii_to_value+0x26>
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b39      	cmp	r3, #57	; 0x39
 8001a26:	d806      	bhi.n	8001a36 <ascii_to_value+0x26>
    {
        *p_value = ascii - '0';
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	3b30      	subs	r3, #48	; 0x30
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	701a      	strb	r2, [r3, #0]
        return true;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00d      	b.n	8001a52 <ascii_to_value+0x42>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	2b40      	cmp	r3, #64	; 0x40
 8001a3a:	d909      	bls.n	8001a50 <ascii_to_value+0x40>
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	2b46      	cmp	r3, #70	; 0x46
 8001a40:	d806      	bhi.n	8001a50 <ascii_to_value+0x40>
    {
        *p_value = ascii - 'A' + 10;
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	3b37      	subs	r3, #55	; 0x37
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	701a      	strb	r2, [r3, #0]
        return true;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <ascii_to_value+0x42>
    }
    else
    {
        return false;
 8001a50:	2300      	movs	r3, #0
    }
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	81fb      	strh	r3, [r7, #14]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8001a6c:	89fb      	ldrh	r3, [r7, #14]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	81fa      	strh	r2, [r7, #14]
 8001a72:	461a      	mov	r2, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	2202      	movs	r2, #2
 8001a7a:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a82:	2101      	movs	r1, #1
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 fa07 	bl	8001e98 <calculate_crc>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	817b      	strh	r3, [r7, #10]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	1c58      	adds	r0, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001a98:	897a      	ldrh	r2, [r7, #10]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f000 f9fc 	bl	8001e98 <calculate_crc>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	817b      	strh	r3, [r7, #10]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8001aa4:	897b      	ldrh	r3, [r7, #10]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	b21a      	sxth	r2, r3
 8001aaa:	897b      	ldrh	r3, [r7, #10]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	817b      	strh	r3, [r7, #10]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7818      	ldrb	r0, [r3, #0]
 8001abc:	89fb      	ldrh	r3, [r7, #14]
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f000 fb28 	bl	8002118 <uint8_to_ascii_buffer>
    index += 2;
 8001ac8:	89fb      	ldrh	r3, [r7, #14]
 8001aca:	3302      	adds	r3, #2
 8001acc:	81fb      	strh	r3, [r7, #14]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	81bb      	strh	r3, [r7, #12]
 8001ad2:	e00f      	b.n	8001af4 <astronode_create_request_transport+0x96>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8001ad4:	89bb      	ldrh	r3, [r7, #12]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	7858      	ldrb	r0, [r3, #1]
 8001adc:	89fb      	ldrh	r3, [r7, #14]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f000 fb18 	bl	8002118 <uint8_to_ascii_buffer>
        index += 2;
 8001ae8:	89fb      	ldrh	r3, [r7, #14]
 8001aea:	3302      	adds	r3, #2
 8001aec:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8001aee:	89bb      	ldrh	r3, [r7, #12]
 8001af0:	3301      	adds	r3, #1
 8001af2:	81bb      	strh	r3, [r7, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001afa:	89ba      	ldrh	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d3e9      	bcc.n	8001ad4 <astronode_create_request_transport+0x76>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8001b00:	897b      	ldrh	r3, [r7, #10]
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	b2d8      	uxtb	r0, r3
 8001b08:	89fb      	ldrh	r3, [r7, #14]
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f000 fb02 	bl	8002118 <uint8_to_ascii_buffer>
    index += 2;
 8001b14:	89fb      	ldrh	r3, [r7, #14]
 8001b16:	3302      	adds	r3, #2
 8001b18:	81fb      	strh	r3, [r7, #14]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8001b1a:	897b      	ldrh	r3, [r7, #10]
 8001b1c:	b2d8      	uxtb	r0, r3
 8001b1e:	89fb      	ldrh	r3, [r7, #14]
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	f000 faf7 	bl	8002118 <uint8_to_ascii_buffer>
    index += 2;
 8001b2a:	89fb      	ldrh	r3, [r7, #14]
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	81fb      	strh	r3, [r7, #14]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8001b30:	89fb      	ldrh	r3, [r7, #14]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	81fa      	strh	r2, [r7, #14]
 8001b36:	461a      	mov	r2, r3
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	701a      	strb	r2, [r3, #0]

    return index;
 8001b40:	89fb      	ldrh	r3, [r7, #14]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	460b      	mov	r3, r1
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	817b      	strh	r3, [r7, #10]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d004      	beq.n	8001b6c <astronode_decode_answer_transport+0x20>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8001b62:	4896      	ldr	r0, [pc, #600]	; (8001dbc <astronode_decode_answer_transport+0x270>)
 8001b64:	f7ff f806 	bl	8000b74 <send_debug_logs>
        return RS_FAILURE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e123      	b.n	8001db4 <astronode_decode_answer_transport+0x268>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d102      	bne.n	8001b7e <astronode_decode_answer_transport+0x32>
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	2b07      	cmp	r3, #7
 8001b7c:	d804      	bhi.n	8001b88 <astronode_decode_answer_transport+0x3c>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8001b7e:	4890      	ldr	r0, [pc, #576]	; (8001dc0 <astronode_decode_answer_transport+0x274>)
 8001b80:	f7fe fff8 	bl	8000b74 <send_debug_logs>
        return RS_FAILURE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e115      	b.n	8001db4 <astronode_decode_answer_transport+0x268>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8001b88:	897b      	ldrh	r3, [r7, #10]
 8001b8a:	3b08      	subs	r3, #8
 8001b8c:	0fda      	lsrs	r2, r3, #31
 8001b8e:	4413      	add	r3, r2
 8001b90:	105b      	asrs	r3, r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8001b9a:	897b      	ldrh	r3, [r7, #10]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d004      	beq.n	8001bb2 <astronode_decode_answer_transport+0x66>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8001ba8:	4886      	ldr	r0, [pc, #536]	; (8001dc4 <astronode_decode_answer_transport+0x278>)
 8001baa:	f7fe ffe3 	bl	8000b74 <send_debug_logs>
        return RS_FAILURE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e100      	b.n	8001db4 <astronode_decode_answer_transport+0x268>
    }

    uint8_t nibble_high = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	75fb      	strb	r3, [r7, #23]
    uint8_t nibble_low = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	75bb      	strb	r3, [r7, #22]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	f107 0217 	add.w	r2, r7, #23
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ff22 	bl	8001a10 <ascii_to_value>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f083 0301 	eor.w	r3, r3, #1
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10e      	bne.n	8001bf6 <astronode_decode_answer_transport+0xaa>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3302      	adds	r3, #2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	f107 0216 	add.w	r2, r7, #22
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff13 	bl	8001a10 <ascii_to_value>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f083 0301 	eor.w	r3, r3, #1
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d004      	beq.n	8001c00 <astronode_decode_answer_transport+0xb4>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001bf6:	4874      	ldr	r0, [pc, #464]	; (8001dc8 <astronode_decode_answer_transport+0x27c>)
 8001bf8:	f7fe ffbc 	bl	8000b74 <send_debug_logs>
        return RS_FAILURE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e0d9      	b.n	8001db4 <astronode_decode_answer_transport+0x268>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	7dbb      	ldrb	r3, [r7, #22]
 8001c08:	4413      	add	r3, r2
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8001c10:	2303      	movs	r3, #3
 8001c12:	83fb      	strh	r3, [r7, #30]
 8001c14:	2300      	movs	r3, #0
 8001c16:	83bb      	strh	r3, [r7, #28]
 8001c18:	e035      	b.n	8001c86 <astronode_decode_answer_transport+0x13a>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8001c1a:	8bfb      	ldrh	r3, [r7, #30]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	f107 0217 	add.w	r2, r7, #23
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fef1 	bl	8001a10 <ascii_to_value>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f083 0301 	eor.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d110      	bne.n	8001c5c <astronode_decode_answer_transport+0x110>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8001c3a:	8bfb      	ldrh	r3, [r7, #30]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	f107 0216 	add.w	r2, r7, #22
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fee0 	bl	8001a10 <ascii_to_value>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f083 0301 	eor.w	r3, r3, #1
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d004      	beq.n	8001c66 <astronode_decode_answer_transport+0x11a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001c5c:	485a      	ldr	r0, [pc, #360]	; (8001dc8 <astronode_decode_answer_transport+0x27c>)
 8001c5e:	f7fe ff89 	bl	8000b74 <send_debug_logs>
            return RS_FAILURE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e0a6      	b.n	8001db4 <astronode_decode_answer_transport+0x268>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	b2d9      	uxtb	r1, r3
 8001c6c:	7dba      	ldrb	r2, [r7, #22]
 8001c6e:	8bbb      	ldrh	r3, [r7, #28]
 8001c70:	1c58      	adds	r0, r3, #1
 8001c72:	83b8      	strh	r0, [r7, #28]
 8001c74:	4618      	mov	r0, r3
 8001c76:	188b      	adds	r3, r1, r2
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4403      	add	r3, r0
 8001c7e:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8001c80:	8bfb      	ldrh	r3, [r7, #30]
 8001c82:	3302      	adds	r3, #2
 8001c84:	83fb      	strh	r3, [r7, #30]
 8001c86:	8bfa      	ldrh	r2, [r7, #30]
 8001c88:	897b      	ldrh	r3, [r7, #10]
 8001c8a:	3b05      	subs	r3, #5
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	dbc4      	blt.n	8001c1a <astronode_decode_answer_transport+0xce>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c96:	2101      	movs	r1, #1
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 f8fd 	bl	8001e98 <calculate_crc>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	837b      	strh	r3, [r7, #26]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	1c58      	adds	r0, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001cac:	8b7a      	ldrh	r2, [r7, #26]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f000 f8f2 	bl	8001e98 <calculate_crc>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	837b      	strh	r3, [r7, #26]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8001cb8:	8b7b      	ldrh	r3, [r7, #26]
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	b21a      	sxth	r2, r3
 8001cbe:	8b7b      	ldrh	r3, [r7, #26]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	837b      	strh	r3, [r7, #26]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8001ccc:	897b      	ldrh	r3, [r7, #10]
 8001cce:	3b05      	subs	r3, #5
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	f107 0217 	add.w	r2, r7, #23
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fe97 	bl	8001a10 <ascii_to_value>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f083 0301 	eor.w	r3, r3, #1
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d110      	bne.n	8001d10 <astronode_decode_answer_transport+0x1c4>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8001cee:	897b      	ldrh	r3, [r7, #10]
 8001cf0:	3b04      	subs	r3, #4
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	f107 0216 	add.w	r2, r7, #22
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fe86 	bl	8001a10 <ascii_to_value>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f083 0301 	eor.w	r3, r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d004      	beq.n	8001d1a <astronode_decode_answer_transport+0x1ce>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001d10:	482d      	ldr	r0, [pc, #180]	; (8001dc8 <astronode_decode_answer_transport+0x27c>)
 8001d12:	f7fe ff2f 	bl	8000b74 <send_debug_logs>
        return RS_FAILURE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e04c      	b.n	8001db4 <astronode_decode_answer_transport+0x268>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	031b      	lsls	r3, r3, #12
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	7dbb      	ldrb	r3, [r7, #22]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	833b      	strh	r3, [r7, #24]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8001d2e:	897b      	ldrh	r3, [r7, #10]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4413      	add	r3, r2
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	f107 0217 	add.w	r2, r7, #23
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fe66 	bl	8001a10 <ascii_to_value>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f083 0301 	eor.w	r3, r3, #1
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d110      	bne.n	8001d72 <astronode_decode_answer_transport+0x226>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8001d50:	897b      	ldrh	r3, [r7, #10]
 8001d52:	3b02      	subs	r3, #2
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	f107 0216 	add.w	r2, r7, #22
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fe55 	bl	8001a10 <ascii_to_value>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f083 0301 	eor.w	r3, r3, #1
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <astronode_decode_answer_transport+0x230>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001d72:	4815      	ldr	r0, [pc, #84]	; (8001dc8 <astronode_decode_answer_transport+0x27c>)
 8001d74:	f7fe fefe 	bl	8000b74 <send_debug_logs>
        return RS_FAILURE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e01b      	b.n	8001db4 <astronode_decode_answer_transport+0x268>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	7dbb      	ldrb	r3, [r7, #22]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	8b3b      	ldrh	r3, [r7, #24]
 8001d8e:	4413      	add	r3, r2
 8001d90:	833b      	strh	r3, [r7, #24]

    if (crc_received != crc_calculated)
 8001d92:	8b3a      	ldrh	r2, [r7, #24]
 8001d94:	8b7b      	ldrh	r3, [r7, #26]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d004      	beq.n	8001da4 <astronode_decode_answer_transport+0x258>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8001d9a:	480c      	ldr	r0, [pc, #48]	; (8001dcc <astronode_decode_answer_transport+0x280>)
 8001d9c:	f7fe feea 	bl	8000b74 <send_debug_logs>
        return RS_FAILURE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e007      	b.n	8001db4 <astronode_decode_answer_transport+0x268>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2bff      	cmp	r3, #255	; 0xff
 8001daa:	d102      	bne.n	8001db2 <astronode_decode_answer_transport+0x266>
    {
        check_for_error(p_destination_message);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f8ad 	bl	8001f0c <check_for_error>
    }

    return RS_SUCCESS;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	08005fd4 	.word	0x08005fd4
 8001dc0:	08006024 	.word	0x08006024
 8001dc4:	08006074 	.word	0x08006074
 8001dc8:	080060c4 	.word	0x080060c4
 8001dcc:	08006110 	.word	0x08006110

08001dd0 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001ddc:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8001de0:	6018      	str	r0, [r3, #0]
 8001de2:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001de6:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001dea:	6019      	str	r1, [r3, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8001dec:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001df0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f002 fc0d 	bl	8004620 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8001e06:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001e0a:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	3304      	adds	r3, #4
 8001e14:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f002 fc00 	bl	8004620 <memset>
    uint16_t answer_length =  0;
 8001e20:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001e24:	f2a3 331e 	subw	r3, r3, #798	; 0x31e
 8001e28:	2200      	movs	r2, #0
 8001e2a:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8001e2c:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8001e30:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001e34:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8001e38:	4611      	mov	r1, r2
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	f7ff fe0f 	bl	8001a5e <astronode_create_request_transport>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f8a7 3326 	strh.w	r3, [r7, #806]	; 0x326

    send_astronode_request(request_transport, request_length);
 8001e46:	f8b7 2326 	ldrh.w	r2, [r7, #806]	; 0x326
 8001e4a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fed3 	bl	8000bfc <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8001e56:	f107 020a 	add.w	r2, r7, #10
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 f8fb 	bl	800205c <receive_astronode_answer>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d10f      	bne.n	8001e8c <astronode_transport_send_receive+0xbc>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8001e6c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001e70:	f2a3 331e 	subw	r3, r3, #798	; 0x31e
 8001e74:	8819      	ldrh	r1, [r3, #0]
 8001e76:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001e7a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001e7e:	f107 000c 	add.w	r0, r7, #12
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	f7ff fe62 	bl	8001b4c <astronode_decode_answer_transport>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	e000      	b.n	8001e8e <astronode_transport_send_receive+0xbe>
    }
    else
    {
        return RS_FAILURE;
 8001e8c:	2300      	movs	r3, #0
    }
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f507 774a 	add.w	r7, r7, #808	; 0x328
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	803b      	strh	r3, [r7, #0]
    uint16_t crc = init_value;
 8001ea8:	883b      	ldrh	r3, [r7, #0]
 8001eaa:	81fb      	strh	r3, [r7, #14]

    while (data_len--)
 8001eac:	e021      	b.n	8001ef2 <calculate_crc+0x5a>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8001eae:	89fb      	ldrh	r3, [r7, #14]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	1c59      	adds	r1, r3, #1
 8001eb8:	6079      	str	r1, [r7, #4]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	4053      	eors	r3, r2
 8001ec0:	81bb      	strh	r3, [r7, #12]
        x ^= x >> 4;
 8001ec2:	89bb      	ldrh	r3, [r7, #12]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	89bb      	ldrh	r3, [r7, #12]
 8001eca:	4053      	eors	r3, r2
 8001ecc:	81bb      	strh	r3, [r7, #12]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8001ece:	89fb      	ldrh	r3, [r7, #14]
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	b21a      	sxth	r2, r3
 8001ed4:	89bb      	ldrh	r3, [r7, #12]
 8001ed6:	031b      	lsls	r3, r3, #12
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	4053      	eors	r3, r2
 8001edc:	b21a      	sxth	r2, r3
 8001ede:	89bb      	ldrh	r3, [r7, #12]
 8001ee0:	015b      	lsls	r3, r3, #5
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	4053      	eors	r3, r2
 8001ee6:	b21a      	sxth	r2, r3
 8001ee8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001eec:	4053      	eors	r3, r2
 8001eee:	b21b      	sxth	r3, r3
 8001ef0:	81fb      	strh	r3, [r7, #14]
    while (data_len--)
 8001ef2:	887b      	ldrh	r3, [r7, #2]
 8001ef4:	1e5a      	subs	r2, r3, #1
 8001ef6:	807a      	strh	r2, [r7, #2]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1d8      	bne.n	8001eae <calculate_crc+0x16>
    }
    return crc;
 8001efc:	89fb      	ldrh	r3, [r7, #14]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	785b      	ldrb	r3, [r3, #1]
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	789b      	ldrb	r3, [r3, #2]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	4413      	add	r3, r2
 8001f26:	81fb      	strh	r3, [r7, #14]

    switch (error_code)
 8001f28:	89fb      	ldrh	r3, [r7, #14]
 8001f2a:	f244 6201 	movw	r2, #17921	; 0x4601
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d06f      	beq.n	8002012 <check_for_error+0x106>
 8001f32:	f244 6201 	movw	r2, #17921	; 0x4601
 8001f36:	4293      	cmp	r3, r2
 8001f38:	dc6f      	bgt.n	800201a <check_for_error+0x10e>
 8001f3a:	f244 5201 	movw	r2, #17665	; 0x4501
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d063      	beq.n	800200a <check_for_error+0xfe>
 8001f42:	f244 5201 	movw	r2, #17665	; 0x4501
 8001f46:	4293      	cmp	r3, r2
 8001f48:	dc67      	bgt.n	800201a <check_for_error+0x10e>
 8001f4a:	f243 5201 	movw	r2, #13569	; 0x3501
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d057      	beq.n	8002002 <check_for_error+0xf6>
 8001f52:	f243 5201 	movw	r2, #13569	; 0x3501
 8001f56:	4293      	cmp	r3, r2
 8001f58:	dc5f      	bgt.n	800201a <check_for_error+0x10e>
 8001f5a:	f242 6201 	movw	r2, #9729	; 0x2601
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d04b      	beq.n	8001ffa <check_for_error+0xee>
 8001f62:	f242 6201 	movw	r2, #9729	; 0x2601
 8001f66:	4293      	cmp	r3, r2
 8001f68:	dc57      	bgt.n	800201a <check_for_error+0x10e>
 8001f6a:	f242 5211 	movw	r2, #9489	; 0x2511
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d03f      	beq.n	8001ff2 <check_for_error+0xe6>
 8001f72:	f242 5211 	movw	r2, #9489	; 0x2511
 8001f76:	4293      	cmp	r3, r2
 8001f78:	dc4f      	bgt.n	800201a <check_for_error+0x10e>
 8001f7a:	f242 5201 	movw	r2, #9473	; 0x2501
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d033      	beq.n	8001fea <check_for_error+0xde>
 8001f82:	f242 5201 	movw	r2, #9473	; 0x2501
 8001f86:	4293      	cmp	r3, r2
 8001f88:	dc47      	bgt.n	800201a <check_for_error+0x10e>
 8001f8a:	f240 6211 	movw	r2, #1553	; 0x611
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d027      	beq.n	8001fe2 <check_for_error+0xd6>
 8001f92:	f240 6211 	movw	r2, #1553	; 0x611
 8001f96:	4293      	cmp	r3, r2
 8001f98:	dc3f      	bgt.n	800201a <check_for_error+0x10e>
 8001f9a:	f240 6201 	movw	r2, #1537	; 0x601
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01b      	beq.n	8001fda <check_for_error+0xce>
 8001fa2:	f240 6201 	movw	r2, #1537	; 0x601
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	dc37      	bgt.n	800201a <check_for_error+0x10e>
 8001faa:	f240 1221 	movw	r2, #289	; 0x121
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00f      	beq.n	8001fd2 <check_for_error+0xc6>
 8001fb2:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8001fb6:	da30      	bge.n	800201a <check_for_error+0x10e>
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d002      	beq.n	8001fc2 <check_for_error+0xb6>
 8001fbc:	2b11      	cmp	r3, #17
 8001fbe:	d004      	beq.n	8001fca <check_for_error+0xbe>
 8001fc0:	e02b      	b.n	800201a <check_for_error+0x10e>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8001fc2:	481a      	ldr	r0, [pc, #104]	; (800202c <check_for_error+0x120>)
 8001fc4:	f7fe fdd6 	bl	8000b74 <send_debug_logs>
            break;
 8001fc8:	e02b      	b.n	8002022 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8001fca:	4819      	ldr	r0, [pc, #100]	; (8002030 <check_for_error+0x124>)
 8001fcc:	f7fe fdd2 	bl	8000b74 <send_debug_logs>
            break;
 8001fd0:	e027      	b.n	8002022 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8001fd2:	4818      	ldr	r0, [pc, #96]	; (8002034 <check_for_error+0x128>)
 8001fd4:	f7fe fdce 	bl	8000b74 <send_debug_logs>
            break;
 8001fd8:	e023      	b.n	8002022 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8001fda:	4817      	ldr	r0, [pc, #92]	; (8002038 <check_for_error+0x12c>)
 8001fdc:	f7fe fdca 	bl	8000b74 <send_debug_logs>
            break;
 8001fe0:	e01f      	b.n	8002022 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8001fe2:	4816      	ldr	r0, [pc, #88]	; (800203c <check_for_error+0x130>)
 8001fe4:	f7fe fdc6 	bl	8000b74 <send_debug_logs>
            break;
 8001fe8:	e01b      	b.n	8002022 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8001fea:	4815      	ldr	r0, [pc, #84]	; (8002040 <check_for_error+0x134>)
 8001fec:	f7fe fdc2 	bl	8000b74 <send_debug_logs>
            break;
 8001ff0:	e017      	b.n	8002022 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8001ff2:	4814      	ldr	r0, [pc, #80]	; (8002044 <check_for_error+0x138>)
 8001ff4:	f7fe fdbe 	bl	8000b74 <send_debug_logs>
            break;
 8001ff8:	e013      	b.n	8002022 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8001ffa:	4813      	ldr	r0, [pc, #76]	; (8002048 <check_for_error+0x13c>)
 8001ffc:	f7fe fdba 	bl	8000b74 <send_debug_logs>
            break;
 8002000:	e00f      	b.n	8002022 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8002002:	4812      	ldr	r0, [pc, #72]	; (800204c <check_for_error+0x140>)
 8002004:	f7fe fdb6 	bl	8000b74 <send_debug_logs>
            break;
 8002008:	e00b      	b.n	8002022 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800200a:	4811      	ldr	r0, [pc, #68]	; (8002050 <check_for_error+0x144>)
 800200c:	f7fe fdb2 	bl	8000b74 <send_debug_logs>
            break;
 8002010:	e007      	b.n	8002022 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8002012:	4810      	ldr	r0, [pc, #64]	; (8002054 <check_for_error+0x148>)
 8002014:	f7fe fdae 	bl	8000b74 <send_debug_logs>
            break;
 8002018:	e003      	b.n	8002022 <check_for_error+0x116>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 800201a:	480f      	ldr	r0, [pc, #60]	; (8002058 <check_for_error+0x14c>)
 800201c:	f7fe fdaa 	bl	8000b74 <send_debug_logs>
            break;
 8002020:	bf00      	nop
    }
}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	08006154 	.word	0x08006154
 8002030:	080061a0 	.word	0x080061a0
 8002034:	08006204 	.word	0x08006204
 8002038:	0800623c 	.word	0x0800623c
 800203c:	080062e0 	.word	0x080062e0
 8002040:	08006348 	.word	0x08006348
 8002044:	080063a8 	.word	0x080063a8
 8002048:	08006434 	.word	0x08006434
 800204c:	08006494 	.word	0x08006494
 8002050:	08006540 	.word	0x08006540
 8002054:	0800658c 	.word	0x0800658c
 8002058:	080065d4 	.word	0x080065d4

0800205c <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]
    uint16_t length = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	82fb      	strh	r3, [r7, #22]
    uint32_t timeout_answer_received = get_systick();
 800206e:	f7fe fde1 	bl	8000c34 <get_systick>
 8002072:	4603      	mov	r3, r0
 8002074:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8002076:	2300      	movs	r3, #0
 8002078:	757b      	strb	r3, [r7, #21]

    while (is_answer_received == false)
 800207a:	e036      	b.n	80020ea <receive_astronode_answer+0x8e>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 800207c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002080:	6938      	ldr	r0, [r7, #16]
 8002082:	f7fe fdde 	bl	8000c42 <is_systick_timeout_over>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <receive_astronode_answer+0x3a>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 800208c:	481f      	ldr	r0, [pc, #124]	; (800210c <receive_astronode_answer+0xb0>)
 800208e:	f7fe fd71 	bl	8000b74 <send_debug_logs>
            return RS_FAILURE;
 8002092:	2300      	movs	r3, #0
 8002094:	e036      	b.n	8002104 <receive_astronode_answer+0xa8>
        }
        if (is_astronode_character_received(&rx_char))
 8002096:	f107 030f 	add.w	r3, r7, #15
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fde6 	bl	8000c6c <is_astronode_character_received>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d021      	beq.n	80020ea <receive_astronode_answer+0x8e>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d103      	bne.n	80020b4 <receive_astronode_answer+0x58>
            {
                is_answer_received = false;
 80020ac:	2300      	movs	r3, #0
 80020ae:	757b      	strb	r3, [r7, #21]
                length = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	82fb      	strh	r3, [r7, #22]
            }

            p_rx_buffer[length] = rx_char;
 80020b4:	8afb      	ldrh	r3, [r7, #22]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	701a      	strb	r2, [r3, #0]
            length++;
 80020be:	8afb      	ldrh	r3, [r7, #22]
 80020c0:	3301      	adds	r3, #1
 80020c2:	82fb      	strh	r3, [r7, #22]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80020c4:	8afb      	ldrh	r3, [r7, #22]
 80020c6:	2bb2      	cmp	r3, #178	; 0xb2
 80020c8:	d904      	bls.n	80020d4 <receive_astronode_answer+0x78>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 80020ca:	4811      	ldr	r0, [pc, #68]	; (8002110 <receive_astronode_answer+0xb4>)
 80020cc:	f7fe fd52 	bl	8000b74 <send_debug_logs>
                return RS_FAILURE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e017      	b.n	8002104 <receive_astronode_answer+0xa8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d107      	bne.n	80020ea <receive_astronode_answer+0x8e>
            {
                if (length > 1)
 80020da:	8afb      	ldrh	r3, [r7, #22]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d904      	bls.n	80020ea <receive_astronode_answer+0x8e>
                {
                    *p_buffer_length = length;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	8afa      	ldrh	r2, [r7, #22]
 80020e4:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 80020e6:	2301      	movs	r3, #1
 80020e8:	757b      	strb	r3, [r7, #21]
    while (is_answer_received == false)
 80020ea:	7d7b      	ldrb	r3, [r7, #21]
 80020ec:	f083 0301 	eor.w	r3, r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1c2      	bne.n	800207c <receive_astronode_answer+0x20>
                }
            }
        }
    }

    send_debug_logs("Message received from the Astronode <-- ");
 80020f6:	4807      	ldr	r0, [pc, #28]	; (8002114 <receive_astronode_answer+0xb8>)
 80020f8:	f7fe fd3c 	bl	8000b74 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7fe fd39 	bl	8000b74 <send_debug_logs>

    return RS_SUCCESS;
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	080065f8 	.word	0x080065f8
 8002110:	0800661c 	.word	0x0800661c
 8002114:	08006668 	.word	0x08006668

08002118 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <uint8_to_ascii_buffer+0x38>)
 800212e:	5c9a      	ldrb	r2, [r3, r2]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f003 020f 	and.w	r2, r3, #15
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	4904      	ldr	r1, [pc, #16]	; (8002150 <uint8_to_ascii_buffer+0x38>)
 8002140:	5c8a      	ldrb	r2, [r1, r2]
 8002142:	701a      	strb	r2, [r3, #0]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	080066ac 	.word	0x080066ac

08002154 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215e:	2003      	movs	r0, #3
 8002160:	f000 f93c 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002164:	2000      	movs	r0, #0
 8002166:	f000 f80d 	bl	8002184 <HAL_InitTick>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	71fb      	strb	r3, [r7, #7]
 8002174:	e001      	b.n	800217a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002176:	f7fe fdbb 	bl	8000cf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800217a:	79fb      	ldrb	r3, [r7, #7]

}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_InitTick+0x68>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d022      	beq.n	80021de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_InitTick+0x6c>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_InitTick+0x68>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 f93a 	bl	8002426 <HAL_SYSTICK_Config>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10f      	bne.n	80021d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b0f      	cmp	r3, #15
 80021bc:	d809      	bhi.n	80021d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021be:	2200      	movs	r2, #0
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	f04f 30ff 	mov.w	r0, #4294967295
 80021c6:	f000 f914 	bl	80023f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021ca:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <HAL_InitTick+0x70>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	e007      	b.n	80021e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	e004      	b.n	80021e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e001      	b.n	80021e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	2000000c 	.word	0x2000000c
 80021f0:	20000004 	.word	0x20000004
 80021f4:	20000008 	.word	0x20000008

080021f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_IncTick+0x1c>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_IncTick+0x20>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4413      	add	r3, r2
 8002206:	4a03      	ldr	r2, [pc, #12]	; (8002214 <HAL_IncTick+0x1c>)
 8002208:	6013      	str	r3, [r2, #0]
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	200001c0 	.word	0x200001c0
 8002218:	2000000c 	.word	0x2000000c

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	200001c0 	.word	0x200001c0

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff ffee 	bl	800221c <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d004      	beq.n	8002258 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HAL_Delay+0x40>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4413      	add	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002258:	bf00      	nop
 800225a:	f7ff ffdf 	bl	800221c <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	429a      	cmp	r2, r3
 8002268:	d8f7      	bhi.n	800225a <HAL_Delay+0x26>
  {
  }
}
 800226a:	bf00      	nop
 800226c:	bf00      	nop
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	2000000c 	.word	0x2000000c

08002278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022aa:	4a04      	ldr	r2, [pc, #16]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	60d3      	str	r3, [r2, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <__NVIC_GetPriorityGrouping+0x18>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 0307 	and.w	r3, r3, #7
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0a      	blt.n	8002306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	; (8002328 <__NVIC_SetPriority+0x4c>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440b      	add	r3, r1
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002304:	e00a      	b.n	800231c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <__NVIC_SetPriority+0x50>)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3b04      	subs	r3, #4
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	440b      	add	r3, r1
 800231a:	761a      	strb	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000e100 	.word	0xe000e100
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f1c3 0307 	rsb	r3, r3, #7
 800234a:	2b04      	cmp	r3, #4
 800234c:	bf28      	it	cs
 800234e:	2304      	movcs	r3, #4
 8002350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <NVIC_EncodePriority+0x30>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3b03      	subs	r3, #3
 800235e:	e000      	b.n	8002362 <NVIC_EncodePriority+0x32>
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43d9      	mvns	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4313      	orrs	r3, r2
         );
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a8:	d301      	bcc.n	80023ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00f      	b.n	80023ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <SysTick_Config+0x40>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b6:	210f      	movs	r1, #15
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f7ff ff8e 	bl	80022dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <SysTick_Config+0x40>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <SysTick_Config+0x40>)
 80023c8:	2207      	movs	r2, #7
 80023ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	e000e010 	.word	0xe000e010

080023dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ff47 	bl	8002278 <__NVIC_SetPriorityGrouping>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002400:	f7ff ff5e 	bl	80022c0 <__NVIC_GetPriorityGrouping>
 8002404:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	6978      	ldr	r0, [r7, #20]
 800240c:	f7ff ff90 	bl	8002330 <NVIC_EncodePriority>
 8002410:	4602      	mov	r2, r0
 8002412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff5f 	bl	80022dc <__NVIC_SetPriority>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ffb2 	bl	8002398 <SysTick_Config>
 8002434:	4603      	mov	r3, r0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800244e:	e15a      	b.n	8002706 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2101      	movs	r1, #1
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	4013      	ands	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 814c 	beq.w	8002700 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d005      	beq.n	8002480 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800247c:	2b02      	cmp	r3, #2
 800247e:	d130      	bne.n	80024e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024b6:	2201      	movs	r2, #1
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	f003 0201 	and.w	r2, r3, #1
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	d017      	beq.n	800251e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	2203      	movs	r2, #3
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d123      	bne.n	8002572 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	08da      	lsrs	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3208      	adds	r2, #8
 8002532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002536:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	220f      	movs	r2, #15
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	08da      	lsrs	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3208      	adds	r2, #8
 800256c:	6939      	ldr	r1, [r7, #16]
 800256e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	2203      	movs	r2, #3
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0203 	and.w	r2, r3, #3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 80a6 	beq.w	8002700 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b4:	4b5b      	ldr	r3, [pc, #364]	; (8002724 <HAL_GPIO_Init+0x2e4>)
 80025b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b8:	4a5a      	ldr	r2, [pc, #360]	; (8002724 <HAL_GPIO_Init+0x2e4>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6613      	str	r3, [r2, #96]	; 0x60
 80025c0:	4b58      	ldr	r3, [pc, #352]	; (8002724 <HAL_GPIO_Init+0x2e4>)
 80025c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025cc:	4a56      	ldr	r2, [pc, #344]	; (8002728 <HAL_GPIO_Init+0x2e8>)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3302      	adds	r3, #2
 80025d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	220f      	movs	r2, #15
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025f6:	d01f      	beq.n	8002638 <HAL_GPIO_Init+0x1f8>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a4c      	ldr	r2, [pc, #304]	; (800272c <HAL_GPIO_Init+0x2ec>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d019      	beq.n	8002634 <HAL_GPIO_Init+0x1f4>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a4b      	ldr	r2, [pc, #300]	; (8002730 <HAL_GPIO_Init+0x2f0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d013      	beq.n	8002630 <HAL_GPIO_Init+0x1f0>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a4a      	ldr	r2, [pc, #296]	; (8002734 <HAL_GPIO_Init+0x2f4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00d      	beq.n	800262c <HAL_GPIO_Init+0x1ec>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a49      	ldr	r2, [pc, #292]	; (8002738 <HAL_GPIO_Init+0x2f8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d007      	beq.n	8002628 <HAL_GPIO_Init+0x1e8>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a48      	ldr	r2, [pc, #288]	; (800273c <HAL_GPIO_Init+0x2fc>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d101      	bne.n	8002624 <HAL_GPIO_Init+0x1e4>
 8002620:	2305      	movs	r3, #5
 8002622:	e00a      	b.n	800263a <HAL_GPIO_Init+0x1fa>
 8002624:	2306      	movs	r3, #6
 8002626:	e008      	b.n	800263a <HAL_GPIO_Init+0x1fa>
 8002628:	2304      	movs	r3, #4
 800262a:	e006      	b.n	800263a <HAL_GPIO_Init+0x1fa>
 800262c:	2303      	movs	r3, #3
 800262e:	e004      	b.n	800263a <HAL_GPIO_Init+0x1fa>
 8002630:	2302      	movs	r3, #2
 8002632:	e002      	b.n	800263a <HAL_GPIO_Init+0x1fa>
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <HAL_GPIO_Init+0x1fa>
 8002638:	2300      	movs	r3, #0
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	f002 0203 	and.w	r2, r2, #3
 8002640:	0092      	lsls	r2, r2, #2
 8002642:	4093      	lsls	r3, r2
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800264a:	4937      	ldr	r1, [pc, #220]	; (8002728 <HAL_GPIO_Init+0x2e8>)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	3302      	adds	r3, #2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002658:	4b39      	ldr	r3, [pc, #228]	; (8002740 <HAL_GPIO_Init+0x300>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	43db      	mvns	r3, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4013      	ands	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800267c:	4a30      	ldr	r2, [pc, #192]	; (8002740 <HAL_GPIO_Init+0x300>)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002682:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <HAL_GPIO_Init+0x300>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026a6:	4a26      	ldr	r2, [pc, #152]	; (8002740 <HAL_GPIO_Init+0x300>)
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80026ac:	4b24      	ldr	r3, [pc, #144]	; (8002740 <HAL_GPIO_Init+0x300>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_GPIO_Init+0x300>)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <HAL_GPIO_Init+0x300>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	43db      	mvns	r3, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026fa:	4a11      	ldr	r2, [pc, #68]	; (8002740 <HAL_GPIO_Init+0x300>)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	3301      	adds	r3, #1
 8002704:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	f47f ae9d 	bne.w	8002450 <HAL_GPIO_Init+0x10>
  }
}
 8002716:	bf00      	nop
 8002718:	bf00      	nop
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	40021000 	.word	0x40021000
 8002728:	40010000 	.word	0x40010000
 800272c:	48000400 	.word	0x48000400
 8002730:	48000800 	.word	0x48000800
 8002734:	48000c00 	.word	0x48000c00
 8002738:	48001000 	.word	0x48001000
 800273c:	48001400 	.word	0x48001400
 8002740:	40010400 	.word	0x40010400

08002744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	887b      	ldrh	r3, [r7, #2]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
 8002760:	e001      	b.n	8002766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002766:	7bfb      	ldrb	r3, [r7, #15]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002790:	e002      	b.n	8002798 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d141      	bne.n	8002836 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027b2:	4b4b      	ldr	r3, [pc, #300]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027be:	d131      	bne.n	8002824 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027c0:	4b47      	ldr	r3, [pc, #284]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027c6:	4a46      	ldr	r2, [pc, #280]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027d0:	4b43      	ldr	r3, [pc, #268]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027d8:	4a41      	ldr	r2, [pc, #260]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027e0:	4b40      	ldr	r3, [pc, #256]	; (80028e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2232      	movs	r2, #50	; 0x32
 80027e6:	fb02 f303 	mul.w	r3, r2, r3
 80027ea:	4a3f      	ldr	r2, [pc, #252]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	0c9b      	lsrs	r3, r3, #18
 80027f2:	3301      	adds	r3, #1
 80027f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027f6:	e002      	b.n	80027fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027fe:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280a:	d102      	bne.n	8002812 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f2      	bne.n	80027f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002812:	4b33      	ldr	r3, [pc, #204]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800281e:	d158      	bne.n	80028d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e057      	b.n	80028d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002824:	4b2e      	ldr	r3, [pc, #184]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800282a:	4a2d      	ldr	r2, [pc, #180]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800282c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002830:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002834:	e04d      	b.n	80028d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800283c:	d141      	bne.n	80028c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800283e:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284a:	d131      	bne.n	80028b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800284c:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800284e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002852:	4a23      	ldr	r2, [pc, #140]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002858:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800285c:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002864:	4a1e      	ldr	r2, [pc, #120]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800286a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800286c:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2232      	movs	r2, #50	; 0x32
 8002872:	fb02 f303 	mul.w	r3, r2, r3
 8002876:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	0c9b      	lsrs	r3, r3, #18
 800287e:	3301      	adds	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002882:	e002      	b.n	800288a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3b01      	subs	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002896:	d102      	bne.n	800289e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f2      	bne.n	8002884 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028aa:	d112      	bne.n	80028d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e011      	b.n	80028d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028b6:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80028c0:	e007      	b.n	80028d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028ca:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	40007000 	.word	0x40007000
 80028e4:	20000004 	.word	0x20000004
 80028e8:	431bde83 	.word	0x431bde83

080028ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e306      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d075      	beq.n	80029f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800290a:	4b97      	ldr	r3, [pc, #604]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002914:	4b94      	ldr	r3, [pc, #592]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b0c      	cmp	r3, #12
 8002922:	d102      	bne.n	800292a <HAL_RCC_OscConfig+0x3e>
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	2b03      	cmp	r3, #3
 8002928:	d002      	beq.n	8002930 <HAL_RCC_OscConfig+0x44>
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2b08      	cmp	r3, #8
 800292e:	d10b      	bne.n	8002948 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002930:	4b8d      	ldr	r3, [pc, #564]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d05b      	beq.n	80029f4 <HAL_RCC_OscConfig+0x108>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d157      	bne.n	80029f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e2e1      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002950:	d106      	bne.n	8002960 <HAL_RCC_OscConfig+0x74>
 8002952:	4b85      	ldr	r3, [pc, #532]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a84      	ldr	r2, [pc, #528]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e01d      	b.n	800299c <HAL_RCC_OscConfig+0xb0>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0x98>
 800296a:	4b7f      	ldr	r3, [pc, #508]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a7e      	ldr	r2, [pc, #504]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	4b7c      	ldr	r3, [pc, #496]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a7b      	ldr	r2, [pc, #492]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 800297c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e00b      	b.n	800299c <HAL_RCC_OscConfig+0xb0>
 8002984:	4b78      	ldr	r3, [pc, #480]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a77      	ldr	r2, [pc, #476]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 800298a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	4b75      	ldr	r3, [pc, #468]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a74      	ldr	r2, [pc, #464]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d013      	beq.n	80029cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7ff fc3a 	bl	800221c <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ac:	f7ff fc36 	bl	800221c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e2a6      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029be:	4b6a      	ldr	r3, [pc, #424]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0xc0>
 80029ca:	e014      	b.n	80029f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7ff fc26 	bl	800221c <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d4:	f7ff fc22 	bl	800221c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e292      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029e6:	4b60      	ldr	r3, [pc, #384]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0xe8>
 80029f2:	e000      	b.n	80029f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d075      	beq.n	8002aee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a02:	4b59      	ldr	r3, [pc, #356]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a0c:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2b0c      	cmp	r3, #12
 8002a1a:	d102      	bne.n	8002a22 <HAL_RCC_OscConfig+0x136>
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d002      	beq.n	8002a28 <HAL_RCC_OscConfig+0x13c>
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d11f      	bne.n	8002a68 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a28:	4b4f      	ldr	r3, [pc, #316]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_OscConfig+0x154>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e265      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a40:	4b49      	ldr	r3, [pc, #292]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	061b      	lsls	r3, r3, #24
 8002a4e:	4946      	ldr	r1, [pc, #280]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a54:	4b45      	ldr	r3, [pc, #276]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fb93 	bl	8002184 <HAL_InitTick>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d043      	beq.n	8002aec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e251      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d023      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a70:	4b3d      	ldr	r3, [pc, #244]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a3c      	ldr	r2, [pc, #240]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7ff fbce 	bl	800221c <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a84:	f7ff fbca 	bl	800221c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e23a      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a96:	4b34      	ldr	r3, [pc, #208]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	4b31      	ldr	r3, [pc, #196]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	061b      	lsls	r3, r3, #24
 8002ab0:	492d      	ldr	r1, [pc, #180]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
 8002ab6:	e01a      	b.n	8002aee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab8:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2a      	ldr	r2, [pc, #168]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002abe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7ff fbaa 	bl	800221c <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002acc:	f7ff fba6 	bl	800221c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e216      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ade:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x1e0>
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d041      	beq.n	8002b7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01c      	beq.n	8002b3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b02:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b08:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b12:	f7ff fb83 	bl	800221c <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b1a:	f7ff fb7f 	bl	800221c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e1ef      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ef      	beq.n	8002b1a <HAL_RCC_OscConfig+0x22e>
 8002b3a:	e020      	b.n	8002b7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b42:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002b44:	f023 0301 	bic.w	r3, r3, #1
 8002b48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4c:	f7ff fb66 	bl	800221c <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b52:	e00d      	b.n	8002b70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b54:	f7ff fb62 	bl	800221c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d906      	bls.n	8002b70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e1d2      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b70:	4b8c      	ldr	r3, [pc, #560]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1ea      	bne.n	8002b54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 80a6 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b90:	4b84      	ldr	r3, [pc, #528]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x2b4>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x2b6>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba6:	4b7f      	ldr	r3, [pc, #508]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002baa:	4a7e      	ldr	r2, [pc, #504]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8002bb2:	4b7c      	ldr	r3, [pc, #496]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc2:	4b79      	ldr	r3, [pc, #484]	; (8002da8 <HAL_RCC_OscConfig+0x4bc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d118      	bne.n	8002c00 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bce:	4b76      	ldr	r3, [pc, #472]	; (8002da8 <HAL_RCC_OscConfig+0x4bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a75      	ldr	r2, [pc, #468]	; (8002da8 <HAL_RCC_OscConfig+0x4bc>)
 8002bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bda:	f7ff fb1f 	bl	800221c <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be2:	f7ff fb1b 	bl	800221c <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e18b      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf4:	4b6c      	ldr	r3, [pc, #432]	; (8002da8 <HAL_RCC_OscConfig+0x4bc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d108      	bne.n	8002c1a <HAL_RCC_OscConfig+0x32e>
 8002c08:	4b66      	ldr	r3, [pc, #408]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0e:	4a65      	ldr	r2, [pc, #404]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c18:	e024      	b.n	8002c64 <HAL_RCC_OscConfig+0x378>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b05      	cmp	r3, #5
 8002c20:	d110      	bne.n	8002c44 <HAL_RCC_OscConfig+0x358>
 8002c22:	4b60      	ldr	r3, [pc, #384]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c28:	4a5e      	ldr	r2, [pc, #376]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002c2a:	f043 0304 	orr.w	r3, r3, #4
 8002c2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c32:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c38:	4a5a      	ldr	r2, [pc, #360]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c42:	e00f      	b.n	8002c64 <HAL_RCC_OscConfig+0x378>
 8002c44:	4b57      	ldr	r3, [pc, #348]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4a:	4a56      	ldr	r2, [pc, #344]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c54:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	4a52      	ldr	r2, [pc, #328]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002c5c:	f023 0304 	bic.w	r3, r3, #4
 8002c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d016      	beq.n	8002c9a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6c:	f7ff fad6 	bl	800221c <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c74:	f7ff fad2 	bl	800221c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e140      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c8a:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0ed      	beq.n	8002c74 <HAL_RCC_OscConfig+0x388>
 8002c98:	e015      	b.n	8002cc6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9a:	f7ff fabf 	bl	800221c <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f7ff fabb 	bl	800221c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e129      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cb8:	4b3a      	ldr	r3, [pc, #232]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1ed      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cc6:	7ffb      	ldrb	r3, [r7, #31]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d105      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ccc:	4b35      	ldr	r3, [pc, #212]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd0:	4a34      	ldr	r2, [pc, #208]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d03c      	beq.n	8002d5e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d01c      	beq.n	8002d26 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cec:	4b2d      	ldr	r3, [pc, #180]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cf2:	4a2c      	ldr	r2, [pc, #176]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7ff fa8e 	bl	800221c <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d04:	f7ff fa8a 	bl	800221c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e0fa      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d16:	4b23      	ldr	r3, [pc, #140]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0ef      	beq.n	8002d04 <HAL_RCC_OscConfig+0x418>
 8002d24:	e01b      	b.n	8002d5e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d26:	4b1f      	ldr	r3, [pc, #124]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d2c:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002d2e:	f023 0301 	bic.w	r3, r3, #1
 8002d32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d36:	f7ff fa71 	bl	800221c <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d3e:	f7ff fa6d 	bl	800221c <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e0dd      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d50:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1ef      	bne.n	8002d3e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80d1 	beq.w	8002f0a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d68:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 030c 	and.w	r3, r3, #12
 8002d70:	2b0c      	cmp	r3, #12
 8002d72:	f000 808b 	beq.w	8002e8c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d15e      	bne.n	8002e3c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7e:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a08      	ldr	r2, [pc, #32]	; (8002da4 <HAL_RCC_OscConfig+0x4b8>)
 8002d84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7ff fa47 	bl	800221c <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d90:	e00c      	b.n	8002dac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d92:	f7ff fa43 	bl	800221c <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d905      	bls.n	8002dac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0b3      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dac:	4b59      	ldr	r3, [pc, #356]	; (8002f14 <HAL_RCC_OscConfig+0x628>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1ec      	bne.n	8002d92 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db8:	4b56      	ldr	r3, [pc, #344]	; (8002f14 <HAL_RCC_OscConfig+0x628>)
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	4b56      	ldr	r3, [pc, #344]	; (8002f18 <HAL_RCC_OscConfig+0x62c>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6a11      	ldr	r1, [r2, #32]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dc8:	3a01      	subs	r2, #1
 8002dca:	0112      	lsls	r2, r2, #4
 8002dcc:	4311      	orrs	r1, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002dd2:	0212      	lsls	r2, r2, #8
 8002dd4:	4311      	orrs	r1, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002dda:	0852      	lsrs	r2, r2, #1
 8002ddc:	3a01      	subs	r2, #1
 8002dde:	0552      	lsls	r2, r2, #21
 8002de0:	4311      	orrs	r1, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002de6:	0852      	lsrs	r2, r2, #1
 8002de8:	3a01      	subs	r2, #1
 8002dea:	0652      	lsls	r2, r2, #25
 8002dec:	4311      	orrs	r1, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002df2:	06d2      	lsls	r2, r2, #27
 8002df4:	430a      	orrs	r2, r1
 8002df6:	4947      	ldr	r1, [pc, #284]	; (8002f14 <HAL_RCC_OscConfig+0x628>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dfc:	4b45      	ldr	r3, [pc, #276]	; (8002f14 <HAL_RCC_OscConfig+0x628>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a44      	ldr	r2, [pc, #272]	; (8002f14 <HAL_RCC_OscConfig+0x628>)
 8002e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e08:	4b42      	ldr	r3, [pc, #264]	; (8002f14 <HAL_RCC_OscConfig+0x628>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4a41      	ldr	r2, [pc, #260]	; (8002f14 <HAL_RCC_OscConfig+0x628>)
 8002e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7ff fa02 	bl	800221c <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7ff f9fe 	bl	800221c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e06e      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2e:	4b39      	ldr	r3, [pc, #228]	; (8002f14 <HAL_RCC_OscConfig+0x628>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x530>
 8002e3a:	e066      	b.n	8002f0a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3c:	4b35      	ldr	r3, [pc, #212]	; (8002f14 <HAL_RCC_OscConfig+0x628>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a34      	ldr	r2, [pc, #208]	; (8002f14 <HAL_RCC_OscConfig+0x628>)
 8002e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e46:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e48:	4b32      	ldr	r3, [pc, #200]	; (8002f14 <HAL_RCC_OscConfig+0x628>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a31      	ldr	r2, [pc, #196]	; (8002f14 <HAL_RCC_OscConfig+0x628>)
 8002e4e:	f023 0303 	bic.w	r3, r3, #3
 8002e52:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e54:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <HAL_RCC_OscConfig+0x628>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a2e      	ldr	r2, [pc, #184]	; (8002f14 <HAL_RCC_OscConfig+0x628>)
 8002e5a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7ff f9da 	bl	800221c <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7ff f9d6 	bl	800221c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e046      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7e:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <HAL_RCC_OscConfig+0x628>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x580>
 8002e8a:	e03e      	b.n	8002f0a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e039      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002e98:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <HAL_RCC_OscConfig+0x628>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 0203 	and.w	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d12c      	bne.n	8002f06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d123      	bne.n	8002f06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d11b      	bne.n	8002f06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d113      	bne.n	8002f06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	3b01      	subs	r3, #1
 8002eec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d109      	bne.n	8002f06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efc:	085b      	lsrs	r3, r3, #1
 8002efe:	3b01      	subs	r3, #1
 8002f00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d001      	beq.n	8002f0a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3720      	adds	r7, #32
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000
 8002f18:	019f800c 	.word	0x019f800c

08002f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e11e      	b.n	8003172 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f34:	4b91      	ldr	r3, [pc, #580]	; (800317c <HAL_RCC_ClockConfig+0x260>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d910      	bls.n	8002f64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f42:	4b8e      	ldr	r3, [pc, #568]	; (800317c <HAL_RCC_ClockConfig+0x260>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 020f 	bic.w	r2, r3, #15
 8002f4a:	498c      	ldr	r1, [pc, #560]	; (800317c <HAL_RCC_ClockConfig+0x260>)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	4b8a      	ldr	r3, [pc, #552]	; (800317c <HAL_RCC_ClockConfig+0x260>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e106      	b.n	8003172 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d073      	beq.n	8003058 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d129      	bne.n	8002fcc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f78:	4b81      	ldr	r3, [pc, #516]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0f4      	b.n	8003172 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002f88:	f000 f99e 	bl	80032c8 <RCC_GetSysClockFreqFromPLLSource>
 8002f8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4a7c      	ldr	r2, [pc, #496]	; (8003184 <HAL_RCC_ClockConfig+0x268>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d93f      	bls.n	8003016 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f96:	4b7a      	ldr	r3, [pc, #488]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d033      	beq.n	8003016 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d12f      	bne.n	8003016 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fb6:	4b72      	ldr	r3, [pc, #456]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fbe:	4a70      	ldr	r2, [pc, #448]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8002fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	e024      	b.n	8003016 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd4:	4b6a      	ldr	r3, [pc, #424]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0c6      	b.n	8003172 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fe4:	4b66      	ldr	r3, [pc, #408]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0be      	b.n	8003172 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ff4:	f000 f8ce 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8002ff8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4a61      	ldr	r2, [pc, #388]	; (8003184 <HAL_RCC_ClockConfig+0x268>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d909      	bls.n	8003016 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003002:	4b5f      	ldr	r3, [pc, #380]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800300a:	4a5d      	ldr	r2, [pc, #372]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 800300c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003010:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003016:	4b5a      	ldr	r3, [pc, #360]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f023 0203 	bic.w	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4957      	ldr	r1, [pc, #348]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8003024:	4313      	orrs	r3, r2
 8003026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003028:	f7ff f8f8 	bl	800221c <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302e:	e00a      	b.n	8003046 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003030:	f7ff f8f4 	bl	800221c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e095      	b.n	8003172 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	4b4e      	ldr	r3, [pc, #312]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 020c 	and.w	r2, r3, #12
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	429a      	cmp	r2, r3
 8003056:	d1eb      	bne.n	8003030 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d023      	beq.n	80030ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003070:	4b43      	ldr	r3, [pc, #268]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a42      	ldr	r2, [pc, #264]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8003076:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800307a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d007      	beq.n	8003098 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003088:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003090:	4a3b      	ldr	r2, [pc, #236]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8003092:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003096:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003098:	4b39      	ldr	r3, [pc, #228]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4936      	ldr	r1, [pc, #216]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
 80030aa:	e008      	b.n	80030be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b80      	cmp	r3, #128	; 0x80
 80030b0:	d105      	bne.n	80030be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030b2:	4b33      	ldr	r3, [pc, #204]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	4a32      	ldr	r2, [pc, #200]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 80030b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030be:	4b2f      	ldr	r3, [pc, #188]	; (800317c <HAL_RCC_ClockConfig+0x260>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d21d      	bcs.n	8003108 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030cc:	4b2b      	ldr	r3, [pc, #172]	; (800317c <HAL_RCC_ClockConfig+0x260>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f023 020f 	bic.w	r2, r3, #15
 80030d4:	4929      	ldr	r1, [pc, #164]	; (800317c <HAL_RCC_ClockConfig+0x260>)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030dc:	f7ff f89e 	bl	800221c <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e4:	f7ff f89a 	bl	800221c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e03b      	b.n	8003172 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_RCC_ClockConfig+0x260>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d1ed      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003114:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	4917      	ldr	r1, [pc, #92]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d009      	beq.n	8003146 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003132:	4b13      	ldr	r3, [pc, #76]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	490f      	ldr	r1, [pc, #60]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003146:	f000 f825 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 800314a:	4602      	mov	r2, r0
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <HAL_RCC_ClockConfig+0x264>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	490c      	ldr	r1, [pc, #48]	; (8003188 <HAL_RCC_ClockConfig+0x26c>)
 8003158:	5ccb      	ldrb	r3, [r1, r3]
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <HAL_RCC_ClockConfig+0x270>)
 8003164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <HAL_RCC_ClockConfig+0x274>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff f80a 	bl	8002184 <HAL_InitTick>
 8003170:	4603      	mov	r3, r0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40022000 	.word	0x40022000
 8003180:	40021000 	.word	0x40021000
 8003184:	04c4b400 	.word	0x04c4b400
 8003188:	08006694 	.word	0x08006694
 800318c:	20000004 	.word	0x20000004
 8003190:	20000008 	.word	0x20000008

08003194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800319a:	4b2c      	ldr	r3, [pc, #176]	; (800324c <HAL_RCC_GetSysClockFreq+0xb8>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d102      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031a6:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	e047      	b.n	800323c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031ac:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d102      	bne.n	80031be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031b8:	4b26      	ldr	r3, [pc, #152]	; (8003254 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	e03e      	b.n	800323c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80031be:	4b23      	ldr	r3, [pc, #140]	; (800324c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d136      	bne.n	8003238 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ca:	4b20      	ldr	r3, [pc, #128]	; (800324c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031d4:	4b1d      	ldr	r3, [pc, #116]	; (800324c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	3301      	adds	r3, #1
 80031e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d10c      	bne.n	8003202 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031e8:	4a1a      	ldr	r2, [pc, #104]	; (8003254 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	4a16      	ldr	r2, [pc, #88]	; (800324c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031f2:	68d2      	ldr	r2, [r2, #12]
 80031f4:	0a12      	lsrs	r2, r2, #8
 80031f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	617b      	str	r3, [r7, #20]
      break;
 8003200:	e00c      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003202:	4a13      	ldr	r2, [pc, #76]	; (8003250 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	4a10      	ldr	r2, [pc, #64]	; (800324c <HAL_RCC_GetSysClockFreq+0xb8>)
 800320c:	68d2      	ldr	r2, [r2, #12]
 800320e:	0a12      	lsrs	r2, r2, #8
 8003210:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003214:	fb02 f303 	mul.w	r3, r2, r3
 8003218:	617b      	str	r3, [r7, #20]
      break;
 800321a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_GetSysClockFreq+0xb8>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	0e5b      	lsrs	r3, r3, #25
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	3301      	adds	r3, #1
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	fbb2 f3f3 	udiv	r3, r2, r3
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	e001      	b.n	800323c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800323c:	693b      	ldr	r3, [r7, #16]
}
 800323e:	4618      	mov	r0, r3
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000
 8003250:	00f42400 	.word	0x00f42400
 8003254:	007a1200 	.word	0x007a1200

08003258 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_RCC_GetHCLKFreq+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000004 	.word	0x20000004

08003270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003274:	f7ff fff0 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCC_GetPCLK1Freq+0x24>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4904      	ldr	r1, [pc, #16]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000
 8003298:	080066a4 	.word	0x080066a4

0800329c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032a0:	f7ff ffda 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0adb      	lsrs	r3, r3, #11
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4904      	ldr	r1, [pc, #16]	; (80032c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000
 80032c4:	080066a4 	.word	0x080066a4

080032c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ce:	4b1e      	ldr	r3, [pc, #120]	; (8003348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	3301      	adds	r3, #1
 80032e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d10c      	bne.n	8003306 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032ec:	4a17      	ldr	r2, [pc, #92]	; (800334c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	4a14      	ldr	r2, [pc, #80]	; (8003348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032f6:	68d2      	ldr	r2, [r2, #12]
 80032f8:	0a12      	lsrs	r2, r2, #8
 80032fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032fe:	fb02 f303 	mul.w	r3, r2, r3
 8003302:	617b      	str	r3, [r7, #20]
    break;
 8003304:	e00c      	b.n	8003320 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003306:	4a12      	ldr	r2, [pc, #72]	; (8003350 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	fbb2 f3f3 	udiv	r3, r2, r3
 800330e:	4a0e      	ldr	r2, [pc, #56]	; (8003348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003310:	68d2      	ldr	r2, [r2, #12]
 8003312:	0a12      	lsrs	r2, r2, #8
 8003314:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003318:	fb02 f303 	mul.w	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]
    break;
 800331e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	0e5b      	lsrs	r3, r3, #25
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	3301      	adds	r3, #1
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	fbb2 f3f3 	udiv	r3, r2, r3
 8003338:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800333a:	687b      	ldr	r3, [r7, #4]
}
 800333c:	4618      	mov	r0, r3
 800333e:	371c      	adds	r7, #28
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	40021000 	.word	0x40021000
 800334c:	007a1200 	.word	0x007a1200
 8003350:	00f42400 	.word	0x00f42400

08003354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800335c:	2300      	movs	r3, #0
 800335e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003360:	2300      	movs	r3, #0
 8003362:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8098 	beq.w	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003372:	2300      	movs	r3, #0
 8003374:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003376:	4b43      	ldr	r3, [pc, #268]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10d      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003382:	4b40      	ldr	r3, [pc, #256]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	4a3f      	ldr	r2, [pc, #252]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338c:	6593      	str	r3, [r2, #88]	; 0x58
 800338e:	4b3d      	ldr	r3, [pc, #244]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339a:	2301      	movs	r3, #1
 800339c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800339e:	4b3a      	ldr	r3, [pc, #232]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a39      	ldr	r2, [pc, #228]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033aa:	f7fe ff37 	bl	800221c <HAL_GetTick>
 80033ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033b0:	e009      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b2:	f7fe ff33 	bl	800221c <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d902      	bls.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	74fb      	strb	r3, [r7, #19]
        break;
 80033c4:	e005      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033c6:	4b30      	ldr	r3, [pc, #192]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0ef      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80033d2:	7cfb      	ldrb	r3, [r7, #19]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d159      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033d8:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d01e      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d019      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033f4:	4b23      	ldr	r3, [pc, #140]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003400:	4b20      	ldr	r3, [pc, #128]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	4a1f      	ldr	r2, [pc, #124]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003410:	4b1c      	ldr	r3, [pc, #112]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	4a1b      	ldr	r2, [pc, #108]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003420:	4a18      	ldr	r2, [pc, #96]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d016      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003432:	f7fe fef3 	bl	800221c <HAL_GetTick>
 8003436:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003438:	e00b      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343a:	f7fe feef 	bl	800221c <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	f241 3288 	movw	r2, #5000	; 0x1388
 8003448:	4293      	cmp	r3, r2
 800344a:	d902      	bls.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	74fb      	strb	r3, [r7, #19]
            break;
 8003450:	e006      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ec      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	4903      	ldr	r1, [pc, #12]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800347c:	e008      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800347e:	7cfb      	ldrb	r3, [r7, #19]
 8003480:	74bb      	strb	r3, [r7, #18]
 8003482:	e005      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003484:	40021000 	.word	0x40021000
 8003488:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003490:	7c7b      	ldrb	r3, [r7, #17]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d105      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003496:	4ba6      	ldr	r3, [pc, #664]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349a:	4aa5      	ldr	r2, [pc, #660]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034ae:	4ba0      	ldr	r3, [pc, #640]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	f023 0203 	bic.w	r2, r3, #3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	499c      	ldr	r1, [pc, #624]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034d0:	4b97      	ldr	r3, [pc, #604]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d6:	f023 020c 	bic.w	r2, r3, #12
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	4994      	ldr	r1, [pc, #592]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034f2:	4b8f      	ldr	r3, [pc, #572]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	498b      	ldr	r1, [pc, #556]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003514:	4b86      	ldr	r3, [pc, #536]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	4983      	ldr	r1, [pc, #524]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003536:	4b7e      	ldr	r3, [pc, #504]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	497a      	ldr	r1, [pc, #488]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003558:	4b75      	ldr	r3, [pc, #468]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	4972      	ldr	r1, [pc, #456]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800357a:	4b6d      	ldr	r3, [pc, #436]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003580:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	4969      	ldr	r1, [pc, #420]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800359c:	4b64      	ldr	r3, [pc, #400]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	4961      	ldr	r1, [pc, #388]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035be:	4b5c      	ldr	r3, [pc, #368]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	4958      	ldr	r1, [pc, #352]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d015      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035e0:	4b53      	ldr	r3, [pc, #332]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	4950      	ldr	r1, [pc, #320]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035fe:	d105      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003600:	4b4b      	ldr	r3, [pc, #300]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4a4a      	ldr	r2, [pc, #296]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800360a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003614:	2b00      	cmp	r3, #0
 8003616:	d015      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003618:	4b45      	ldr	r3, [pc, #276]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	4942      	ldr	r1, [pc, #264]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003636:	d105      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003638:	4b3d      	ldr	r3, [pc, #244]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a3c      	ldr	r2, [pc, #240]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003642:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003650:	4b37      	ldr	r3, [pc, #220]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	4934      	ldr	r1, [pc, #208]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800366e:	d105      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003670:	4b2f      	ldr	r3, [pc, #188]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a2e      	ldr	r2, [pc, #184]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800367a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d015      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003688:	4b29      	ldr	r3, [pc, #164]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003696:	4926      	ldr	r1, [pc, #152]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036a6:	d105      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a8:	4b21      	ldr	r3, [pc, #132]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a20      	ldr	r2, [pc, #128]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d015      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036c0:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ce:	4918      	ldr	r1, [pc, #96]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036de:	d105      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4a12      	ldr	r2, [pc, #72]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d015      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036f8:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	490a      	ldr	r1, [pc, #40]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003716:	d105      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4a04      	ldr	r2, [pc, #16]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800371e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003722:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003724:	7cbb      	ldrb	r3, [r7, #18]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000

08003734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e042      	b.n	80037cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374c:	2b00      	cmp	r3, #0
 800374e:	d106      	bne.n	800375e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7fd faed 	bl	8000d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2224      	movs	r2, #36	; 0x24
 8003762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f996 	bl	8003aa8 <UART_SetConfig>
 800377c:	4603      	mov	r3, r0
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e022      	b.n	80037cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fc56 	bl	8004040 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fcdd 	bl	8004184 <UART_CheckIdleState>
 80037ca:	4603      	mov	r3, r0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	; 0x28
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	f040 8083 	bne.w	80038f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <HAL_UART_Transmit+0x28>
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e07b      	b.n	80038f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_UART_Transmit+0x3a>
 800380a:	2302      	movs	r3, #2
 800380c:	e074      	b.n	80038f8 <HAL_UART_Transmit+0x124>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2221      	movs	r2, #33	; 0x21
 8003822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003826:	f7fe fcf9 	bl	800221c <HAL_GetTick>
 800382a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	88fa      	ldrh	r2, [r7, #6]
 8003830:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	88fa      	ldrh	r2, [r7, #6]
 8003838:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003844:	d108      	bne.n	8003858 <HAL_UART_Transmit+0x84>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d104      	bne.n	8003858 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	e003      	b.n	8003860 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800385c:	2300      	movs	r3, #0
 800385e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003868:	e02c      	b.n	80038c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2200      	movs	r2, #0
 8003872:	2180      	movs	r1, #128	; 0x80
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fcd0 	bl	800421a <UART_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e039      	b.n	80038f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10b      	bne.n	80038a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003898:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	3302      	adds	r3, #2
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	e007      	b.n	80038b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	781a      	ldrb	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	3301      	adds	r3, #1
 80038b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1cc      	bne.n	800386a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2200      	movs	r2, #0
 80038d8:	2140      	movs	r1, #64	; 0x40
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 fc9d 	bl	800421a <UART_WaitOnFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e006      	b.n	80038f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e000      	b.n	80038f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80038f6:	2302      	movs	r3, #2
  }
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3720      	adds	r7, #32
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	2b20      	cmp	r3, #32
 8003918:	f040 80c0 	bne.w	8003a9c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_UART_Receive+0x28>
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0b8      	b.n	8003a9e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_UART_Receive+0x3a>
 8003936:	2302      	movs	r3, #2
 8003938:	e0b1      	b.n	8003a9e <HAL_UART_Receive+0x19e>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2222      	movs	r2, #34	; 0x22
 800394e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003958:	f7fe fc60 	bl	800221c <HAL_GetTick>
 800395c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	88fa      	ldrh	r2, [r7, #6]
 8003962:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	88fa      	ldrh	r2, [r7, #6]
 800396a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003976:	d10e      	bne.n	8003996 <HAL_UART_Receive+0x96>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d105      	bne.n	800398c <HAL_UART_Receive+0x8c>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003986:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800398a:	e02d      	b.n	80039e8 <HAL_UART_Receive+0xe8>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	22ff      	movs	r2, #255	; 0xff
 8003990:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003994:	e028      	b.n	80039e8 <HAL_UART_Receive+0xe8>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10d      	bne.n	80039ba <HAL_UART_Receive+0xba>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d104      	bne.n	80039b0 <HAL_UART_Receive+0xb0>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	22ff      	movs	r2, #255	; 0xff
 80039aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039ae:	e01b      	b.n	80039e8 <HAL_UART_Receive+0xe8>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	227f      	movs	r2, #127	; 0x7f
 80039b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039b8:	e016      	b.n	80039e8 <HAL_UART_Receive+0xe8>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c2:	d10d      	bne.n	80039e0 <HAL_UART_Receive+0xe0>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d104      	bne.n	80039d6 <HAL_UART_Receive+0xd6>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	227f      	movs	r2, #127	; 0x7f
 80039d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039d4:	e008      	b.n	80039e8 <HAL_UART_Receive+0xe8>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	223f      	movs	r2, #63	; 0x3f
 80039da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039de:	e003      	b.n	80039e8 <HAL_UART_Receive+0xe8>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80039ee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f8:	d108      	bne.n	8003a0c <HAL_UART_Receive+0x10c>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	e003      	b.n	8003a14 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003a1c:	e032      	b.n	8003a84 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2200      	movs	r2, #0
 8003a26:	2120      	movs	r1, #32
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 fbf6 	bl	800421a <UART_WaitOnFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e032      	b.n	8003a9e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10c      	bne.n	8003a58 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	8a7b      	ldrh	r3, [r7, #18]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	3302      	adds	r3, #2
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	e00c      	b.n	8003a72 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	8a7b      	ldrh	r3, [r7, #18]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	4013      	ands	r3, r2
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1c6      	bne.n	8003a1e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e000      	b.n	8003a9e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
  }
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aac:	b08c      	sub	sp, #48	; 0x30
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4bab      	ldr	r3, [pc, #684]	; (8003d84 <UART_SetConfig+0x2dc>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4aa0      	ldr	r2, [pc, #640]	; (8003d88 <UART_SetConfig+0x2e0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b10:	4313      	orrs	r3, r2
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003b1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	f023 010f 	bic.w	r1, r3, #15
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a91      	ldr	r2, [pc, #580]	; (8003d8c <UART_SetConfig+0x2e4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d125      	bne.n	8003b98 <UART_SetConfig+0xf0>
 8003b4c:	4b90      	ldr	r3, [pc, #576]	; (8003d90 <UART_SetConfig+0x2e8>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d81a      	bhi.n	8003b90 <UART_SetConfig+0xe8>
 8003b5a:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <UART_SetConfig+0xb8>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003b71 	.word	0x08003b71
 8003b64:	08003b81 	.word	0x08003b81
 8003b68:	08003b79 	.word	0x08003b79
 8003b6c:	08003b89 	.word	0x08003b89
 8003b70:	2301      	movs	r3, #1
 8003b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b76:	e0d6      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b7e:	e0d2      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003b80:	2304      	movs	r3, #4
 8003b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b86:	e0ce      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003b88:	2308      	movs	r3, #8
 8003b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b8e:	e0ca      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003b90:	2310      	movs	r3, #16
 8003b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b96:	e0c6      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a7d      	ldr	r2, [pc, #500]	; (8003d94 <UART_SetConfig+0x2ec>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d138      	bne.n	8003c14 <UART_SetConfig+0x16c>
 8003ba2:	4b7b      	ldr	r3, [pc, #492]	; (8003d90 <UART_SetConfig+0x2e8>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	2b0c      	cmp	r3, #12
 8003bae:	d82d      	bhi.n	8003c0c <UART_SetConfig+0x164>
 8003bb0:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <UART_SetConfig+0x110>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003bed 	.word	0x08003bed
 8003bbc:	08003c0d 	.word	0x08003c0d
 8003bc0:	08003c0d 	.word	0x08003c0d
 8003bc4:	08003c0d 	.word	0x08003c0d
 8003bc8:	08003bfd 	.word	0x08003bfd
 8003bcc:	08003c0d 	.word	0x08003c0d
 8003bd0:	08003c0d 	.word	0x08003c0d
 8003bd4:	08003c0d 	.word	0x08003c0d
 8003bd8:	08003bf5 	.word	0x08003bf5
 8003bdc:	08003c0d 	.word	0x08003c0d
 8003be0:	08003c0d 	.word	0x08003c0d
 8003be4:	08003c0d 	.word	0x08003c0d
 8003be8:	08003c05 	.word	0x08003c05
 8003bec:	2300      	movs	r3, #0
 8003bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bf2:	e098      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bfa:	e094      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c02:	e090      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003c04:	2308      	movs	r3, #8
 8003c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c0a:	e08c      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c12:	e088      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a5f      	ldr	r2, [pc, #380]	; (8003d98 <UART_SetConfig+0x2f0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d125      	bne.n	8003c6a <UART_SetConfig+0x1c2>
 8003c1e:	4b5c      	ldr	r3, [pc, #368]	; (8003d90 <UART_SetConfig+0x2e8>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c28:	2b30      	cmp	r3, #48	; 0x30
 8003c2a:	d016      	beq.n	8003c5a <UART_SetConfig+0x1b2>
 8003c2c:	2b30      	cmp	r3, #48	; 0x30
 8003c2e:	d818      	bhi.n	8003c62 <UART_SetConfig+0x1ba>
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d00a      	beq.n	8003c4a <UART_SetConfig+0x1a2>
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d814      	bhi.n	8003c62 <UART_SetConfig+0x1ba>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <UART_SetConfig+0x19a>
 8003c3c:	2b10      	cmp	r3, #16
 8003c3e:	d008      	beq.n	8003c52 <UART_SetConfig+0x1aa>
 8003c40:	e00f      	b.n	8003c62 <UART_SetConfig+0x1ba>
 8003c42:	2300      	movs	r3, #0
 8003c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c48:	e06d      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c50:	e069      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003c52:	2304      	movs	r3, #4
 8003c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c58:	e065      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c60:	e061      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003c62:	2310      	movs	r3, #16
 8003c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c68:	e05d      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a4b      	ldr	r2, [pc, #300]	; (8003d9c <UART_SetConfig+0x2f4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d125      	bne.n	8003cc0 <UART_SetConfig+0x218>
 8003c74:	4b46      	ldr	r3, [pc, #280]	; (8003d90 <UART_SetConfig+0x2e8>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c80:	d016      	beq.n	8003cb0 <UART_SetConfig+0x208>
 8003c82:	2bc0      	cmp	r3, #192	; 0xc0
 8003c84:	d818      	bhi.n	8003cb8 <UART_SetConfig+0x210>
 8003c86:	2b80      	cmp	r3, #128	; 0x80
 8003c88:	d00a      	beq.n	8003ca0 <UART_SetConfig+0x1f8>
 8003c8a:	2b80      	cmp	r3, #128	; 0x80
 8003c8c:	d814      	bhi.n	8003cb8 <UART_SetConfig+0x210>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <UART_SetConfig+0x1f0>
 8003c92:	2b40      	cmp	r3, #64	; 0x40
 8003c94:	d008      	beq.n	8003ca8 <UART_SetConfig+0x200>
 8003c96:	e00f      	b.n	8003cb8 <UART_SetConfig+0x210>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9e:	e042      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca6:	e03e      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003ca8:	2304      	movs	r3, #4
 8003caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cae:	e03a      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003cb0:	2308      	movs	r3, #8
 8003cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb6:	e036      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003cb8:	2310      	movs	r3, #16
 8003cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cbe:	e032      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a30      	ldr	r2, [pc, #192]	; (8003d88 <UART_SetConfig+0x2e0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d12a      	bne.n	8003d20 <UART_SetConfig+0x278>
 8003cca:	4b31      	ldr	r3, [pc, #196]	; (8003d90 <UART_SetConfig+0x2e8>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cd8:	d01a      	beq.n	8003d10 <UART_SetConfig+0x268>
 8003cda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cde:	d81b      	bhi.n	8003d18 <UART_SetConfig+0x270>
 8003ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce4:	d00c      	beq.n	8003d00 <UART_SetConfig+0x258>
 8003ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cea:	d815      	bhi.n	8003d18 <UART_SetConfig+0x270>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <UART_SetConfig+0x250>
 8003cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf4:	d008      	beq.n	8003d08 <UART_SetConfig+0x260>
 8003cf6:	e00f      	b.n	8003d18 <UART_SetConfig+0x270>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cfe:	e012      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003d00:	2302      	movs	r3, #2
 8003d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d06:	e00e      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0e:	e00a      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003d10:	2308      	movs	r3, #8
 8003d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d16:	e006      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003d18:	2310      	movs	r3, #16
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1e:	e002      	b.n	8003d26 <UART_SetConfig+0x27e>
 8003d20:	2310      	movs	r3, #16
 8003d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <UART_SetConfig+0x2e0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	f040 80a8 	bne.w	8003e82 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d834      	bhi.n	8003da4 <UART_SetConfig+0x2fc>
 8003d3a:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <UART_SetConfig+0x298>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d65 	.word	0x08003d65
 8003d44:	08003da5 	.word	0x08003da5
 8003d48:	08003d6d 	.word	0x08003d6d
 8003d4c:	08003da5 	.word	0x08003da5
 8003d50:	08003d73 	.word	0x08003d73
 8003d54:	08003da5 	.word	0x08003da5
 8003d58:	08003da5 	.word	0x08003da5
 8003d5c:	08003da5 	.word	0x08003da5
 8003d60:	08003d7b 	.word	0x08003d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d64:	f7ff fa84 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 8003d68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d6a:	e021      	b.n	8003db0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <UART_SetConfig+0x2f8>)
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d70:	e01e      	b.n	8003db0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d72:	f7ff fa0f 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8003d76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d78:	e01a      	b.n	8003db0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d80:	e016      	b.n	8003db0 <UART_SetConfig+0x308>
 8003d82:	bf00      	nop
 8003d84:	cfff69f3 	.word	0xcfff69f3
 8003d88:	40008000 	.word	0x40008000
 8003d8c:	40013800 	.word	0x40013800
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40004400 	.word	0x40004400
 8003d98:	40004800 	.word	0x40004800
 8003d9c:	40004c00 	.word	0x40004c00
 8003da0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003dae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 812a 	beq.w	800400c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	4a9e      	ldr	r2, [pc, #632]	; (8004038 <UART_SetConfig+0x590>)
 8003dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d305      	bcc.n	8003de8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d903      	bls.n	8003df0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003dee:	e10d      	b.n	800400c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	2200      	movs	r2, #0
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	60fa      	str	r2, [r7, #12]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	4a8e      	ldr	r2, [pc, #568]	; (8004038 <UART_SetConfig+0x590>)
 8003dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2200      	movs	r2, #0
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e12:	f7fc fa5d 	bl	80002d0 <__aeabi_uldivmod>
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	020b      	lsls	r3, r1, #8
 8003e28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e2c:	0202      	lsls	r2, r0, #8
 8003e2e:	6979      	ldr	r1, [r7, #20]
 8003e30:	6849      	ldr	r1, [r1, #4]
 8003e32:	0849      	lsrs	r1, r1, #1
 8003e34:	2000      	movs	r0, #0
 8003e36:	460c      	mov	r4, r1
 8003e38:	4605      	mov	r5, r0
 8003e3a:	eb12 0804 	adds.w	r8, r2, r4
 8003e3e:	eb43 0905 	adc.w	r9, r3, r5
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	469a      	mov	sl, r3
 8003e4a:	4693      	mov	fp, r2
 8003e4c:	4652      	mov	r2, sl
 8003e4e:	465b      	mov	r3, fp
 8003e50:	4640      	mov	r0, r8
 8003e52:	4649      	mov	r1, r9
 8003e54:	f7fc fa3c 	bl	80002d0 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e66:	d308      	bcc.n	8003e7a <UART_SetConfig+0x3d2>
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e6e:	d204      	bcs.n	8003e7a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6a3a      	ldr	r2, [r7, #32]
 8003e76:	60da      	str	r2, [r3, #12]
 8003e78:	e0c8      	b.n	800400c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e80:	e0c4      	b.n	800400c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8a:	d167      	bne.n	8003f5c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003e8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d828      	bhi.n	8003ee6 <UART_SetConfig+0x43e>
 8003e94:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <UART_SetConfig+0x3f4>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	08003ec1 	.word	0x08003ec1
 8003ea0:	08003ec9 	.word	0x08003ec9
 8003ea4:	08003ed1 	.word	0x08003ed1
 8003ea8:	08003ee7 	.word	0x08003ee7
 8003eac:	08003ed7 	.word	0x08003ed7
 8003eb0:	08003ee7 	.word	0x08003ee7
 8003eb4:	08003ee7 	.word	0x08003ee7
 8003eb8:	08003ee7 	.word	0x08003ee7
 8003ebc:	08003edf 	.word	0x08003edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec0:	f7ff f9d6 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 8003ec4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ec6:	e014      	b.n	8003ef2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec8:	f7ff f9e8 	bl	800329c <HAL_RCC_GetPCLK2Freq>
 8003ecc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ece:	e010      	b.n	8003ef2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed0:	4b5a      	ldr	r3, [pc, #360]	; (800403c <UART_SetConfig+0x594>)
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ed4:	e00d      	b.n	8003ef2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed6:	f7ff f95d 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8003eda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003edc:	e009      	b.n	8003ef2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ee4:	e005      	b.n	8003ef2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ef0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 8089 	beq.w	800400c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	4a4e      	ldr	r2, [pc, #312]	; (8004038 <UART_SetConfig+0x590>)
 8003f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f04:	461a      	mov	r2, r3
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f0c:	005a      	lsls	r2, r3, #1
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	441a      	add	r2, r3
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	2b0f      	cmp	r3, #15
 8003f24:	d916      	bls.n	8003f54 <UART_SetConfig+0x4ac>
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2c:	d212      	bcs.n	8003f54 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	f023 030f 	bic.w	r3, r3, #15
 8003f36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	085b      	lsrs	r3, r3, #1
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	8bfb      	ldrh	r3, [r7, #30]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	8bfa      	ldrh	r2, [r7, #30]
 8003f50:	60da      	str	r2, [r3, #12]
 8003f52:	e05b      	b.n	800400c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f5a:	e057      	b.n	800400c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d828      	bhi.n	8003fb6 <UART_SetConfig+0x50e>
 8003f64:	a201      	add	r2, pc, #4	; (adr r2, 8003f6c <UART_SetConfig+0x4c4>)
 8003f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08003f91 	.word	0x08003f91
 8003f70:	08003f99 	.word	0x08003f99
 8003f74:	08003fa1 	.word	0x08003fa1
 8003f78:	08003fb7 	.word	0x08003fb7
 8003f7c:	08003fa7 	.word	0x08003fa7
 8003f80:	08003fb7 	.word	0x08003fb7
 8003f84:	08003fb7 	.word	0x08003fb7
 8003f88:	08003fb7 	.word	0x08003fb7
 8003f8c:	08003faf 	.word	0x08003faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f90:	f7ff f96e 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 8003f94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f96:	e014      	b.n	8003fc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f98:	f7ff f980 	bl	800329c <HAL_RCC_GetPCLK2Freq>
 8003f9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f9e:	e010      	b.n	8003fc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fa0:	4b26      	ldr	r3, [pc, #152]	; (800403c <UART_SetConfig+0x594>)
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fa4:	e00d      	b.n	8003fc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa6:	f7ff f8f5 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8003faa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fac:	e009      	b.n	8003fc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fb4:	e005      	b.n	8003fc2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fc0:	bf00      	nop
    }

    if (pclk != 0U)
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d021      	beq.n	800400c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	4a1a      	ldr	r2, [pc, #104]	; (8004038 <UART_SetConfig+0x590>)
 8003fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	085b      	lsrs	r3, r3, #1
 8003fe0:	441a      	add	r2, r3
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	d909      	bls.n	8004006 <UART_SetConfig+0x55e>
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff8:	d205      	bcs.n	8004006 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60da      	str	r2, [r3, #12]
 8004004:	e002      	b.n	800400c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2201      	movs	r2, #1
 8004010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2201      	movs	r2, #1
 8004018:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2200      	movs	r2, #0
 8004020:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2200      	movs	r2, #0
 8004026:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004028:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800402c:	4618      	mov	r0, r3
 800402e:	3730      	adds	r7, #48	; 0x30
 8004030:	46bd      	mov	sp, r7
 8004032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004036:	bf00      	nop
 8004038:	080066bc 	.word	0x080066bc
 800403c:	00f42400 	.word	0x00f42400

08004040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01a      	beq.n	8004156 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413e:	d10a      	bne.n	8004156 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af02      	add	r7, sp, #8
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004194:	f7fe f842 	bl	800221c <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d10e      	bne.n	80041c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f82f 	bl	800421a <UART_WaitOnFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e025      	b.n	8004212 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d10e      	bne.n	80041f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f819 	bl	800421a <UART_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e00f      	b.n	8004212 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b09c      	sub	sp, #112	; 0x70
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	603b      	str	r3, [r7, #0]
 8004226:	4613      	mov	r3, r2
 8004228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422a:	e0a9      	b.n	8004380 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	f000 80a5 	beq.w	8004380 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004236:	f7fd fff1 	bl	800221c <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <UART_WaitOnFlagUntilTimeout+0x32>
 8004246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004248:	2b00      	cmp	r3, #0
 800424a:	d140      	bne.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800425a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004260:	667b      	str	r3, [r7, #100]	; 0x64
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800426a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800426c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004270:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e6      	bne.n	800424c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3308      	adds	r3, #8
 8004284:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800428e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	663b      	str	r3, [r7, #96]	; 0x60
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3308      	adds	r3, #8
 800429c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800429e:	64ba      	str	r2, [r7, #72]	; 0x48
 80042a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e5      	bne.n	800427e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e069      	b.n	80043a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d051      	beq.n	8004380 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ea:	d149      	bne.n	8004380 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800430a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	461a      	mov	r2, r3
 8004312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004314:	637b      	str	r3, [r7, #52]	; 0x34
 8004316:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800431a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800431c:	e841 2300 	strex	r3, r2, [r1]
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e6      	bne.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3308      	adds	r3, #8
 800432e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	613b      	str	r3, [r7, #16]
   return(result);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f023 0301 	bic.w	r3, r3, #1
 800433e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3308      	adds	r3, #8
 8004346:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004348:	623a      	str	r2, [r7, #32]
 800434a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	69f9      	ldr	r1, [r7, #28]
 800434e:	6a3a      	ldr	r2, [r7, #32]
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	61bb      	str	r3, [r7, #24]
   return(result);
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e5      	bne.n	8004328 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e010      	b.n	80043a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69da      	ldr	r2, [r3, #28]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4013      	ands	r3, r2
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	429a      	cmp	r2, r3
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	429a      	cmp	r2, r3
 800439c:	f43f af46 	beq.w	800422c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3770      	adds	r7, #112	; 0x70
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b085      	sub	sp, #20
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80043bc:	2302      	movs	r3, #2
 80043be:	e027      	b.n	8004410 <HAL_UARTEx_DisableFifoMode+0x66>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2224      	movs	r2, #36	; 0x24
 80043cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0201 	bic.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80043ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004430:	2302      	movs	r3, #2
 8004432:	e02d      	b.n	8004490 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2224      	movs	r2, #36	; 0x24
 8004440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0201 	bic.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f84f 	bl	8004514 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e02d      	b.n	800450c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2224      	movs	r2, #36	; 0x24
 80044bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f811 	bl	8004514 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004520:	2b00      	cmp	r3, #0
 8004522:	d108      	bne.n	8004536 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004534:	e031      	b.n	800459a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004536:	2308      	movs	r3, #8
 8004538:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800453a:	2308      	movs	r3, #8
 800453c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	0e5b      	lsrs	r3, r3, #25
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	0f5b      	lsrs	r3, r3, #29
 8004556:	b2db      	uxtb	r3, r3
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800455e:	7bbb      	ldrb	r3, [r7, #14]
 8004560:	7b3a      	ldrb	r2, [r7, #12]
 8004562:	4911      	ldr	r1, [pc, #68]	; (80045a8 <UARTEx_SetNbDataToProcess+0x94>)
 8004564:	5c8a      	ldrb	r2, [r1, r2]
 8004566:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800456a:	7b3a      	ldrb	r2, [r7, #12]
 800456c:	490f      	ldr	r1, [pc, #60]	; (80045ac <UARTEx_SetNbDataToProcess+0x98>)
 800456e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004570:	fb93 f3f2 	sdiv	r3, r3, r2
 8004574:	b29a      	uxth	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	7b7a      	ldrb	r2, [r7, #13]
 8004580:	4909      	ldr	r1, [pc, #36]	; (80045a8 <UARTEx_SetNbDataToProcess+0x94>)
 8004582:	5c8a      	ldrb	r2, [r1, r2]
 8004584:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004588:	7b7a      	ldrb	r2, [r7, #13]
 800458a:	4908      	ldr	r1, [pc, #32]	; (80045ac <UARTEx_SetNbDataToProcess+0x98>)
 800458c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800458e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004592:	b29a      	uxth	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	080066d4 	.word	0x080066d4
 80045ac:	080066dc 	.word	0x080066dc

080045b0 <__errno>:
 80045b0:	4b01      	ldr	r3, [pc, #4]	; (80045b8 <__errno+0x8>)
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000010 	.word	0x20000010

080045bc <__libc_init_array>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	4d0d      	ldr	r5, [pc, #52]	; (80045f4 <__libc_init_array+0x38>)
 80045c0:	4c0d      	ldr	r4, [pc, #52]	; (80045f8 <__libc_init_array+0x3c>)
 80045c2:	1b64      	subs	r4, r4, r5
 80045c4:	10a4      	asrs	r4, r4, #2
 80045c6:	2600      	movs	r6, #0
 80045c8:	42a6      	cmp	r6, r4
 80045ca:	d109      	bne.n	80045e0 <__libc_init_array+0x24>
 80045cc:	4d0b      	ldr	r5, [pc, #44]	; (80045fc <__libc_init_array+0x40>)
 80045ce:	4c0c      	ldr	r4, [pc, #48]	; (8004600 <__libc_init_array+0x44>)
 80045d0:	f000 fcd6 	bl	8004f80 <_init>
 80045d4:	1b64      	subs	r4, r4, r5
 80045d6:	10a4      	asrs	r4, r4, #2
 80045d8:	2600      	movs	r6, #0
 80045da:	42a6      	cmp	r6, r4
 80045dc:	d105      	bne.n	80045ea <__libc_init_array+0x2e>
 80045de:	bd70      	pop	{r4, r5, r6, pc}
 80045e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e4:	4798      	blx	r3
 80045e6:	3601      	adds	r6, #1
 80045e8:	e7ee      	b.n	80045c8 <__libc_init_array+0xc>
 80045ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ee:	4798      	blx	r3
 80045f0:	3601      	adds	r6, #1
 80045f2:	e7f2      	b.n	80045da <__libc_init_array+0x1e>
 80045f4:	08006820 	.word	0x08006820
 80045f8:	08006820 	.word	0x08006820
 80045fc:	08006820 	.word	0x08006820
 8004600:	08006824 	.word	0x08006824

08004604 <memcpy>:
 8004604:	440a      	add	r2, r1
 8004606:	4291      	cmp	r1, r2
 8004608:	f100 33ff 	add.w	r3, r0, #4294967295
 800460c:	d100      	bne.n	8004610 <memcpy+0xc>
 800460e:	4770      	bx	lr
 8004610:	b510      	push	{r4, lr}
 8004612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800461a:	4291      	cmp	r1, r2
 800461c:	d1f9      	bne.n	8004612 <memcpy+0xe>
 800461e:	bd10      	pop	{r4, pc}

08004620 <memset>:
 8004620:	4402      	add	r2, r0
 8004622:	4603      	mov	r3, r0
 8004624:	4293      	cmp	r3, r2
 8004626:	d100      	bne.n	800462a <memset+0xa>
 8004628:	4770      	bx	lr
 800462a:	f803 1b01 	strb.w	r1, [r3], #1
 800462e:	e7f9      	b.n	8004624 <memset+0x4>

08004630 <sniprintf>:
 8004630:	b40c      	push	{r2, r3}
 8004632:	b530      	push	{r4, r5, lr}
 8004634:	4b17      	ldr	r3, [pc, #92]	; (8004694 <sniprintf+0x64>)
 8004636:	1e0c      	subs	r4, r1, #0
 8004638:	681d      	ldr	r5, [r3, #0]
 800463a:	b09d      	sub	sp, #116	; 0x74
 800463c:	da08      	bge.n	8004650 <sniprintf+0x20>
 800463e:	238b      	movs	r3, #139	; 0x8b
 8004640:	602b      	str	r3, [r5, #0]
 8004642:	f04f 30ff 	mov.w	r0, #4294967295
 8004646:	b01d      	add	sp, #116	; 0x74
 8004648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800464c:	b002      	add	sp, #8
 800464e:	4770      	bx	lr
 8004650:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004654:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004658:	bf14      	ite	ne
 800465a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800465e:	4623      	moveq	r3, r4
 8004660:	9304      	str	r3, [sp, #16]
 8004662:	9307      	str	r3, [sp, #28]
 8004664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004668:	9002      	str	r0, [sp, #8]
 800466a:	9006      	str	r0, [sp, #24]
 800466c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004670:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004672:	ab21      	add	r3, sp, #132	; 0x84
 8004674:	a902      	add	r1, sp, #8
 8004676:	4628      	mov	r0, r5
 8004678:	9301      	str	r3, [sp, #4]
 800467a:	f000 f89d 	bl	80047b8 <_svfiprintf_r>
 800467e:	1c43      	adds	r3, r0, #1
 8004680:	bfbc      	itt	lt
 8004682:	238b      	movlt	r3, #139	; 0x8b
 8004684:	602b      	strlt	r3, [r5, #0]
 8004686:	2c00      	cmp	r4, #0
 8004688:	d0dd      	beq.n	8004646 <sniprintf+0x16>
 800468a:	9b02      	ldr	r3, [sp, #8]
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
 8004690:	e7d9      	b.n	8004646 <sniprintf+0x16>
 8004692:	bf00      	nop
 8004694:	20000010 	.word	0x20000010

08004698 <siprintf>:
 8004698:	b40e      	push	{r1, r2, r3}
 800469a:	b500      	push	{lr}
 800469c:	b09c      	sub	sp, #112	; 0x70
 800469e:	ab1d      	add	r3, sp, #116	; 0x74
 80046a0:	9002      	str	r0, [sp, #8]
 80046a2:	9006      	str	r0, [sp, #24]
 80046a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046a8:	4809      	ldr	r0, [pc, #36]	; (80046d0 <siprintf+0x38>)
 80046aa:	9107      	str	r1, [sp, #28]
 80046ac:	9104      	str	r1, [sp, #16]
 80046ae:	4909      	ldr	r1, [pc, #36]	; (80046d4 <siprintf+0x3c>)
 80046b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80046b4:	9105      	str	r1, [sp, #20]
 80046b6:	6800      	ldr	r0, [r0, #0]
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	a902      	add	r1, sp, #8
 80046bc:	f000 f87c 	bl	80047b8 <_svfiprintf_r>
 80046c0:	9b02      	ldr	r3, [sp, #8]
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	b01c      	add	sp, #112	; 0x70
 80046c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046cc:	b003      	add	sp, #12
 80046ce:	4770      	bx	lr
 80046d0:	20000010 	.word	0x20000010
 80046d4:	ffff0208 	.word	0xffff0208

080046d8 <strncmp>:
 80046d8:	b510      	push	{r4, lr}
 80046da:	b17a      	cbz	r2, 80046fc <strncmp+0x24>
 80046dc:	4603      	mov	r3, r0
 80046de:	3901      	subs	r1, #1
 80046e0:	1884      	adds	r4, r0, r2
 80046e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80046e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80046ea:	4290      	cmp	r0, r2
 80046ec:	d101      	bne.n	80046f2 <strncmp+0x1a>
 80046ee:	42a3      	cmp	r3, r4
 80046f0:	d101      	bne.n	80046f6 <strncmp+0x1e>
 80046f2:	1a80      	subs	r0, r0, r2
 80046f4:	bd10      	pop	{r4, pc}
 80046f6:	2800      	cmp	r0, #0
 80046f8:	d1f3      	bne.n	80046e2 <strncmp+0xa>
 80046fa:	e7fa      	b.n	80046f2 <strncmp+0x1a>
 80046fc:	4610      	mov	r0, r2
 80046fe:	e7f9      	b.n	80046f4 <strncmp+0x1c>

08004700 <__ssputs_r>:
 8004700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004704:	688e      	ldr	r6, [r1, #8]
 8004706:	429e      	cmp	r6, r3
 8004708:	4682      	mov	sl, r0
 800470a:	460c      	mov	r4, r1
 800470c:	4690      	mov	r8, r2
 800470e:	461f      	mov	r7, r3
 8004710:	d838      	bhi.n	8004784 <__ssputs_r+0x84>
 8004712:	898a      	ldrh	r2, [r1, #12]
 8004714:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004718:	d032      	beq.n	8004780 <__ssputs_r+0x80>
 800471a:	6825      	ldr	r5, [r4, #0]
 800471c:	6909      	ldr	r1, [r1, #16]
 800471e:	eba5 0901 	sub.w	r9, r5, r1
 8004722:	6965      	ldr	r5, [r4, #20]
 8004724:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004728:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800472c:	3301      	adds	r3, #1
 800472e:	444b      	add	r3, r9
 8004730:	106d      	asrs	r5, r5, #1
 8004732:	429d      	cmp	r5, r3
 8004734:	bf38      	it	cc
 8004736:	461d      	movcc	r5, r3
 8004738:	0553      	lsls	r3, r2, #21
 800473a:	d531      	bpl.n	80047a0 <__ssputs_r+0xa0>
 800473c:	4629      	mov	r1, r5
 800473e:	f000 fb55 	bl	8004dec <_malloc_r>
 8004742:	4606      	mov	r6, r0
 8004744:	b950      	cbnz	r0, 800475c <__ssputs_r+0x5c>
 8004746:	230c      	movs	r3, #12
 8004748:	f8ca 3000 	str.w	r3, [sl]
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004752:	81a3      	strh	r3, [r4, #12]
 8004754:	f04f 30ff 	mov.w	r0, #4294967295
 8004758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800475c:	6921      	ldr	r1, [r4, #16]
 800475e:	464a      	mov	r2, r9
 8004760:	f7ff ff50 	bl	8004604 <memcpy>
 8004764:	89a3      	ldrh	r3, [r4, #12]
 8004766:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800476a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476e:	81a3      	strh	r3, [r4, #12]
 8004770:	6126      	str	r6, [r4, #16]
 8004772:	6165      	str	r5, [r4, #20]
 8004774:	444e      	add	r6, r9
 8004776:	eba5 0509 	sub.w	r5, r5, r9
 800477a:	6026      	str	r6, [r4, #0]
 800477c:	60a5      	str	r5, [r4, #8]
 800477e:	463e      	mov	r6, r7
 8004780:	42be      	cmp	r6, r7
 8004782:	d900      	bls.n	8004786 <__ssputs_r+0x86>
 8004784:	463e      	mov	r6, r7
 8004786:	6820      	ldr	r0, [r4, #0]
 8004788:	4632      	mov	r2, r6
 800478a:	4641      	mov	r1, r8
 800478c:	f000 faa8 	bl	8004ce0 <memmove>
 8004790:	68a3      	ldr	r3, [r4, #8]
 8004792:	1b9b      	subs	r3, r3, r6
 8004794:	60a3      	str	r3, [r4, #8]
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	4433      	add	r3, r6
 800479a:	6023      	str	r3, [r4, #0]
 800479c:	2000      	movs	r0, #0
 800479e:	e7db      	b.n	8004758 <__ssputs_r+0x58>
 80047a0:	462a      	mov	r2, r5
 80047a2:	f000 fb97 	bl	8004ed4 <_realloc_r>
 80047a6:	4606      	mov	r6, r0
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d1e1      	bne.n	8004770 <__ssputs_r+0x70>
 80047ac:	6921      	ldr	r1, [r4, #16]
 80047ae:	4650      	mov	r0, sl
 80047b0:	f000 fab0 	bl	8004d14 <_free_r>
 80047b4:	e7c7      	b.n	8004746 <__ssputs_r+0x46>
	...

080047b8 <_svfiprintf_r>:
 80047b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047bc:	4698      	mov	r8, r3
 80047be:	898b      	ldrh	r3, [r1, #12]
 80047c0:	061b      	lsls	r3, r3, #24
 80047c2:	b09d      	sub	sp, #116	; 0x74
 80047c4:	4607      	mov	r7, r0
 80047c6:	460d      	mov	r5, r1
 80047c8:	4614      	mov	r4, r2
 80047ca:	d50e      	bpl.n	80047ea <_svfiprintf_r+0x32>
 80047cc:	690b      	ldr	r3, [r1, #16]
 80047ce:	b963      	cbnz	r3, 80047ea <_svfiprintf_r+0x32>
 80047d0:	2140      	movs	r1, #64	; 0x40
 80047d2:	f000 fb0b 	bl	8004dec <_malloc_r>
 80047d6:	6028      	str	r0, [r5, #0]
 80047d8:	6128      	str	r0, [r5, #16]
 80047da:	b920      	cbnz	r0, 80047e6 <_svfiprintf_r+0x2e>
 80047dc:	230c      	movs	r3, #12
 80047de:	603b      	str	r3, [r7, #0]
 80047e0:	f04f 30ff 	mov.w	r0, #4294967295
 80047e4:	e0d1      	b.n	800498a <_svfiprintf_r+0x1d2>
 80047e6:	2340      	movs	r3, #64	; 0x40
 80047e8:	616b      	str	r3, [r5, #20]
 80047ea:	2300      	movs	r3, #0
 80047ec:	9309      	str	r3, [sp, #36]	; 0x24
 80047ee:	2320      	movs	r3, #32
 80047f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80047f8:	2330      	movs	r3, #48	; 0x30
 80047fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049a4 <_svfiprintf_r+0x1ec>
 80047fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004802:	f04f 0901 	mov.w	r9, #1
 8004806:	4623      	mov	r3, r4
 8004808:	469a      	mov	sl, r3
 800480a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800480e:	b10a      	cbz	r2, 8004814 <_svfiprintf_r+0x5c>
 8004810:	2a25      	cmp	r2, #37	; 0x25
 8004812:	d1f9      	bne.n	8004808 <_svfiprintf_r+0x50>
 8004814:	ebba 0b04 	subs.w	fp, sl, r4
 8004818:	d00b      	beq.n	8004832 <_svfiprintf_r+0x7a>
 800481a:	465b      	mov	r3, fp
 800481c:	4622      	mov	r2, r4
 800481e:	4629      	mov	r1, r5
 8004820:	4638      	mov	r0, r7
 8004822:	f7ff ff6d 	bl	8004700 <__ssputs_r>
 8004826:	3001      	adds	r0, #1
 8004828:	f000 80aa 	beq.w	8004980 <_svfiprintf_r+0x1c8>
 800482c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800482e:	445a      	add	r2, fp
 8004830:	9209      	str	r2, [sp, #36]	; 0x24
 8004832:	f89a 3000 	ldrb.w	r3, [sl]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 80a2 	beq.w	8004980 <_svfiprintf_r+0x1c8>
 800483c:	2300      	movs	r3, #0
 800483e:	f04f 32ff 	mov.w	r2, #4294967295
 8004842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004846:	f10a 0a01 	add.w	sl, sl, #1
 800484a:	9304      	str	r3, [sp, #16]
 800484c:	9307      	str	r3, [sp, #28]
 800484e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004852:	931a      	str	r3, [sp, #104]	; 0x68
 8004854:	4654      	mov	r4, sl
 8004856:	2205      	movs	r2, #5
 8004858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800485c:	4851      	ldr	r0, [pc, #324]	; (80049a4 <_svfiprintf_r+0x1ec>)
 800485e:	f7fb fce7 	bl	8000230 <memchr>
 8004862:	9a04      	ldr	r2, [sp, #16]
 8004864:	b9d8      	cbnz	r0, 800489e <_svfiprintf_r+0xe6>
 8004866:	06d0      	lsls	r0, r2, #27
 8004868:	bf44      	itt	mi
 800486a:	2320      	movmi	r3, #32
 800486c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004870:	0711      	lsls	r1, r2, #28
 8004872:	bf44      	itt	mi
 8004874:	232b      	movmi	r3, #43	; 0x2b
 8004876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800487a:	f89a 3000 	ldrb.w	r3, [sl]
 800487e:	2b2a      	cmp	r3, #42	; 0x2a
 8004880:	d015      	beq.n	80048ae <_svfiprintf_r+0xf6>
 8004882:	9a07      	ldr	r2, [sp, #28]
 8004884:	4654      	mov	r4, sl
 8004886:	2000      	movs	r0, #0
 8004888:	f04f 0c0a 	mov.w	ip, #10
 800488c:	4621      	mov	r1, r4
 800488e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004892:	3b30      	subs	r3, #48	; 0x30
 8004894:	2b09      	cmp	r3, #9
 8004896:	d94e      	bls.n	8004936 <_svfiprintf_r+0x17e>
 8004898:	b1b0      	cbz	r0, 80048c8 <_svfiprintf_r+0x110>
 800489a:	9207      	str	r2, [sp, #28]
 800489c:	e014      	b.n	80048c8 <_svfiprintf_r+0x110>
 800489e:	eba0 0308 	sub.w	r3, r0, r8
 80048a2:	fa09 f303 	lsl.w	r3, r9, r3
 80048a6:	4313      	orrs	r3, r2
 80048a8:	9304      	str	r3, [sp, #16]
 80048aa:	46a2      	mov	sl, r4
 80048ac:	e7d2      	b.n	8004854 <_svfiprintf_r+0x9c>
 80048ae:	9b03      	ldr	r3, [sp, #12]
 80048b0:	1d19      	adds	r1, r3, #4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	9103      	str	r1, [sp, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bfbb      	ittet	lt
 80048ba:	425b      	neglt	r3, r3
 80048bc:	f042 0202 	orrlt.w	r2, r2, #2
 80048c0:	9307      	strge	r3, [sp, #28]
 80048c2:	9307      	strlt	r3, [sp, #28]
 80048c4:	bfb8      	it	lt
 80048c6:	9204      	strlt	r2, [sp, #16]
 80048c8:	7823      	ldrb	r3, [r4, #0]
 80048ca:	2b2e      	cmp	r3, #46	; 0x2e
 80048cc:	d10c      	bne.n	80048e8 <_svfiprintf_r+0x130>
 80048ce:	7863      	ldrb	r3, [r4, #1]
 80048d0:	2b2a      	cmp	r3, #42	; 0x2a
 80048d2:	d135      	bne.n	8004940 <_svfiprintf_r+0x188>
 80048d4:	9b03      	ldr	r3, [sp, #12]
 80048d6:	1d1a      	adds	r2, r3, #4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	9203      	str	r2, [sp, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bfb8      	it	lt
 80048e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80048e4:	3402      	adds	r4, #2
 80048e6:	9305      	str	r3, [sp, #20]
 80048e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049b4 <_svfiprintf_r+0x1fc>
 80048ec:	7821      	ldrb	r1, [r4, #0]
 80048ee:	2203      	movs	r2, #3
 80048f0:	4650      	mov	r0, sl
 80048f2:	f7fb fc9d 	bl	8000230 <memchr>
 80048f6:	b140      	cbz	r0, 800490a <_svfiprintf_r+0x152>
 80048f8:	2340      	movs	r3, #64	; 0x40
 80048fa:	eba0 000a 	sub.w	r0, r0, sl
 80048fe:	fa03 f000 	lsl.w	r0, r3, r0
 8004902:	9b04      	ldr	r3, [sp, #16]
 8004904:	4303      	orrs	r3, r0
 8004906:	3401      	adds	r4, #1
 8004908:	9304      	str	r3, [sp, #16]
 800490a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800490e:	4826      	ldr	r0, [pc, #152]	; (80049a8 <_svfiprintf_r+0x1f0>)
 8004910:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004914:	2206      	movs	r2, #6
 8004916:	f7fb fc8b 	bl	8000230 <memchr>
 800491a:	2800      	cmp	r0, #0
 800491c:	d038      	beq.n	8004990 <_svfiprintf_r+0x1d8>
 800491e:	4b23      	ldr	r3, [pc, #140]	; (80049ac <_svfiprintf_r+0x1f4>)
 8004920:	bb1b      	cbnz	r3, 800496a <_svfiprintf_r+0x1b2>
 8004922:	9b03      	ldr	r3, [sp, #12]
 8004924:	3307      	adds	r3, #7
 8004926:	f023 0307 	bic.w	r3, r3, #7
 800492a:	3308      	adds	r3, #8
 800492c:	9303      	str	r3, [sp, #12]
 800492e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004930:	4433      	add	r3, r6
 8004932:	9309      	str	r3, [sp, #36]	; 0x24
 8004934:	e767      	b.n	8004806 <_svfiprintf_r+0x4e>
 8004936:	fb0c 3202 	mla	r2, ip, r2, r3
 800493a:	460c      	mov	r4, r1
 800493c:	2001      	movs	r0, #1
 800493e:	e7a5      	b.n	800488c <_svfiprintf_r+0xd4>
 8004940:	2300      	movs	r3, #0
 8004942:	3401      	adds	r4, #1
 8004944:	9305      	str	r3, [sp, #20]
 8004946:	4619      	mov	r1, r3
 8004948:	f04f 0c0a 	mov.w	ip, #10
 800494c:	4620      	mov	r0, r4
 800494e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004952:	3a30      	subs	r2, #48	; 0x30
 8004954:	2a09      	cmp	r2, #9
 8004956:	d903      	bls.n	8004960 <_svfiprintf_r+0x1a8>
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0c5      	beq.n	80048e8 <_svfiprintf_r+0x130>
 800495c:	9105      	str	r1, [sp, #20]
 800495e:	e7c3      	b.n	80048e8 <_svfiprintf_r+0x130>
 8004960:	fb0c 2101 	mla	r1, ip, r1, r2
 8004964:	4604      	mov	r4, r0
 8004966:	2301      	movs	r3, #1
 8004968:	e7f0      	b.n	800494c <_svfiprintf_r+0x194>
 800496a:	ab03      	add	r3, sp, #12
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	462a      	mov	r2, r5
 8004970:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <_svfiprintf_r+0x1f8>)
 8004972:	a904      	add	r1, sp, #16
 8004974:	4638      	mov	r0, r7
 8004976:	f3af 8000 	nop.w
 800497a:	1c42      	adds	r2, r0, #1
 800497c:	4606      	mov	r6, r0
 800497e:	d1d6      	bne.n	800492e <_svfiprintf_r+0x176>
 8004980:	89ab      	ldrh	r3, [r5, #12]
 8004982:	065b      	lsls	r3, r3, #25
 8004984:	f53f af2c 	bmi.w	80047e0 <_svfiprintf_r+0x28>
 8004988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800498a:	b01d      	add	sp, #116	; 0x74
 800498c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004990:	ab03      	add	r3, sp, #12
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	462a      	mov	r2, r5
 8004996:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <_svfiprintf_r+0x1f8>)
 8004998:	a904      	add	r1, sp, #16
 800499a:	4638      	mov	r0, r7
 800499c:	f000 f87a 	bl	8004a94 <_printf_i>
 80049a0:	e7eb      	b.n	800497a <_svfiprintf_r+0x1c2>
 80049a2:	bf00      	nop
 80049a4:	080067e5 	.word	0x080067e5
 80049a8:	080067ef 	.word	0x080067ef
 80049ac:	00000000 	.word	0x00000000
 80049b0:	08004701 	.word	0x08004701
 80049b4:	080067eb 	.word	0x080067eb

080049b8 <_printf_common>:
 80049b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049bc:	4616      	mov	r6, r2
 80049be:	4699      	mov	r9, r3
 80049c0:	688a      	ldr	r2, [r1, #8]
 80049c2:	690b      	ldr	r3, [r1, #16]
 80049c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049c8:	4293      	cmp	r3, r2
 80049ca:	bfb8      	it	lt
 80049cc:	4613      	movlt	r3, r2
 80049ce:	6033      	str	r3, [r6, #0]
 80049d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049d4:	4607      	mov	r7, r0
 80049d6:	460c      	mov	r4, r1
 80049d8:	b10a      	cbz	r2, 80049de <_printf_common+0x26>
 80049da:	3301      	adds	r3, #1
 80049dc:	6033      	str	r3, [r6, #0]
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	0699      	lsls	r1, r3, #26
 80049e2:	bf42      	ittt	mi
 80049e4:	6833      	ldrmi	r3, [r6, #0]
 80049e6:	3302      	addmi	r3, #2
 80049e8:	6033      	strmi	r3, [r6, #0]
 80049ea:	6825      	ldr	r5, [r4, #0]
 80049ec:	f015 0506 	ands.w	r5, r5, #6
 80049f0:	d106      	bne.n	8004a00 <_printf_common+0x48>
 80049f2:	f104 0a19 	add.w	sl, r4, #25
 80049f6:	68e3      	ldr	r3, [r4, #12]
 80049f8:	6832      	ldr	r2, [r6, #0]
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	42ab      	cmp	r3, r5
 80049fe:	dc26      	bgt.n	8004a4e <_printf_common+0x96>
 8004a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a04:	1e13      	subs	r3, r2, #0
 8004a06:	6822      	ldr	r2, [r4, #0]
 8004a08:	bf18      	it	ne
 8004a0a:	2301      	movne	r3, #1
 8004a0c:	0692      	lsls	r2, r2, #26
 8004a0e:	d42b      	bmi.n	8004a68 <_printf_common+0xb0>
 8004a10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a14:	4649      	mov	r1, r9
 8004a16:	4638      	mov	r0, r7
 8004a18:	47c0      	blx	r8
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	d01e      	beq.n	8004a5c <_printf_common+0xa4>
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	68e5      	ldr	r5, [r4, #12]
 8004a22:	6832      	ldr	r2, [r6, #0]
 8004a24:	f003 0306 	and.w	r3, r3, #6
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	bf08      	it	eq
 8004a2c:	1aad      	subeq	r5, r5, r2
 8004a2e:	68a3      	ldr	r3, [r4, #8]
 8004a30:	6922      	ldr	r2, [r4, #16]
 8004a32:	bf0c      	ite	eq
 8004a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a38:	2500      	movne	r5, #0
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	bfc4      	itt	gt
 8004a3e:	1a9b      	subgt	r3, r3, r2
 8004a40:	18ed      	addgt	r5, r5, r3
 8004a42:	2600      	movs	r6, #0
 8004a44:	341a      	adds	r4, #26
 8004a46:	42b5      	cmp	r5, r6
 8004a48:	d11a      	bne.n	8004a80 <_printf_common+0xc8>
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	e008      	b.n	8004a60 <_printf_common+0xa8>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4652      	mov	r2, sl
 8004a52:	4649      	mov	r1, r9
 8004a54:	4638      	mov	r0, r7
 8004a56:	47c0      	blx	r8
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d103      	bne.n	8004a64 <_printf_common+0xac>
 8004a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a64:	3501      	adds	r5, #1
 8004a66:	e7c6      	b.n	80049f6 <_printf_common+0x3e>
 8004a68:	18e1      	adds	r1, r4, r3
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	2030      	movs	r0, #48	; 0x30
 8004a6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a72:	4422      	add	r2, r4
 8004a74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a7c:	3302      	adds	r3, #2
 8004a7e:	e7c7      	b.n	8004a10 <_printf_common+0x58>
 8004a80:	2301      	movs	r3, #1
 8004a82:	4622      	mov	r2, r4
 8004a84:	4649      	mov	r1, r9
 8004a86:	4638      	mov	r0, r7
 8004a88:	47c0      	blx	r8
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d0e6      	beq.n	8004a5c <_printf_common+0xa4>
 8004a8e:	3601      	adds	r6, #1
 8004a90:	e7d9      	b.n	8004a46 <_printf_common+0x8e>
	...

08004a94 <_printf_i>:
 8004a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a98:	7e0f      	ldrb	r7, [r1, #24]
 8004a9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a9c:	2f78      	cmp	r7, #120	; 0x78
 8004a9e:	4691      	mov	r9, r2
 8004aa0:	4680      	mov	r8, r0
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	469a      	mov	sl, r3
 8004aa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004aaa:	d807      	bhi.n	8004abc <_printf_i+0x28>
 8004aac:	2f62      	cmp	r7, #98	; 0x62
 8004aae:	d80a      	bhi.n	8004ac6 <_printf_i+0x32>
 8004ab0:	2f00      	cmp	r7, #0
 8004ab2:	f000 80d8 	beq.w	8004c66 <_printf_i+0x1d2>
 8004ab6:	2f58      	cmp	r7, #88	; 0x58
 8004ab8:	f000 80a3 	beq.w	8004c02 <_printf_i+0x16e>
 8004abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ac4:	e03a      	b.n	8004b3c <_printf_i+0xa8>
 8004ac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004aca:	2b15      	cmp	r3, #21
 8004acc:	d8f6      	bhi.n	8004abc <_printf_i+0x28>
 8004ace:	a101      	add	r1, pc, #4	; (adr r1, 8004ad4 <_printf_i+0x40>)
 8004ad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ad4:	08004b2d 	.word	0x08004b2d
 8004ad8:	08004b41 	.word	0x08004b41
 8004adc:	08004abd 	.word	0x08004abd
 8004ae0:	08004abd 	.word	0x08004abd
 8004ae4:	08004abd 	.word	0x08004abd
 8004ae8:	08004abd 	.word	0x08004abd
 8004aec:	08004b41 	.word	0x08004b41
 8004af0:	08004abd 	.word	0x08004abd
 8004af4:	08004abd 	.word	0x08004abd
 8004af8:	08004abd 	.word	0x08004abd
 8004afc:	08004abd 	.word	0x08004abd
 8004b00:	08004c4d 	.word	0x08004c4d
 8004b04:	08004b71 	.word	0x08004b71
 8004b08:	08004c2f 	.word	0x08004c2f
 8004b0c:	08004abd 	.word	0x08004abd
 8004b10:	08004abd 	.word	0x08004abd
 8004b14:	08004c6f 	.word	0x08004c6f
 8004b18:	08004abd 	.word	0x08004abd
 8004b1c:	08004b71 	.word	0x08004b71
 8004b20:	08004abd 	.word	0x08004abd
 8004b24:	08004abd 	.word	0x08004abd
 8004b28:	08004c37 	.word	0x08004c37
 8004b2c:	682b      	ldr	r3, [r5, #0]
 8004b2e:	1d1a      	adds	r2, r3, #4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	602a      	str	r2, [r5, #0]
 8004b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0a3      	b.n	8004c88 <_printf_i+0x1f4>
 8004b40:	6820      	ldr	r0, [r4, #0]
 8004b42:	6829      	ldr	r1, [r5, #0]
 8004b44:	0606      	lsls	r6, r0, #24
 8004b46:	f101 0304 	add.w	r3, r1, #4
 8004b4a:	d50a      	bpl.n	8004b62 <_printf_i+0xce>
 8004b4c:	680e      	ldr	r6, [r1, #0]
 8004b4e:	602b      	str	r3, [r5, #0]
 8004b50:	2e00      	cmp	r6, #0
 8004b52:	da03      	bge.n	8004b5c <_printf_i+0xc8>
 8004b54:	232d      	movs	r3, #45	; 0x2d
 8004b56:	4276      	negs	r6, r6
 8004b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b5c:	485e      	ldr	r0, [pc, #376]	; (8004cd8 <_printf_i+0x244>)
 8004b5e:	230a      	movs	r3, #10
 8004b60:	e019      	b.n	8004b96 <_printf_i+0x102>
 8004b62:	680e      	ldr	r6, [r1, #0]
 8004b64:	602b      	str	r3, [r5, #0]
 8004b66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b6a:	bf18      	it	ne
 8004b6c:	b236      	sxthne	r6, r6
 8004b6e:	e7ef      	b.n	8004b50 <_printf_i+0xbc>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	6820      	ldr	r0, [r4, #0]
 8004b74:	1d19      	adds	r1, r3, #4
 8004b76:	6029      	str	r1, [r5, #0]
 8004b78:	0601      	lsls	r1, r0, #24
 8004b7a:	d501      	bpl.n	8004b80 <_printf_i+0xec>
 8004b7c:	681e      	ldr	r6, [r3, #0]
 8004b7e:	e002      	b.n	8004b86 <_printf_i+0xf2>
 8004b80:	0646      	lsls	r6, r0, #25
 8004b82:	d5fb      	bpl.n	8004b7c <_printf_i+0xe8>
 8004b84:	881e      	ldrh	r6, [r3, #0]
 8004b86:	4854      	ldr	r0, [pc, #336]	; (8004cd8 <_printf_i+0x244>)
 8004b88:	2f6f      	cmp	r7, #111	; 0x6f
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2308      	moveq	r3, #8
 8004b8e:	230a      	movne	r3, #10
 8004b90:	2100      	movs	r1, #0
 8004b92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b96:	6865      	ldr	r5, [r4, #4]
 8004b98:	60a5      	str	r5, [r4, #8]
 8004b9a:	2d00      	cmp	r5, #0
 8004b9c:	bfa2      	ittt	ge
 8004b9e:	6821      	ldrge	r1, [r4, #0]
 8004ba0:	f021 0104 	bicge.w	r1, r1, #4
 8004ba4:	6021      	strge	r1, [r4, #0]
 8004ba6:	b90e      	cbnz	r6, 8004bac <_printf_i+0x118>
 8004ba8:	2d00      	cmp	r5, #0
 8004baa:	d04d      	beq.n	8004c48 <_printf_i+0x1b4>
 8004bac:	4615      	mov	r5, r2
 8004bae:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bb2:	fb03 6711 	mls	r7, r3, r1, r6
 8004bb6:	5dc7      	ldrb	r7, [r0, r7]
 8004bb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bbc:	4637      	mov	r7, r6
 8004bbe:	42bb      	cmp	r3, r7
 8004bc0:	460e      	mov	r6, r1
 8004bc2:	d9f4      	bls.n	8004bae <_printf_i+0x11a>
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d10b      	bne.n	8004be0 <_printf_i+0x14c>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	07de      	lsls	r6, r3, #31
 8004bcc:	d508      	bpl.n	8004be0 <_printf_i+0x14c>
 8004bce:	6923      	ldr	r3, [r4, #16]
 8004bd0:	6861      	ldr	r1, [r4, #4]
 8004bd2:	4299      	cmp	r1, r3
 8004bd4:	bfde      	ittt	le
 8004bd6:	2330      	movle	r3, #48	; 0x30
 8004bd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004be0:	1b52      	subs	r2, r2, r5
 8004be2:	6122      	str	r2, [r4, #16]
 8004be4:	f8cd a000 	str.w	sl, [sp]
 8004be8:	464b      	mov	r3, r9
 8004bea:	aa03      	add	r2, sp, #12
 8004bec:	4621      	mov	r1, r4
 8004bee:	4640      	mov	r0, r8
 8004bf0:	f7ff fee2 	bl	80049b8 <_printf_common>
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d14c      	bne.n	8004c92 <_printf_i+0x1fe>
 8004bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfc:	b004      	add	sp, #16
 8004bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c02:	4835      	ldr	r0, [pc, #212]	; (8004cd8 <_printf_i+0x244>)
 8004c04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c08:	6829      	ldr	r1, [r5, #0]
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c10:	6029      	str	r1, [r5, #0]
 8004c12:	061d      	lsls	r5, r3, #24
 8004c14:	d514      	bpl.n	8004c40 <_printf_i+0x1ac>
 8004c16:	07df      	lsls	r7, r3, #31
 8004c18:	bf44      	itt	mi
 8004c1a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c1e:	6023      	strmi	r3, [r4, #0]
 8004c20:	b91e      	cbnz	r6, 8004c2a <_printf_i+0x196>
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	f023 0320 	bic.w	r3, r3, #32
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	2310      	movs	r3, #16
 8004c2c:	e7b0      	b.n	8004b90 <_printf_i+0xfc>
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	f043 0320 	orr.w	r3, r3, #32
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	2378      	movs	r3, #120	; 0x78
 8004c38:	4828      	ldr	r0, [pc, #160]	; (8004cdc <_printf_i+0x248>)
 8004c3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c3e:	e7e3      	b.n	8004c08 <_printf_i+0x174>
 8004c40:	0659      	lsls	r1, r3, #25
 8004c42:	bf48      	it	mi
 8004c44:	b2b6      	uxthmi	r6, r6
 8004c46:	e7e6      	b.n	8004c16 <_printf_i+0x182>
 8004c48:	4615      	mov	r5, r2
 8004c4a:	e7bb      	b.n	8004bc4 <_printf_i+0x130>
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	6826      	ldr	r6, [r4, #0]
 8004c50:	6961      	ldr	r1, [r4, #20]
 8004c52:	1d18      	adds	r0, r3, #4
 8004c54:	6028      	str	r0, [r5, #0]
 8004c56:	0635      	lsls	r5, r6, #24
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	d501      	bpl.n	8004c60 <_printf_i+0x1cc>
 8004c5c:	6019      	str	r1, [r3, #0]
 8004c5e:	e002      	b.n	8004c66 <_printf_i+0x1d2>
 8004c60:	0670      	lsls	r0, r6, #25
 8004c62:	d5fb      	bpl.n	8004c5c <_printf_i+0x1c8>
 8004c64:	8019      	strh	r1, [r3, #0]
 8004c66:	2300      	movs	r3, #0
 8004c68:	6123      	str	r3, [r4, #16]
 8004c6a:	4615      	mov	r5, r2
 8004c6c:	e7ba      	b.n	8004be4 <_printf_i+0x150>
 8004c6e:	682b      	ldr	r3, [r5, #0]
 8004c70:	1d1a      	adds	r2, r3, #4
 8004c72:	602a      	str	r2, [r5, #0]
 8004c74:	681d      	ldr	r5, [r3, #0]
 8004c76:	6862      	ldr	r2, [r4, #4]
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	f7fb fad8 	bl	8000230 <memchr>
 8004c80:	b108      	cbz	r0, 8004c86 <_printf_i+0x1f2>
 8004c82:	1b40      	subs	r0, r0, r5
 8004c84:	6060      	str	r0, [r4, #4]
 8004c86:	6863      	ldr	r3, [r4, #4]
 8004c88:	6123      	str	r3, [r4, #16]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c90:	e7a8      	b.n	8004be4 <_printf_i+0x150>
 8004c92:	6923      	ldr	r3, [r4, #16]
 8004c94:	462a      	mov	r2, r5
 8004c96:	4649      	mov	r1, r9
 8004c98:	4640      	mov	r0, r8
 8004c9a:	47d0      	blx	sl
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d0ab      	beq.n	8004bf8 <_printf_i+0x164>
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	079b      	lsls	r3, r3, #30
 8004ca4:	d413      	bmi.n	8004cce <_printf_i+0x23a>
 8004ca6:	68e0      	ldr	r0, [r4, #12]
 8004ca8:	9b03      	ldr	r3, [sp, #12]
 8004caa:	4298      	cmp	r0, r3
 8004cac:	bfb8      	it	lt
 8004cae:	4618      	movlt	r0, r3
 8004cb0:	e7a4      	b.n	8004bfc <_printf_i+0x168>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	4632      	mov	r2, r6
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	4640      	mov	r0, r8
 8004cba:	47d0      	blx	sl
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d09b      	beq.n	8004bf8 <_printf_i+0x164>
 8004cc0:	3501      	adds	r5, #1
 8004cc2:	68e3      	ldr	r3, [r4, #12]
 8004cc4:	9903      	ldr	r1, [sp, #12]
 8004cc6:	1a5b      	subs	r3, r3, r1
 8004cc8:	42ab      	cmp	r3, r5
 8004cca:	dcf2      	bgt.n	8004cb2 <_printf_i+0x21e>
 8004ccc:	e7eb      	b.n	8004ca6 <_printf_i+0x212>
 8004cce:	2500      	movs	r5, #0
 8004cd0:	f104 0619 	add.w	r6, r4, #25
 8004cd4:	e7f5      	b.n	8004cc2 <_printf_i+0x22e>
 8004cd6:	bf00      	nop
 8004cd8:	080067f6 	.word	0x080067f6
 8004cdc:	08006807 	.word	0x08006807

08004ce0 <memmove>:
 8004ce0:	4288      	cmp	r0, r1
 8004ce2:	b510      	push	{r4, lr}
 8004ce4:	eb01 0402 	add.w	r4, r1, r2
 8004ce8:	d902      	bls.n	8004cf0 <memmove+0x10>
 8004cea:	4284      	cmp	r4, r0
 8004cec:	4623      	mov	r3, r4
 8004cee:	d807      	bhi.n	8004d00 <memmove+0x20>
 8004cf0:	1e43      	subs	r3, r0, #1
 8004cf2:	42a1      	cmp	r1, r4
 8004cf4:	d008      	beq.n	8004d08 <memmove+0x28>
 8004cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cfe:	e7f8      	b.n	8004cf2 <memmove+0x12>
 8004d00:	4402      	add	r2, r0
 8004d02:	4601      	mov	r1, r0
 8004d04:	428a      	cmp	r2, r1
 8004d06:	d100      	bne.n	8004d0a <memmove+0x2a>
 8004d08:	bd10      	pop	{r4, pc}
 8004d0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d12:	e7f7      	b.n	8004d04 <memmove+0x24>

08004d14 <_free_r>:
 8004d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d16:	2900      	cmp	r1, #0
 8004d18:	d044      	beq.n	8004da4 <_free_r+0x90>
 8004d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d1e:	9001      	str	r0, [sp, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f1a1 0404 	sub.w	r4, r1, #4
 8004d26:	bfb8      	it	lt
 8004d28:	18e4      	addlt	r4, r4, r3
 8004d2a:	f000 f913 	bl	8004f54 <__malloc_lock>
 8004d2e:	4a1e      	ldr	r2, [pc, #120]	; (8004da8 <_free_r+0x94>)
 8004d30:	9801      	ldr	r0, [sp, #4]
 8004d32:	6813      	ldr	r3, [r2, #0]
 8004d34:	b933      	cbnz	r3, 8004d44 <_free_r+0x30>
 8004d36:	6063      	str	r3, [r4, #4]
 8004d38:	6014      	str	r4, [r2, #0]
 8004d3a:	b003      	add	sp, #12
 8004d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d40:	f000 b90e 	b.w	8004f60 <__malloc_unlock>
 8004d44:	42a3      	cmp	r3, r4
 8004d46:	d908      	bls.n	8004d5a <_free_r+0x46>
 8004d48:	6825      	ldr	r5, [r4, #0]
 8004d4a:	1961      	adds	r1, r4, r5
 8004d4c:	428b      	cmp	r3, r1
 8004d4e:	bf01      	itttt	eq
 8004d50:	6819      	ldreq	r1, [r3, #0]
 8004d52:	685b      	ldreq	r3, [r3, #4]
 8004d54:	1949      	addeq	r1, r1, r5
 8004d56:	6021      	streq	r1, [r4, #0]
 8004d58:	e7ed      	b.n	8004d36 <_free_r+0x22>
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	b10b      	cbz	r3, 8004d64 <_free_r+0x50>
 8004d60:	42a3      	cmp	r3, r4
 8004d62:	d9fa      	bls.n	8004d5a <_free_r+0x46>
 8004d64:	6811      	ldr	r1, [r2, #0]
 8004d66:	1855      	adds	r5, r2, r1
 8004d68:	42a5      	cmp	r5, r4
 8004d6a:	d10b      	bne.n	8004d84 <_free_r+0x70>
 8004d6c:	6824      	ldr	r4, [r4, #0]
 8004d6e:	4421      	add	r1, r4
 8004d70:	1854      	adds	r4, r2, r1
 8004d72:	42a3      	cmp	r3, r4
 8004d74:	6011      	str	r1, [r2, #0]
 8004d76:	d1e0      	bne.n	8004d3a <_free_r+0x26>
 8004d78:	681c      	ldr	r4, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	6053      	str	r3, [r2, #4]
 8004d7e:	4421      	add	r1, r4
 8004d80:	6011      	str	r1, [r2, #0]
 8004d82:	e7da      	b.n	8004d3a <_free_r+0x26>
 8004d84:	d902      	bls.n	8004d8c <_free_r+0x78>
 8004d86:	230c      	movs	r3, #12
 8004d88:	6003      	str	r3, [r0, #0]
 8004d8a:	e7d6      	b.n	8004d3a <_free_r+0x26>
 8004d8c:	6825      	ldr	r5, [r4, #0]
 8004d8e:	1961      	adds	r1, r4, r5
 8004d90:	428b      	cmp	r3, r1
 8004d92:	bf04      	itt	eq
 8004d94:	6819      	ldreq	r1, [r3, #0]
 8004d96:	685b      	ldreq	r3, [r3, #4]
 8004d98:	6063      	str	r3, [r4, #4]
 8004d9a:	bf04      	itt	eq
 8004d9c:	1949      	addeq	r1, r1, r5
 8004d9e:	6021      	streq	r1, [r4, #0]
 8004da0:	6054      	str	r4, [r2, #4]
 8004da2:	e7ca      	b.n	8004d3a <_free_r+0x26>
 8004da4:	b003      	add	sp, #12
 8004da6:	bd30      	pop	{r4, r5, pc}
 8004da8:	200001c4 	.word	0x200001c4

08004dac <sbrk_aligned>:
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4e0e      	ldr	r6, [pc, #56]	; (8004de8 <sbrk_aligned+0x3c>)
 8004db0:	460c      	mov	r4, r1
 8004db2:	6831      	ldr	r1, [r6, #0]
 8004db4:	4605      	mov	r5, r0
 8004db6:	b911      	cbnz	r1, 8004dbe <sbrk_aligned+0x12>
 8004db8:	f000 f8bc 	bl	8004f34 <_sbrk_r>
 8004dbc:	6030      	str	r0, [r6, #0]
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f000 f8b7 	bl	8004f34 <_sbrk_r>
 8004dc6:	1c43      	adds	r3, r0, #1
 8004dc8:	d00a      	beq.n	8004de0 <sbrk_aligned+0x34>
 8004dca:	1cc4      	adds	r4, r0, #3
 8004dcc:	f024 0403 	bic.w	r4, r4, #3
 8004dd0:	42a0      	cmp	r0, r4
 8004dd2:	d007      	beq.n	8004de4 <sbrk_aligned+0x38>
 8004dd4:	1a21      	subs	r1, r4, r0
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f000 f8ac 	bl	8004f34 <_sbrk_r>
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d101      	bne.n	8004de4 <sbrk_aligned+0x38>
 8004de0:	f04f 34ff 	mov.w	r4, #4294967295
 8004de4:	4620      	mov	r0, r4
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
 8004de8:	200001c8 	.word	0x200001c8

08004dec <_malloc_r>:
 8004dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df0:	1ccd      	adds	r5, r1, #3
 8004df2:	f025 0503 	bic.w	r5, r5, #3
 8004df6:	3508      	adds	r5, #8
 8004df8:	2d0c      	cmp	r5, #12
 8004dfa:	bf38      	it	cc
 8004dfc:	250c      	movcc	r5, #12
 8004dfe:	2d00      	cmp	r5, #0
 8004e00:	4607      	mov	r7, r0
 8004e02:	db01      	blt.n	8004e08 <_malloc_r+0x1c>
 8004e04:	42a9      	cmp	r1, r5
 8004e06:	d905      	bls.n	8004e14 <_malloc_r+0x28>
 8004e08:	230c      	movs	r3, #12
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	2600      	movs	r6, #0
 8004e0e:	4630      	mov	r0, r6
 8004e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e14:	4e2e      	ldr	r6, [pc, #184]	; (8004ed0 <_malloc_r+0xe4>)
 8004e16:	f000 f89d 	bl	8004f54 <__malloc_lock>
 8004e1a:	6833      	ldr	r3, [r6, #0]
 8004e1c:	461c      	mov	r4, r3
 8004e1e:	bb34      	cbnz	r4, 8004e6e <_malloc_r+0x82>
 8004e20:	4629      	mov	r1, r5
 8004e22:	4638      	mov	r0, r7
 8004e24:	f7ff ffc2 	bl	8004dac <sbrk_aligned>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	d14d      	bne.n	8004eca <_malloc_r+0xde>
 8004e2e:	6834      	ldr	r4, [r6, #0]
 8004e30:	4626      	mov	r6, r4
 8004e32:	2e00      	cmp	r6, #0
 8004e34:	d140      	bne.n	8004eb8 <_malloc_r+0xcc>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	4631      	mov	r1, r6
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	eb04 0803 	add.w	r8, r4, r3
 8004e40:	f000 f878 	bl	8004f34 <_sbrk_r>
 8004e44:	4580      	cmp	r8, r0
 8004e46:	d13a      	bne.n	8004ebe <_malloc_r+0xd2>
 8004e48:	6821      	ldr	r1, [r4, #0]
 8004e4a:	3503      	adds	r5, #3
 8004e4c:	1a6d      	subs	r5, r5, r1
 8004e4e:	f025 0503 	bic.w	r5, r5, #3
 8004e52:	3508      	adds	r5, #8
 8004e54:	2d0c      	cmp	r5, #12
 8004e56:	bf38      	it	cc
 8004e58:	250c      	movcc	r5, #12
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	f7ff ffa5 	bl	8004dac <sbrk_aligned>
 8004e62:	3001      	adds	r0, #1
 8004e64:	d02b      	beq.n	8004ebe <_malloc_r+0xd2>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	442b      	add	r3, r5
 8004e6a:	6023      	str	r3, [r4, #0]
 8004e6c:	e00e      	b.n	8004e8c <_malloc_r+0xa0>
 8004e6e:	6822      	ldr	r2, [r4, #0]
 8004e70:	1b52      	subs	r2, r2, r5
 8004e72:	d41e      	bmi.n	8004eb2 <_malloc_r+0xc6>
 8004e74:	2a0b      	cmp	r2, #11
 8004e76:	d916      	bls.n	8004ea6 <_malloc_r+0xba>
 8004e78:	1961      	adds	r1, r4, r5
 8004e7a:	42a3      	cmp	r3, r4
 8004e7c:	6025      	str	r5, [r4, #0]
 8004e7e:	bf18      	it	ne
 8004e80:	6059      	strne	r1, [r3, #4]
 8004e82:	6863      	ldr	r3, [r4, #4]
 8004e84:	bf08      	it	eq
 8004e86:	6031      	streq	r1, [r6, #0]
 8004e88:	5162      	str	r2, [r4, r5]
 8004e8a:	604b      	str	r3, [r1, #4]
 8004e8c:	4638      	mov	r0, r7
 8004e8e:	f104 060b 	add.w	r6, r4, #11
 8004e92:	f000 f865 	bl	8004f60 <__malloc_unlock>
 8004e96:	f026 0607 	bic.w	r6, r6, #7
 8004e9a:	1d23      	adds	r3, r4, #4
 8004e9c:	1af2      	subs	r2, r6, r3
 8004e9e:	d0b6      	beq.n	8004e0e <_malloc_r+0x22>
 8004ea0:	1b9b      	subs	r3, r3, r6
 8004ea2:	50a3      	str	r3, [r4, r2]
 8004ea4:	e7b3      	b.n	8004e0e <_malloc_r+0x22>
 8004ea6:	6862      	ldr	r2, [r4, #4]
 8004ea8:	42a3      	cmp	r3, r4
 8004eaa:	bf0c      	ite	eq
 8004eac:	6032      	streq	r2, [r6, #0]
 8004eae:	605a      	strne	r2, [r3, #4]
 8004eb0:	e7ec      	b.n	8004e8c <_malloc_r+0xa0>
 8004eb2:	4623      	mov	r3, r4
 8004eb4:	6864      	ldr	r4, [r4, #4]
 8004eb6:	e7b2      	b.n	8004e1e <_malloc_r+0x32>
 8004eb8:	4634      	mov	r4, r6
 8004eba:	6876      	ldr	r6, [r6, #4]
 8004ebc:	e7b9      	b.n	8004e32 <_malloc_r+0x46>
 8004ebe:	230c      	movs	r3, #12
 8004ec0:	603b      	str	r3, [r7, #0]
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	f000 f84c 	bl	8004f60 <__malloc_unlock>
 8004ec8:	e7a1      	b.n	8004e0e <_malloc_r+0x22>
 8004eca:	6025      	str	r5, [r4, #0]
 8004ecc:	e7de      	b.n	8004e8c <_malloc_r+0xa0>
 8004ece:	bf00      	nop
 8004ed0:	200001c4 	.word	0x200001c4

08004ed4 <_realloc_r>:
 8004ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed8:	4680      	mov	r8, r0
 8004eda:	4614      	mov	r4, r2
 8004edc:	460e      	mov	r6, r1
 8004ede:	b921      	cbnz	r1, 8004eea <_realloc_r+0x16>
 8004ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	f7ff bf81 	b.w	8004dec <_malloc_r>
 8004eea:	b92a      	cbnz	r2, 8004ef8 <_realloc_r+0x24>
 8004eec:	f7ff ff12 	bl	8004d14 <_free_r>
 8004ef0:	4625      	mov	r5, r4
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ef8:	f000 f838 	bl	8004f6c <_malloc_usable_size_r>
 8004efc:	4284      	cmp	r4, r0
 8004efe:	4607      	mov	r7, r0
 8004f00:	d802      	bhi.n	8004f08 <_realloc_r+0x34>
 8004f02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f06:	d812      	bhi.n	8004f2e <_realloc_r+0x5a>
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	f7ff ff6e 	bl	8004dec <_malloc_r>
 8004f10:	4605      	mov	r5, r0
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d0ed      	beq.n	8004ef2 <_realloc_r+0x1e>
 8004f16:	42bc      	cmp	r4, r7
 8004f18:	4622      	mov	r2, r4
 8004f1a:	4631      	mov	r1, r6
 8004f1c:	bf28      	it	cs
 8004f1e:	463a      	movcs	r2, r7
 8004f20:	f7ff fb70 	bl	8004604 <memcpy>
 8004f24:	4631      	mov	r1, r6
 8004f26:	4640      	mov	r0, r8
 8004f28:	f7ff fef4 	bl	8004d14 <_free_r>
 8004f2c:	e7e1      	b.n	8004ef2 <_realloc_r+0x1e>
 8004f2e:	4635      	mov	r5, r6
 8004f30:	e7df      	b.n	8004ef2 <_realloc_r+0x1e>
	...

08004f34 <_sbrk_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4d06      	ldr	r5, [pc, #24]	; (8004f50 <_sbrk_r+0x1c>)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	602b      	str	r3, [r5, #0]
 8004f40:	f7fb ffbc 	bl	8000ebc <_sbrk>
 8004f44:	1c43      	adds	r3, r0, #1
 8004f46:	d102      	bne.n	8004f4e <_sbrk_r+0x1a>
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	b103      	cbz	r3, 8004f4e <_sbrk_r+0x1a>
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
 8004f50:	200001cc 	.word	0x200001cc

08004f54 <__malloc_lock>:
 8004f54:	4801      	ldr	r0, [pc, #4]	; (8004f5c <__malloc_lock+0x8>)
 8004f56:	f000 b811 	b.w	8004f7c <__retarget_lock_acquire_recursive>
 8004f5a:	bf00      	nop
 8004f5c:	200001d0 	.word	0x200001d0

08004f60 <__malloc_unlock>:
 8004f60:	4801      	ldr	r0, [pc, #4]	; (8004f68 <__malloc_unlock+0x8>)
 8004f62:	f000 b80c 	b.w	8004f7e <__retarget_lock_release_recursive>
 8004f66:	bf00      	nop
 8004f68:	200001d0 	.word	0x200001d0

08004f6c <_malloc_usable_size_r>:
 8004f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f70:	1f18      	subs	r0, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bfbc      	itt	lt
 8004f76:	580b      	ldrlt	r3, [r1, r0]
 8004f78:	18c0      	addlt	r0, r0, r3
 8004f7a:	4770      	bx	lr

08004f7c <__retarget_lock_acquire_recursive>:
 8004f7c:	4770      	bx	lr

08004f7e <__retarget_lock_release_recursive>:
 8004f7e:	4770      	bx	lr

08004f80 <_init>:
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	bf00      	nop
 8004f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f86:	bc08      	pop	{r3}
 8004f88:	469e      	mov	lr, r3
 8004f8a:	4770      	bx	lr

08004f8c <_fini>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	bf00      	nop
 8004f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f92:	bc08      	pop	{r3}
 8004f94:	469e      	mov	lr, r3
 8004f96:	4770      	bx	lr
