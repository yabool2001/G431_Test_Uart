
G431_Test_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e00  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000187c  08004fe0  08004fe0  00014fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800685c  0800685c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800685c  0800685c  0001685c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006864  08006864  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006864  08006864  00016864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006868  08006868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800686c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  2000005c  080068c8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080068c8  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d880  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002066  00000000  00000000  0002d94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  0002f9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000899  00000000  00000000  000304c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d640  00000000  00000000  00030d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db30  00000000  00000000  0004e399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8a67  00000000  00000000  0005bec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003208  00000000  00000000  00114930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00117b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004fc8 	.word	0x08004fc8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08004fc8 	.word	0x08004fc8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b0ad      	sub	sp, #180	; 0xb4
 80005d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f001 fdf3 	bl	80021bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8b5 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f997 	bl	800090c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005de:	f000 f949 	bl	8000874 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005e2:	f000 f8fb 	bl	80007dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  send_debug_logs ( "\nStart the application." ) ;
 80005e6:	484a      	ldr	r0, [pc, #296]	; (8000710 <main+0x144>)
 80005e8:	f000 f9f6 	bl	80009d8 <send_debug_logs>
  send_debug_logs ( "\nW produkcji nie zmieniaj MCU ani przyporzadkowania pinow PA9-12.\n" ) ;
 80005ec:	4849      	ldr	r0, [pc, #292]	; (8000714 <main+0x148>)
 80005ee:	f000 f9f3 	bl	80009d8 <send_debug_logs>
  reset_astronode () ;
 80005f2:	f000 fa1f 	bl	8000a34 <reset_astronode>

  print_housekeeping_timer = get_systick () ;
 80005f6:	f000 fa51 	bl	8000a9c <get_systick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a46      	ldr	r2, [pc, #280]	; (8000718 <main+0x14c>)
 80005fe:	6013      	str	r3, [r2, #0]

  //HAL_Delay ( 1000 ) ;
  astronode_send_cfg_wr ( true , false , true , false , true , true , true , false ) ;
 8000600:	2300      	movs	r3, #0
 8000602:	9303      	str	r3, [sp, #12]
 8000604:	2301      	movs	r3, #1
 8000606:	9302      	str	r3, [sp, #8]
 8000608:	2301      	movs	r3, #1
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2301      	movs	r3, #1
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	2201      	movs	r2, #1
 8000614:	2100      	movs	r1, #0
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fc2c 	bl	8000e74 <astronode_send_cfg_wr>
  //astronode_send_cfg_wr ( true , false , true , false , true , true , true , false ) ;
  astronode_send_cfg_sr () ;
 800061c:	f000 fbf4 	bl	8000e08 <astronode_send_cfg_sr>
  astronode_send_mpn_rr () ;
 8000620:	f000 ff10 	bl	8001444 <astronode_send_mpn_rr>
  astronode_send_msn_rr () ;
 8000624:	f000 fcba 	bl	8000f9c <astronode_send_msn_rr>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (is_evt_pin_high())
 8000628:	f000 fa6a 	bl	8000b00 <is_evt_pin_high>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d029      	beq.n	8000686 <main+0xba>
	  {
		  send_debug_logs("Evt pin is high.");
 8000632:	483a      	ldr	r0, [pc, #232]	; (800071c <main+0x150>)
 8000634:	f000 f9d0 	bl	80009d8 <send_debug_logs>
		  astronode_send_evt_rr();
 8000638:	f000 fd30 	bl	800109c <astronode_send_evt_rr>

		  if (is_sak_available())
 800063c:	f001 f9f8 	bl	8001a30 <is_sak_available>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d008      	beq.n	8000658 <main+0x8c>
		  {
			  astronode_send_sak_rr();
 8000646:	f000 fe6d 	bl	8001324 <astronode_send_sak_rr>
			  astronode_send_sak_cr();
 800064a:	f000 febd 	bl	80013c8 <astronode_send_sak_cr>
			  send_debug_logs("Message has been acknowledged.");
 800064e:	4834      	ldr	r0, [pc, #208]	; (8000720 <main+0x154>)
 8000650:	f000 f9c2 	bl	80009d8 <send_debug_logs>
			  astronode_send_per_rr();
 8000654:	f000 ffb2 	bl	80015bc <astronode_send_per_rr>
		  }

		  if (is_astronode_reset())
 8000658:	f001 f9f6 	bl	8001a48 <is_astronode_reset>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d004      	beq.n	800066c <main+0xa0>
		  {
			  send_debug_logs("Terminal has been reset.");
 8000662:	4830      	ldr	r0, [pc, #192]	; (8000724 <main+0x158>)
 8000664:	f000 f9b8 	bl	80009d8 <send_debug_logs>
			  astronode_send_res_cr();
 8000668:	f000 fe1e 	bl	80012a8 <astronode_send_res_cr>
		  }

		  if (is_command_available())
 800066c:	f001 f9f8 	bl	8001a60 <is_command_available>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d032      	beq.n	80006dc <main+0x110>
		  {
			  send_debug_logs("Unicast command is available");
 8000676:	482c      	ldr	r0, [pc, #176]	; (8000728 <main+0x15c>)
 8000678:	f000 f9ae 	bl	80009d8 <send_debug_logs>
			  astronode_send_cmd_rr();
 800067c:	f001 f8da 	bl	8001834 <astronode_send_cmd_rr>
			  astronode_send_cmd_cr();
 8000680:	f001 f89a 	bl	80017b8 <astronode_send_cmd_cr>
 8000684:	e02a      	b.n	80006dc <main+0x110>
		  }
	  }
	  else if ( is_message_available () )
 8000686:	f000 fa4b 	bl	8000b20 <is_message_available>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d025      	beq.n	80006dc <main+0x110>
	  {
		  send_debug_logs ( "The button is pressed." ) ;
 8000690:	4826      	ldr	r0, [pc, #152]	; (800072c <main+0x160>)
 8000692:	f000 f9a1 	bl	80009d8 <send_debug_logs>

		  g_payload_id_counter++;
 8000696:	4b26      	ldr	r3, [pc, #152]	; (8000730 <main+0x164>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	3301      	adds	r3, #1
 800069c:	b29a      	uxth	r2, r3
 800069e:	4b24      	ldr	r3, [pc, #144]	; (8000730 <main+0x164>)
 80006a0:	801a      	strh	r2, [r3, #0]
		  char payload[ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES] = {0};
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	229c      	movs	r2, #156	; 0x9c
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f004 f807 	bl	80046c0 <memset>

		  sprintf ( payload , "TsatMessage %d" , g_payload_id_counter ) ;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <main+0x164>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	463b      	mov	r3, r7
 80006ba:	491e      	ldr	r1, [pc, #120]	; (8000734 <main+0x168>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 ffdf 	bl	8004680 <siprintf>

		  astronode_send_pld_er ( g_payload_id_counter , payload , strlen ( payload ) ) ;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <main+0x164>)
 80006c4:	881c      	ldrh	r4, [r3, #0]
 80006c6:	463b      	mov	r3, r7
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fda9 	bl	8000220 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	463b      	mov	r3, r7
 80006d4:	4619      	mov	r1, r3
 80006d6:	4620      	mov	r0, r4
 80006d8:	f000 fd5a 	bl	8001190 <astronode_send_pld_er>
	  }

	  if ( get_systick () - print_housekeeping_timer > 1800000 /*60000*/ )
 80006dc:	f000 f9de 	bl	8000a9c <get_systick>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <main+0x14c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	4a13      	ldr	r2, [pc, #76]	; (8000738 <main+0x16c>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d99c      	bls.n	8000628 <main+0x5c>
	  {
		  g_number_of_message_to_send++ ;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <main+0x170>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <main+0x170>)
 80006f8:	701a      	strb	r2, [r3, #0]
		  send_debug_logs("g_number_of_message_to_send++");
 80006fa:	4811      	ldr	r0, [pc, #68]	; (8000740 <main+0x174>)
 80006fc:	f000 f96c 	bl	80009d8 <send_debug_logs>
		  astronode_send_per_rr () ;
 8000700:	f000 ff5c 	bl	80015bc <astronode_send_per_rr>
		  print_housekeeping_timer = get_systick () ;
 8000704:	f000 f9ca 	bl	8000a9c <get_systick>
 8000708:	4603      	mov	r3, r0
 800070a:	4a03      	ldr	r2, [pc, #12]	; (8000718 <main+0x14c>)
 800070c:	6013      	str	r3, [r2, #0]
	  if (is_evt_pin_high())
 800070e:	e78b      	b.n	8000628 <main+0x5c>
 8000710:	08004fe0 	.word	0x08004fe0
 8000714:	08004ff8 	.word	0x08004ff8
 8000718:	2000019c 	.word	0x2000019c
 800071c:	0800503c 	.word	0x0800503c
 8000720:	08005050 	.word	0x08005050
 8000724:	08005070 	.word	0x08005070
 8000728:	0800508c 	.word	0x0800508c
 800072c:	080050ac 	.word	0x080050ac
 8000730:	20000198 	.word	0x20000198
 8000734:	080050c4 	.word	0x080050c4
 8000738:	001b7740 	.word	0x001b7740
 800073c:	2000019a 	.word	0x2000019a
 8000740:	080050d4 	.word	0x080050d4

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0318 	add.w	r3, r7, #24
 800074e:	2238      	movs	r2, #56	; 0x38
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f003 ffb4 	bl	80046c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000766:	2000      	movs	r0, #0
 8000768:	f002 f850 	bl	800280c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000776:	2340      	movs	r3, #64	; 0x40
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077e:	2302      	movs	r3, #2
 8000780:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000782:	2304      	movs	r3, #4
 8000784:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000786:	2355      	movs	r3, #85	; 0x55
 8000788:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000792:	2302      	movs	r3, #2
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 0318 	add.w	r3, r7, #24
 800079a:	4618      	mov	r0, r3
 800079c:	f002 f8da 	bl	8002954 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007a6:	f000 f9d1 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2303      	movs	r3, #3
 80007b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2104      	movs	r1, #4
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 fbde 	bl	8002f84 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007ce:	f000 f9bd 	bl	8000b4c <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3750      	adds	r7, #80	; 0x50
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <MX_USART1_UART_Init+0x90>)
 80007e2:	4a23      	ldr	r2, [pc, #140]	; (8000870 <MX_USART1_UART_Init+0x94>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_USART1_UART_Init+0x90>)
 80007e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_USART1_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_USART1_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_USART1_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_USART1_UART_Init+0x90>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_USART1_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_USART1_UART_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_USART1_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_USART1_UART_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_USART1_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000824:	4811      	ldr	r0, [pc, #68]	; (800086c <MX_USART1_UART_Init+0x90>)
 8000826:	f002 ffb9 	bl	800379c <HAL_UART_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000830:	f000 f98c 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000834:	2100      	movs	r1, #0
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_USART1_UART_Init+0x90>)
 8000838:	f003 fe24 	bl	8004484 <HAL_UARTEx_SetTxFifoThreshold>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000842:	f000 f983 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000846:	2100      	movs	r1, #0
 8000848:	4808      	ldr	r0, [pc, #32]	; (800086c <MX_USART1_UART_Init+0x90>)
 800084a:	f003 fe59 	bl	8004500 <HAL_UARTEx_SetRxFifoThreshold>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000854:	f000 f97a 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_USART1_UART_Init+0x90>)
 800085a:	f003 fdda 	bl	8004412 <HAL_UARTEx_DisableFifoMode>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000864:	f000 f972 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000078 	.word	0x20000078
 8000870:	40013800 	.word	0x40013800

08000874 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <MX_USART2_UART_Init+0x90>)
 800087a:	4a23      	ldr	r2, [pc, #140]	; (8000908 <MX_USART2_UART_Init+0x94>)
 800087c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <MX_USART2_UART_Init+0x90>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_USART2_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_USART2_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_USART2_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_USART2_UART_Init+0x90>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008be:	f002 ff6d 	bl	800379c <HAL_UART_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008c8:	f000 f940 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008cc:	2100      	movs	r1, #0
 80008ce:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008d0:	f003 fdd8 	bl	8004484 <HAL_UARTEx_SetTxFifoThreshold>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008da:	f000 f937 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008de:	2100      	movs	r1, #0
 80008e0:	4808      	ldr	r0, [pc, #32]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008e2:	f003 fe0d 	bl	8004500 <HAL_UARTEx_SetRxFifoThreshold>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008ec:	f000 f92e 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_USART2_UART_Init+0x90>)
 80008f2:	f003 fd8e 	bl	8004412 <HAL_UARTEx_DisableFifoMode>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008fc:	f000 f926 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000108 	.word	0x20000108
 8000908:	40004400 	.word	0x40004400

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <MX_GPIO_Init+0xc4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4a2a      	ldr	r2, [pc, #168]	; (80009d0 <MX_GPIO_Init+0xc4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <MX_GPIO_Init+0xc4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <MX_GPIO_Init+0xc4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a24      	ldr	r2, [pc, #144]	; (80009d0 <MX_GPIO_Init+0xc4>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <MX_GPIO_Init+0xc4>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ASTRO_WAKEUP_Pin|ASTRO_RESET_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f640 0102 	movw	r1, #2050	; 0x802
 8000958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095c:	f001 ff3e 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000966:	481b      	ldr	r0, [pc, #108]	; (80009d4 <MX_GPIO_Init+0xc8>)
 8000968:	f001 ff38 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ASTRO_WAKEUP_Pin ASTRO_RESET_Pin */
  GPIO_InitStruct.Pin = ASTRO_WAKEUP_Pin|ASTRO_RESET_Pin;
 800096c:	f640 0302 	movw	r3, #2050	; 0x802
 8000970:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	4619      	mov	r1, r3
 8000984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000988:	f001 fd8e 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVENT_EXTI12_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVENT_EXTI12_Pin;
 800098c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000990:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000992:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ASTRO_EVENT_EXTI12_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4619      	mov	r1, r3
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f001 fd7f 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_GPIO_Init+0xc8>)
 80009c4:	f001 fd70 	bl	80024a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c8:	bf00      	nop
 80009ca:	3720      	adds	r7, #32
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40021000 	.word	0x40021000
 80009d4:	48000400 	.word	0x48000400

080009d8 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff fc1d 	bl	8000220 <strlen>
 80009e6:	60f8      	str	r0, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2bfa      	cmp	r3, #250	; 0xfa
 80009ec:	d908      	bls.n	8000a00 <send_debug_logs+0x28>
    {
        HAL_UART_Transmit ( HUART_USB , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 80009ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f2:	222a      	movs	r2, #42	; 0x2a
 80009f4:	490c      	ldr	r1, [pc, #48]	; (8000a28 <send_debug_logs+0x50>)
 80009f6:	480d      	ldr	r0, [pc, #52]	; (8000a2c <send_debug_logs+0x54>)
 80009f8:	f002 ff20 	bl	800383c <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 80009fc:	23fa      	movs	r3, #250	; 0xfa
 80009fe:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_USB , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	4808      	ldr	r0, [pc, #32]	; (8000a2c <send_debug_logs+0x54>)
 8000a0c:	f002 ff16 	bl	800383c <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_USB , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8000a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a14:	2201      	movs	r2, #1
 8000a16:	4906      	ldr	r1, [pc, #24]	; (8000a30 <send_debug_logs+0x58>)
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <send_debug_logs+0x54>)
 8000a1a:	f002 ff0f 	bl	800383c <HAL_UART_Transmit>
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	080050f4 	.word	0x080050f4
 8000a2c:	20000108 	.word	0x20000108
 8000a30:	08005120 	.word	0x08005120

08000a34 <reset_astronode>:
void reset_astronode ( void )
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RESET_GPIO_Port , ASTRO_RESET_Pin , GPIO_PIN_SET ) ;
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a42:	f001 fecb 	bl	80027dc <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8000a46:	2001      	movs	r0, #1
 8000a48:	f001 fc28 	bl	800229c <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RESET_GPIO_Port , ASTRO_RESET_Pin , GPIO_PIN_RESET ) ;
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a56:	f001 fec1 	bl	80027dc <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8000a5a:	20fa      	movs	r0, #250	; 0xfa
 8000a5c:	f001 fc1e 	bl	800229c <HAL_Delay>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <send_astronode_request+0x30>)
 8000a70:	f7ff ffb2 	bl	80009d8 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ffaf 	bl	80009d8 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <send_astronode_request+0x34>)
 8000a86:	f002 fed9 	bl	800383c <HAL_UART_Transmit>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	08005124 	.word	0x08005124
 8000a98:	20000078 	.word	0x20000078

08000a9c <get_systick>:
uint32_t get_systick ( void )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8000aa0:	f001 fbf0 	bl	8002284 <HAL_GetTick>
 8000aa4:	4603      	mov	r3, r0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	807b      	strh	r3, [r7, #2]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8000ab6:	f7ff fff1 	bl	8000a9c <get_systick>
 8000aba:	4602      	mov	r2, r0
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	1ad2      	subs	r2, r2, r3
 8000ac0:	887b      	ldrh	r3, [r7, #2]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	bf8c      	ite	hi
 8000ac6:	2301      	movhi	r3, #1
 8000ac8:	2300      	movls	r3, #0
 8000aca:	b2db      	uxtb	r3, r3
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8000adc:	2364      	movs	r3, #100	; 0x64
 8000ade:	2201      	movs	r2, #1
 8000ae0:	6879      	ldr	r1, [r7, #4]
 8000ae2:	4806      	ldr	r0, [pc, #24]	; (8000afc <is_astronode_character_received+0x28>)
 8000ae4:	f002 ff40 	bl	8003968 <HAL_UART_Receive>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf0c      	ite	eq
 8000aee:	2301      	moveq	r3, #1
 8000af0:	2300      	movne	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000078 	.word	0x20000078

08000b00 <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
    return ( HAL_GPIO_ReadPin ( ASTRO_EVENT_EXTI12_GPIO_Port , ASTRO_EVENT_EXTI12_Pin ) == GPIO_PIN_SET ? true : false ) ;
 8000b04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0c:	f001 fe4e 	bl	80027ac <HAL_GPIO_ReadPin>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	bf0c      	ite	eq
 8000b16:	2301      	moveq	r3, #1
 8000b18:	2300      	movne	r3, #0
 8000b1a:	b2db      	uxtb	r3, r3
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <is_message_available>:
bool is_message_available ( void )
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
    if ( g_number_of_message_to_send > 0 )
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <is_message_available+0x28>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d007      	beq.n	8000b3c <is_message_available+0x1c>
    {
        g_number_of_message_to_send--;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <is_message_available+0x28>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	3b01      	subs	r3, #1
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <is_message_available+0x28>)
 8000b36:	701a      	strb	r2, [r3, #0]
        return true;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <is_message_available+0x1e>
    }
    else
    {
        return false;
 8000b3c:	2300      	movs	r3, #0
    }
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	2000019a 	.word	0x2000019a

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <HAL_MspInit+0x44>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_MspInit+0x44>)
 8000b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x44>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6593      	str	r3, [r2, #88]	; 0x58
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x44>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b09c      	sub	sp, #112	; 0x70
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb8:	f107 0318 	add.w	r3, r7, #24
 8000bbc:	2244      	movs	r2, #68	; 0x44
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 fd7d 	bl	80046c0 <memset>
  if(huart->Instance==USART1)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a3e      	ldr	r2, [pc, #248]	; (8000cc4 <HAL_UART_MspInit+0x124>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d138      	bne.n	8000c42 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 fbed 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be8:	f7ff ffb0 	bl	8000b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bec:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <HAL_UART_MspInit+0x128>)
 8000bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf0:	4a35      	ldr	r2, [pc, #212]	; (8000cc8 <HAL_UART_MspInit+0x128>)
 8000bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf6:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf8:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <HAL_UART_MspInit+0x128>)
 8000bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <HAL_UART_MspInit+0x128>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c08:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <HAL_UART_MspInit+0x128>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c10:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <HAL_UART_MspInit+0x128>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c1c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c20:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c2e:	2307      	movs	r3, #7
 8000c30:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c36:	4619      	mov	r1, r3
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3c:	f001 fc34 	bl	80024a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c40:	e03b      	b.n	8000cba <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <HAL_UART_MspInit+0x12c>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d136      	bne.n	8000cba <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c54:	f107 0318 	add.w	r3, r7, #24
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 fbaf 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000c64:	f7ff ff72 	bl	8000b4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_UART_MspInit+0x128>)
 8000c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6c:	4a16      	ldr	r2, [pc, #88]	; (8000cc8 <HAL_UART_MspInit+0x128>)
 8000c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c72:	6593      	str	r3, [r2, #88]	; 0x58
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_UART_MspInit+0x128>)
 8000c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_UART_MspInit+0x128>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c84:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <HAL_UART_MspInit+0x128>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_UART_MspInit+0x128>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c98:	230c      	movs	r3, #12
 8000c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca8:	2307      	movs	r3, #7
 8000caa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb6:	f001 fbf7 	bl	80024a8 <HAL_GPIO_Init>
}
 8000cba:	bf00      	nop
 8000cbc:	3770      	adds	r7, #112	; 0x70
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40013800 	.word	0x40013800
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40004400 	.word	0x40004400

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f001 faa0 	bl	8002260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f003 fcbc 	bl	80046d0 <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20008000 	.word	0x20008000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	200001a0 	.word	0x200001a0
 8000d8c:	200002f8 	.word	0x200002f8

08000d90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000db6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dba:	490e      	ldr	r1, [pc, #56]	; (8000df4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <LoopForever+0xe>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd0:	4c0b      	ldr	r4, [pc, #44]	; (8000e00 <LoopForever+0x16>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dde:	f7ff ffd7 	bl	8000d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f003 fc7b 	bl	80046dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000de6:	f7ff fbf1 	bl	80005cc <main>

08000dea <LoopForever>:

LoopForever:
    b LoopForever
 8000dea:	e7fe      	b.n	8000dea <LoopForever>
  ldr   r0, =_estack
 8000dec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000df8:	0800686c 	.word	0x0800686c
  ldr r2, =_sbss
 8000dfc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e00:	200002f4 	.word	0x200002f4

08000e04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC1_2_IRQHandler>
	...

08000e08 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0e4      	sub	sp, #400	; 0x190
 8000e0c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000e0e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000e12:	22c6      	movs	r2, #198	; 0xc6
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 fc52 	bl	80046c0 <memset>
    astronode_app_msg_t answer = {0};
 8000e1c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000e20:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000e24:	4618      	mov	r0, r3
 8000e26:	23c6      	movs	r3, #198	; 0xc6
 8000e28:	461a      	mov	r2, r3
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	f003 fc48 	bl	80046c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8000e30:	2310      	movs	r3, #16
 8000e32:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    astronode_transport_send_receive(&request, &answer);
 8000e36:	463a      	mov	r2, r7
 8000e38:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fffa 	bl	8001e38 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8000e44:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000e48:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b90      	cmp	r3, #144	; 0x90
 8000e50:	d103      	bne.n	8000e5a <astronode_send_cfg_sr+0x52>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <astronode_send_cfg_sr+0x64>)
 8000e54:	f7ff fdc0 	bl	80009d8 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8000e58:	e002      	b.n	8000e60 <astronode_send_cfg_sr+0x58>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <astronode_send_cfg_sr+0x68>)
 8000e5c:	f7ff fdbc 	bl	80009d8 <send_debug_logs>
}
 8000e60:	bf00      	nop
 8000e62:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	08005558 	.word	0x08005558
 8000e70:	0800558c 	.word	0x0800558c

08000e74 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8000e74:	b5b0      	push	{r4, r5, r7, lr}
 8000e76:	b0e6      	sub	sp, #408	; 0x198
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4605      	mov	r5, r0
 8000e7c:	460c      	mov	r4, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000e86:	f2a3 1391 	subw	r3, r3, #401	; 0x191
 8000e8a:	462a      	mov	r2, r5
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000e92:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 8000e96:	4622      	mov	r2, r4
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000e9e:	f2a3 1393 	subw	r3, r3, #403	; 0x193
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000eaa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000eae:	460a      	mov	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8000eb2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000eb6:	22c6      	movs	r2, #198	; 0xc6
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 fc00 	bl	80046c0 <memset>
    astronode_app_msg_t answer = {0};
 8000ec0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000ec4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000ec8:	4618      	mov	r0, r3
 8000eca:	23c6      	movs	r3, #198	; 0xc6
 8000ecc:	461a      	mov	r2, r3
 8000ece:	2100      	movs	r1, #0
 8000ed0:	f003 fbf6 	bl	80046c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8000ed4:	2305      	movs	r3, #5
 8000ed6:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8000eda:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000ede:	f2a3 1391 	subw	r3, r3, #401	; 0x191
 8000ee2:	f993 2000 	ldrsb.w	r2, [r3]
 8000ee6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000eea:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8000ef8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000efc:	f2a3 1393 	subw	r3, r3, #403	; 0x193
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	4313      	orrs	r3, r2
 8000f08:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8000f0a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000f0e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	b2db      	uxtb	r3, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8000f1e:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8000f22:	f997 21a8 	ldrsb.w	r2, [r7, #424]	; 0x1a8
 8000f26:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8000f32:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8000f3e:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8000f4c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

    request.payload_len = 3;
 8000f50:	2303      	movs	r3, #3
 8000f52:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000f56:	f107 0208 	add.w	r2, r7, #8
 8000f5a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 ff69 	bl	8001e38 <astronode_transport_send_receive>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d10d      	bne.n	8000f88 <astronode_send_cfg_wr+0x114>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8000f6c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000f70:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b85      	cmp	r3, #133	; 0x85
 8000f78:	d103      	bne.n	8000f82 <astronode_send_cfg_wr+0x10e>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <astronode_send_cfg_wr+0x120>)
 8000f7c:	f7ff fd2c 	bl	80009d8 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
        }
    }
}
 8000f80:	e002      	b.n	8000f88 <astronode_send_cfg_wr+0x114>
            send_debug_logs("Failed to set the Astronode configuration.");
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <astronode_send_cfg_wr+0x124>)
 8000f84:	f7ff fd28 	bl	80009d8 <send_debug_logs>
}
 8000f88:	bf00      	nop
 8000f8a:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bdb0      	pop	{r4, r5, r7, pc}
 8000f92:	bf00      	nop
 8000f94:	080055c0 	.word	0x080055c0
 8000f98:	080055ec 	.word	0x080055ec

08000f9c <astronode_send_msn_rr>:
        }
    }
}

void astronode_send_msn_rr(void)
{
 8000f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fa0:	b0e7      	sub	sp, #412	; 0x19c
 8000fa2:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000fa4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fa8:	22c6      	movs	r2, #198	; 0xc6
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 fb87 	bl	80046c0 <memset>
    astronode_app_msg_t answer = {0};
 8000fb2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000fb6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000fba:	4618      	mov	r0, r3
 8000fbc:	23c6      	movs	r3, #198	; 0xc6
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	f003 fb7d 	bl	80046c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8000fc6:	231a      	movs	r3, #26
 8000fc8:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000fcc:	463a      	mov	r2, r7
 8000fce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 ff2f 	bl	8001e38 <astronode_transport_send_receive>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d150      	bne.n	8001082 <astronode_send_msn_rr+0xe6>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8000fe0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000fe4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b9a      	cmp	r3, #154	; 0x9a
 8000fec:	d146      	bne.n	800107c <astronode_send_msn_rr+0xe0>
        {
 8000fee:	466b      	mov	r3, sp
 8000ff0:	461e      	mov	r6, r3
            char serial_number[answer.payload_len];
 8000ff2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000ff6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000ffa:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
 8000ffe:	460b      	mov	r3, r1
 8001000:	3b01      	subs	r3, #1
 8001002:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001006:	b28b      	uxth	r3, r1
 8001008:	2200      	movs	r2, #0
 800100a:	4698      	mov	r8, r3
 800100c:	4691      	mov	r9, r2
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800101a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800101e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001022:	b28b      	uxth	r3, r1
 8001024:	2200      	movs	r2, #0
 8001026:	461c      	mov	r4, r3
 8001028:	4615      	mov	r5, r2
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	00eb      	lsls	r3, r5, #3
 8001034:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001038:	00e2      	lsls	r2, r4, #3
 800103a:	460b      	mov	r3, r1
 800103c:	3307      	adds	r3, #7
 800103e:	08db      	lsrs	r3, r3, #3
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	ebad 0d03 	sub.w	sp, sp, r3
 8001046:	466b      	mov	r3, sp
 8001048:	3300      	adds	r3, #0
 800104a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
            send_debug_logs("Module's Serial Number is:");
 800104e:	4810      	ldr	r0, [pc, #64]	; (8001090 <astronode_send_msn_rr+0xf4>)
 8001050:	f7ff fcc2 	bl	80009d8 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8001054:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001058:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800105c:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001060:	4619      	mov	r1, r3
 8001062:	463b      	mov	r3, r7
 8001064:	3301      	adds	r3, #1
 8001066:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <astronode_send_msn_rr+0xf8>)
 8001068:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800106c:	f003 fad4 	bl	8004618 <sniprintf>
            send_debug_logs(serial_number);
 8001070:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001074:	f7ff fcb0 	bl	80009d8 <send_debug_logs>
 8001078:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 800107a:	e002      	b.n	8001082 <astronode_send_msn_rr+0xe6>
            send_debug_logs("Failed to read module Serial Number.");
 800107c:	4806      	ldr	r0, [pc, #24]	; (8001098 <astronode_send_msn_rr+0xfc>)
 800107e:	f7ff fcab 	bl	80009d8 <send_debug_logs>
}
 8001082:	bf00      	nop
 8001084:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8001088:	46bd      	mov	sp, r7
 800108a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800108e:	bf00      	nop
 8001090:	080056a8 	.word	0x080056a8
 8001094:	08005688 	.word	0x08005688
 8001098:	080056c4 	.word	0x080056c4

0800109c <astronode_send_evt_rr>:
        }
    }
}

void astronode_send_evt_rr(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0e4      	sub	sp, #400	; 0x190
 80010a0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80010a2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80010a6:	22c6      	movs	r2, #198	; 0xc6
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 fb08 	bl	80046c0 <memset>
    astronode_app_msg_t answer = {0};
 80010b0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80010b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80010b8:	4618      	mov	r0, r3
 80010ba:	23c6      	movs	r3, #198	; 0xc6
 80010bc:	461a      	mov	r2, r3
 80010be:	2100      	movs	r1, #0
 80010c0:	f003 fafe 	bl	80046c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 80010c4:	2365      	movs	r3, #101	; 0x65
 80010c6:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80010ca:	463a      	mov	r2, r7
 80010cc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 feb0 	bl	8001e38 <astronode_transport_send_receive>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d142      	bne.n	8001164 <astronode_send_evt_rr+0xc8>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 80010de:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80010e2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2be5      	cmp	r3, #229	; 0xe5
 80010ea:	d13b      	bne.n	8001164 <astronode_send_evt_rr+0xc8>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 80010ec:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80010f0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80010f4:	785b      	ldrb	r3, [r3, #1]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <astronode_send_evt_rr+0xd4>)
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8001104:	481b      	ldr	r0, [pc, #108]	; (8001174 <astronode_send_evt_rr+0xd8>)
 8001106:	f7ff fc67 	bl	80009d8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 800110a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800110e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001112:	785b      	ldrb	r3, [r3, #1]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <astronode_send_evt_rr+0x8c>
            {
                g_is_astronode_reset = true;
 800111c:	4b16      	ldr	r3, [pc, #88]	; (8001178 <astronode_send_evt_rr+0xdc>)
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8001122:	4816      	ldr	r0, [pc, #88]	; (800117c <astronode_send_evt_rr+0xe0>)
 8001124:	f7ff fc58 	bl	80009d8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8001128:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800112c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001130:	785b      	ldrb	r3, [r3, #1]
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	2b00      	cmp	r3, #0
 8001138:	d005      	beq.n	8001146 <astronode_send_evt_rr+0xaa>
            {
                g_is_command_available = true;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <astronode_send_evt_rr+0xe4>)
 800113c:	2201      	movs	r2, #1
 800113e:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8001140:	4810      	ldr	r0, [pc, #64]	; (8001184 <astronode_send_evt_rr+0xe8>)
 8001142:	f7ff fc49 	bl	80009d8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8001146:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800114a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800114e:	785b      	ldrb	r3, [r3, #1]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <astronode_send_evt_rr+0xc8>
            {
                g_is_tx_msg_pending = true;
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <astronode_send_evt_rr+0xec>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 800115e:	480b      	ldr	r0, [pc, #44]	; (800118c <astronode_send_evt_rr+0xf0>)
 8001160:	f7ff fc3a 	bl	80009d8 <send_debug_logs>
            }

        }
    }
}
 8001164:	bf00      	nop
 8001166:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200001a4 	.word	0x200001a4
 8001174:	0800576c 	.word	0x0800576c
 8001178:	200001a5 	.word	0x200001a5
 800117c:	08005790 	.word	0x08005790
 8001180:	200001a6 	.word	0x200001a6
 8001184:	080057a8 	.word	0x080057a8
 8001188:	200001a7 	.word	0x200001a7
 800118c:	080057bc 	.word	0x080057bc

08001190 <astronode_send_pld_er>:
        }
    }
}

void astronode_send_pld_er(uint16_t payload_id, char *p_payload, uint16_t payload_length)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b0e6      	sub	sp, #408	; 0x198
 8001194:	af00      	add	r7, sp, #0
 8001196:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800119a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800119e:	6019      	str	r1, [r3, #0]
 80011a0:	4611      	mov	r1, r2
 80011a2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80011a6:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 80011aa:	4602      	mov	r2, r0
 80011ac:	801a      	strh	r2, [r3, #0]
 80011ae:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80011b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80011b6:	460a      	mov	r2, r1
 80011b8:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80011ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80011be:	22c6      	movs	r2, #198	; 0xc6
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 fa7c 	bl	80046c0 <memset>
    astronode_app_msg_t answer = {0};
 80011c8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80011cc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80011d0:	4618      	mov	r0, r3
 80011d2:	23c6      	movs	r3, #198	; 0xc6
 80011d4:	461a      	mov	r2, r3
 80011d6:	2100      	movs	r1, #0
 80011d8:	f003 fa72 	bl	80046c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 80011dc:	2325      	movs	r3, #37	; 0x25
 80011de:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 80011e2:	f8b7 3194 	ldrh.w	r3, [r7, #404]	; 0x194
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	b292      	uxth	r2, r2
 80011ea:	f8a7 2194 	strh.w	r2, [r7, #404]	; 0x194
 80011ee:	4619      	mov	r1, r3
 80011f0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80011f4:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	f501 73cc 	add.w	r3, r1, #408	; 0x198
 8001200:	443b      	add	r3, r7
 8001202:	f803 2cc7 	strb.w	r2, [r3, #-199]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 8001206:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800120a:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	b29a      	uxth	r2, r3
 8001214:	f8b7 3194 	ldrh.w	r3, [r7, #404]	; 0x194
 8001218:	1c59      	adds	r1, r3, #1
 800121a:	b289      	uxth	r1, r1
 800121c:	f8a7 1194 	strh.w	r1, [r7, #404]	; 0x194
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001226:	443b      	add	r3, r7
 8001228:	f803 2cc7 	strb.w	r2, [r3, #-199]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 800122c:	f8b7 3194 	ldrh.w	r3, [r7, #404]	; 0x194
 8001230:	461a      	mov	r2, r3
 8001232:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001236:	4413      	add	r3, r2
 8001238:	1c58      	adds	r0, r3, #1
 800123a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800123e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001242:	881a      	ldrh	r2, [r3, #0]
 8001244:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001248:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800124c:	6819      	ldr	r1, [r3, #0]
 800124e:	f003 fa6b 	bl	8004728 <memcpy>
    request.payload_len = 2 + payload_length;
 8001252:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001256:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	3302      	adds	r3, #2
 800125e:	b29b      	uxth	r3, r3
 8001260:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8001264:	f107 0208 	add.w	r2, r7, #8
 8001268:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fde2 	bl	8001e38 <astronode_transport_send_receive>
 8001274:	4603      	mov	r3, r0
 8001276:	2b01      	cmp	r3, #1
 8001278:	d10d      	bne.n	8001296 <astronode_send_pld_er+0x106>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 800127a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800127e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2ba5      	cmp	r3, #165	; 0xa5
 8001286:	d103      	bne.n	8001290 <astronode_send_pld_er+0x100>
        {
            send_debug_logs("Payload was successfully queued.");
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <astronode_send_pld_er+0x110>)
 800128a:	f7ff fba5 	bl	80009d8 <send_debug_logs>
        else
        {
            send_debug_logs("Payload failed to be queued.");
        }
    }
}
 800128e:	e002      	b.n	8001296 <astronode_send_pld_er+0x106>
            send_debug_logs("Payload failed to be queued.");
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <astronode_send_pld_er+0x114>)
 8001292:	f7ff fba1 	bl	80009d8 <send_debug_logs>
}
 8001296:	bf00      	nop
 8001298:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	08005874 	.word	0x08005874
 80012a4:	08005898 	.word	0x08005898

080012a8 <astronode_send_res_cr>:
        }
    }
}

void astronode_send_res_cr(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0e4      	sub	sp, #400	; 0x190
 80012ac:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80012ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012b2:	22c6      	movs	r2, #198	; 0xc6
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 fa02 	bl	80046c0 <memset>
    astronode_app_msg_t answer = {0};
 80012bc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80012c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80012c4:	4618      	mov	r0, r3
 80012c6:	23c6      	movs	r3, #198	; 0xc6
 80012c8:	461a      	mov	r2, r3
 80012ca:	2100      	movs	r1, #0
 80012cc:	f003 f9f8 	bl	80046c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 80012d0:	2355      	movs	r3, #85	; 0x55
 80012d2:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80012d6:	463a      	mov	r2, r7
 80012d8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fdaa 	bl	8001e38 <astronode_transport_send_receive>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d110      	bne.n	800130c <astronode_send_res_cr+0x64>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 80012ea:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80012ee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2bd5      	cmp	r3, #213	; 0xd5
 80012f6:	d106      	bne.n	8001306 <astronode_send_res_cr+0x5e>
        {
            g_is_astronode_reset = false;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <astronode_send_res_cr+0x70>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The reset has been cleared.");
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <astronode_send_res_cr+0x74>)
 8001300:	f7ff fb6a 	bl	80009d8 <send_debug_logs>
        else
        {
            send_debug_logs("No reset to clear.");
        }
    }
}
 8001304:	e002      	b.n	800130c <astronode_send_res_cr+0x64>
            send_debug_logs("No reset to clear.");
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <astronode_send_res_cr+0x78>)
 8001308:	f7ff fb66 	bl	80009d8 <send_debug_logs>
}
 800130c:	bf00      	nop
 800130e:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200001a5 	.word	0x200001a5
 800131c:	08005904 	.word	0x08005904
 8001320:	08005920 	.word	0x08005920

08001324 <astronode_send_sak_rr>:
        }
    }
}

void astronode_send_sak_rr(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0f8      	sub	sp, #480	; 0x1e0
 8001328:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800132a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800132e:	22c6      	movs	r2, #198	; 0xc6
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f003 f9c4 	bl	80046c0 <memset>
    astronode_app_msg_t answer = {0};
 8001338:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800133c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001340:	4618      	mov	r0, r3
 8001342:	23c6      	movs	r3, #198	; 0xc6
 8001344:	461a      	mov	r2, r3
 8001346:	2100      	movs	r1, #0
 8001348:	f003 f9ba 	bl	80046c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 800134c:	2345      	movs	r3, #69	; 0x45
 800134e:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8001352:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001356:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fd6b 	bl	8001e38 <astronode_transport_send_receive>
 8001362:	4603      	mov	r3, r0
 8001364:	2b01      	cmp	r3, #1
 8001366:	d126      	bne.n	80013b6 <astronode_send_sak_rr+0x92>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8001368:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800136c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2bc5      	cmp	r3, #197	; 0xc5
 8001374:	d11c      	bne.n	80013b0 <astronode_send_sak_rr+0x8c>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8001376:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800137a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800137e:	785b      	ldrb	r3, [r3, #1]
 8001380:	b29a      	uxth	r2, r3
 8001382:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001386:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800138a:	789b      	ldrb	r3, [r3, #2]
 800138c:	b29b      	uxth	r3, r3
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	b29b      	uxth	r3, r3
 8001392:	4413      	add	r3, r2
 8001394:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8001398:	f8b7 21de 	ldrh.w	r2, [r7, #478]	; 0x1de
 800139c:	463b      	mov	r3, r7
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <astronode_send_sak_rr+0x9c>)
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 f96d 	bl	8004680 <siprintf>
            send_debug_logs(str);
 80013a6:	463b      	mov	r3, r7
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fb15 	bl	80009d8 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 80013ae:	e002      	b.n	80013b6 <astronode_send_sak_rr+0x92>
            send_debug_logs("No acknowledgment available.");
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <astronode_send_sak_rr+0xa0>)
 80013b2:	f7ff fb11 	bl	80009d8 <send_debug_logs>
}
 80013b6:	bf00      	nop
 80013b8:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	08005990 	.word	0x08005990
 80013c4:	080059bc 	.word	0x080059bc

080013c8 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b0e4      	sub	sp, #400	; 0x190
 80013cc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80013ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013d2:	22c6      	movs	r2, #198	; 0xc6
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 f972 	bl	80046c0 <memset>
    astronode_app_msg_t answer = {0};
 80013dc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80013e0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80013e4:	4618      	mov	r0, r3
 80013e6:	23c6      	movs	r3, #198	; 0xc6
 80013e8:	461a      	mov	r2, r3
 80013ea:	2100      	movs	r1, #0
 80013ec:	f003 f968 	bl	80046c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 80013f0:	2346      	movs	r3, #70	; 0x46
 80013f2:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80013f6:	463a      	mov	r2, r7
 80013f8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fd1a 	bl	8001e38 <astronode_transport_send_receive>
 8001404:	4603      	mov	r3, r0
 8001406:	2b01      	cmp	r3, #1
 8001408:	d110      	bne.n	800142c <astronode_send_sak_cr+0x64>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 800140a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800140e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2bc6      	cmp	r3, #198	; 0xc6
 8001416:	d106      	bne.n	8001426 <astronode_send_sak_cr+0x5e>
        {
            g_is_sak_available = false;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <astronode_send_sak_cr+0x70>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 800141e:	4807      	ldr	r0, [pc, #28]	; (800143c <astronode_send_sak_cr+0x74>)
 8001420:	f7ff fada 	bl	80009d8 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8001424:	e002      	b.n	800142c <astronode_send_sak_cr+0x64>
            send_debug_logs("No acknowledgment available.");
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <astronode_send_sak_cr+0x78>)
 8001428:	f7ff fad6 	bl	80009d8 <send_debug_logs>
}
 800142c:	bf00      	nop
 800142e:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200001a4 	.word	0x200001a4
 800143c:	080059dc 	.word	0x080059dc
 8001440:	080059bc 	.word	0x080059bc

08001444 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8001444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001448:	b0e7      	sub	sp, #412	; 0x19c
 800144a:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800144c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001450:	22c6      	movs	r2, #198	; 0xc6
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f003 f933 	bl	80046c0 <memset>
    astronode_app_msg_t answer = {0};
 800145a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800145e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001462:	4618      	mov	r0, r3
 8001464:	23c6      	movs	r3, #198	; 0xc6
 8001466:	461a      	mov	r2, r3
 8001468:	2100      	movs	r1, #0
 800146a:	f003 f929 	bl	80046c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 800146e:	231b      	movs	r3, #27
 8001470:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8001474:	463a      	mov	r2, r7
 8001476:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fcdb 	bl	8001e38 <astronode_transport_send_receive>
 8001482:	4603      	mov	r3, r0
 8001484:	2b01      	cmp	r3, #1
 8001486:	d150      	bne.n	800152a <astronode_send_mpn_rr+0xe6>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8001488:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800148c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b9b      	cmp	r3, #155	; 0x9b
 8001494:	d146      	bne.n	8001524 <astronode_send_mpn_rr+0xe0>
        {
 8001496:	466b      	mov	r3, sp
 8001498:	461e      	mov	r6, r3
            char product_number[answer.payload_len];
 800149a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800149e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80014a2:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
 80014a6:	460b      	mov	r3, r1
 80014a8:	3b01      	subs	r3, #1
 80014aa:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80014ae:	b28b      	uxth	r3, r1
 80014b0:	2200      	movs	r2, #0
 80014b2:	4698      	mov	r8, r3
 80014b4:	4691      	mov	r9, r2
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014ca:	b28b      	uxth	r3, r1
 80014cc:	2200      	movs	r2, #0
 80014ce:	461c      	mov	r4, r3
 80014d0:	4615      	mov	r5, r2
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	00eb      	lsls	r3, r5, #3
 80014dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014e0:	00e2      	lsls	r2, r4, #3
 80014e2:	460b      	mov	r3, r1
 80014e4:	3307      	adds	r3, #7
 80014e6:	08db      	lsrs	r3, r3, #3
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	ebad 0d03 	sub.w	sp, sp, r3
 80014ee:	466b      	mov	r3, sp
 80014f0:	3300      	adds	r3, #0
 80014f2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
            send_debug_logs("Module's product number is:");
 80014f6:	4810      	ldr	r0, [pc, #64]	; (8001538 <astronode_send_mpn_rr+0xf4>)
 80014f8:	f7ff fa6e 	bl	80009d8 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 80014fc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001500:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001504:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001508:	4619      	mov	r1, r3
 800150a:	463b      	mov	r3, r7
 800150c:	3301      	adds	r3, #1
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <astronode_send_mpn_rr+0xf8>)
 8001510:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001514:	f003 f880 	bl	8004618 <sniprintf>
            send_debug_logs(product_number);
 8001518:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800151c:	f7ff fa5c 	bl	80009d8 <send_debug_logs>
 8001520:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8001522:	e002      	b.n	800152a <astronode_send_mpn_rr+0xe6>
            send_debug_logs("Failed to read module Serial Number.");
 8001524:	4806      	ldr	r0, [pc, #24]	; (8001540 <astronode_send_mpn_rr+0xfc>)
 8001526:	f7ff fa57 	bl	80009d8 <send_debug_logs>
}
 800152a:	bf00      	nop
 800152c:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8001530:	46bd      	mov	sp, r7
 8001532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001536:	bf00      	nop
 8001538:	08005aac 	.word	0x08005aac
 800153c:	08005688 	.word	0x08005688
 8001540:	080056c4 	.word	0x080056c4

08001544 <append_multiple_data_size_to_string>:

void append_multiple_data_size_to_string(char * const p_str, uint32_t * const p_data, uint8_t size)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	4613      	mov	r3, r2
 8001550:	71fb      	strb	r3, [r7, #7]
    switch (size)
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b04      	cmp	r3, #4
 8001556:	d018      	beq.n	800158a <append_multiple_data_size_to_string+0x46>
 8001558:	2b04      	cmp	r3, #4
 800155a:	dc1e      	bgt.n	800159a <append_multiple_data_size_to_string+0x56>
 800155c:	2b01      	cmp	r3, #1
 800155e:	d002      	beq.n	8001566 <append_multiple_data_size_to_string+0x22>
 8001560:	2b02      	cmp	r3, #2
 8001562:	d009      	beq.n	8001578 <append_multiple_data_size_to_string+0x34>
 8001564:	e019      	b.n	800159a <append_multiple_data_size_to_string+0x56>
    {
        case 1:
            sprintf(p_str, "%u", (uint8_t) *p_data);
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	4910      	ldr	r1, [pc, #64]	; (80015b0 <append_multiple_data_size_to_string+0x6c>)
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f003 f885 	bl	8004680 <siprintf>
            break;
 8001576:	e017      	b.n	80015a8 <append_multiple_data_size_to_string+0x64>
        case 2:
            sprintf(p_str, "%u", (uint16_t) *p_data);
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	b29b      	uxth	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	490b      	ldr	r1, [pc, #44]	; (80015b0 <append_multiple_data_size_to_string+0x6c>)
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f003 f87c 	bl	8004680 <siprintf>
            break;
 8001588:	e00e      	b.n	80015a8 <append_multiple_data_size_to_string+0x64>
        case 4:
            sprintf(p_str, "%lu", *p_data);
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	4908      	ldr	r1, [pc, #32]	; (80015b4 <append_multiple_data_size_to_string+0x70>)
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f003 f874 	bl	8004680 <siprintf>
            break;
 8001598:	e006      	b.n	80015a8 <append_multiple_data_size_to_string+0x64>
        default:
            sprintf(p_str, "tlv size error %u", size);
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	461a      	mov	r2, r3
 800159e:	4906      	ldr	r1, [pc, #24]	; (80015b8 <append_multiple_data_size_to_string+0x74>)
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f003 f86d 	bl	8004680 <siprintf>
    }
}
 80015a6:	bf00      	nop
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	08005ac8 	.word	0x08005ac8
 80015b4:	08005acc 	.word	0x08005acc
 80015b8:	08005ad0 	.word	0x08005ad0

080015bc <astronode_send_per_rr>:

void astronode_send_per_rr(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0fa      	sub	sp, #488	; 0x1e8
 80015c0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80015c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015c6:	22c6      	movs	r2, #198	; 0xc6
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 f878 	bl	80046c0 <memset>
    astronode_app_msg_t answer = {0};
 80015d0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80015d4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80015d8:	4618      	mov	r0, r3
 80015da:	23c6      	movs	r3, #198	; 0xc6
 80015dc:	461a      	mov	r2, r3
 80015de:	2100      	movs	r1, #0
 80015e0:	f003 f86e 	bl	80046c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_PER_RR;
 80015e4:	2367      	movs	r3, #103	; 0x67
 80015e6:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80015ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80015ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fc1f 	bl	8001e38 <astronode_transport_send_receive>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	f040 80b6 	bne.w	800176e <astronode_send_per_rr+0x1b2>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PER_RA)
 8001602:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001606:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2be7      	cmp	r3, #231	; 0xe7
 800160e:	f040 80ab 	bne.w	8001768 <astronode_send_per_rr+0x1ac>
        {
            uint16_t tlv_index = 0; // size 16bits to fit to payload_len
 8001612:	2300      	movs	r3, #0
 8001614:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
            char log_text[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            uint8_t tlv_size = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	f887 31e5 	strb.w	r3, [r7, #485]	; 0x1e5
            while (tlv_index < answer.payload_len)
 800161e:	e097      	b.n	8001750 <astronode_send_per_rr+0x194>
            {
                uint32_t *p_data = (uint32_t *) &answer.p_payload[tlv_index + 2];
 8001620:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8001624:	3302      	adds	r3, #2
 8001626:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800162a:	4413      	add	r3, r2
 800162c:	3301      	adds	r3, #1
 800162e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
                tlv_size = answer.p_payload[tlv_index + 1];
 8001632:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8001636:	3301      	adds	r3, #1
 8001638:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 800163c:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8001640:	4413      	add	r3, r2
 8001642:	785b      	ldrb	r3, [r3, #1]
 8001644:	f887 31e5 	strb.w	r3, [r7, #485]	; 0x1e5
                switch (answer.p_payload[tlv_index])
 8001648:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 800164c:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8001650:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8001654:	4413      	add	r3, r2
 8001656:	785b      	ldrb	r3, [r3, #1]
 8001658:	3b01      	subs	r3, #1
 800165a:	2b0d      	cmp	r3, #13
 800165c:	d856      	bhi.n	800170c <astronode_send_per_rr+0x150>
 800165e:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <astronode_send_per_rr+0xa8>)
 8001660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001664:	0800169d 	.word	0x0800169d
 8001668:	080016a5 	.word	0x080016a5
 800166c:	080016ad 	.word	0x080016ad
 8001670:	080016b5 	.word	0x080016b5
 8001674:	080016bd 	.word	0x080016bd
 8001678:	080016c5 	.word	0x080016c5
 800167c:	080016cd 	.word	0x080016cd
 8001680:	080016d5 	.word	0x080016d5
 8001684:	080016dd 	.word	0x080016dd
 8001688:	080016e5 	.word	0x080016e5
 800168c:	080016ed 	.word	0x080016ed
 8001690:	080016f5 	.word	0x080016f5
 8001694:	080016fd 	.word	0x080016fd
 8001698:	08001705 	.word	0x08001705
                {
                    case PC_COUNTER_ID_SAT_DET_PHASE_COUNT:
                        send_debug_logs("PC sat det phase count is: ");
 800169c:	4836      	ldr	r0, [pc, #216]	; (8001778 <astronode_send_per_rr+0x1bc>)
 800169e:	f7ff f99b 	bl	80009d8 <send_debug_logs>
                        break;
 80016a2:	e039      	b.n	8001718 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_SAT_DET_OPERATIONS_COUNT:
                        send_debug_logs("PC sat det operation count is: ");
 80016a4:	4835      	ldr	r0, [pc, #212]	; (800177c <astronode_send_per_rr+0x1c0>)
 80016a6:	f7ff f997 	bl	80009d8 <send_debug_logs>
                        break;
 80016aa:	e035      	b.n	8001718 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_SIGNALLING_DEMOD_PHASE_COUNT:
                        send_debug_logs("PC signalling demod phase count is: ");
 80016ac:	4834      	ldr	r0, [pc, #208]	; (8001780 <astronode_send_per_rr+0x1c4>)
 80016ae:	f7ff f993 	bl	80009d8 <send_debug_logs>
                        break;
 80016b2:	e031      	b.n	8001718 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_SIGNALLING_DEMOD_ATTEMPTS_COUNT:
                        send_debug_logs("PC signalling demod attemps count is: ");
 80016b4:	4833      	ldr	r0, [pc, #204]	; (8001784 <astronode_send_per_rr+0x1c8>)
 80016b6:	f7ff f98f 	bl	80009d8 <send_debug_logs>
                        break;
 80016ba:	e02d      	b.n	8001718 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_SIGNALLING_DEMOD_SUCCESSES_COUNT:
                        send_debug_logs("PC signalling demod successes count is: ");
 80016bc:	4832      	ldr	r0, [pc, #200]	; (8001788 <astronode_send_per_rr+0x1cc>)
 80016be:	f7ff f98b 	bl	80009d8 <send_debug_logs>
                        break;
 80016c2:	e029      	b.n	8001718 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_ACK_DEMOD_ATTEMPTS_COUNT:
                        send_debug_logs("PC ack demod attemps count is: ");
 80016c4:	4831      	ldr	r0, [pc, #196]	; (800178c <astronode_send_per_rr+0x1d0>)
 80016c6:	f7ff f987 	bl	80009d8 <send_debug_logs>
                        break;
 80016ca:	e025      	b.n	8001718 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_ACK_DEMOD_SUCCESS_COUNT:
                        send_debug_logs("PC ack demod success count is: ");
 80016cc:	4830      	ldr	r0, [pc, #192]	; (8001790 <astronode_send_per_rr+0x1d4>)
 80016ce:	f7ff f983 	bl	80009d8 <send_debug_logs>
                        break;
 80016d2:	e021      	b.n	8001718 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_QUEUED_MSG_COUNT:
                        send_debug_logs("PC queued message count is: ");
 80016d4:	482f      	ldr	r0, [pc, #188]	; (8001794 <astronode_send_per_rr+0x1d8>)
 80016d6:	f7ff f97f 	bl	80009d8 <send_debug_logs>
                        break;
 80016da:	e01d      	b.n	8001718 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_DEQUEUED_UNACKED_MSG_COUNT:
                        send_debug_logs("PC dequeued unacked message count is: ");
 80016dc:	482e      	ldr	r0, [pc, #184]	; (8001798 <astronode_send_per_rr+0x1dc>)
 80016de:	f7ff f97b 	bl	80009d8 <send_debug_logs>
                        break;
 80016e2:	e019      	b.n	8001718 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_ACKED_MSG_COUNT:
                        send_debug_logs("PC acked message count is: ");
 80016e4:	482d      	ldr	r0, [pc, #180]	; (800179c <astronode_send_per_rr+0x1e0>)
 80016e6:	f7ff f977 	bl	80009d8 <send_debug_logs>
                        break;
 80016ea:	e015      	b.n	8001718 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_SENT_FRAG_COUNT:
                        send_debug_logs("PC sent frag count is: ");
 80016ec:	482c      	ldr	r0, [pc, #176]	; (80017a0 <astronode_send_per_rr+0x1e4>)
 80016ee:	f7ff f973 	bl	80009d8 <send_debug_logs>
                        break;
 80016f2:	e011      	b.n	8001718 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_ACKED_FRAG_COUNT:
                        send_debug_logs("PC ack frag count is: ");
 80016f4:	482b      	ldr	r0, [pc, #172]	; (80017a4 <astronode_send_per_rr+0x1e8>)
 80016f6:	f7ff f96f 	bl	80009d8 <send_debug_logs>
                        break;
 80016fa:	e00d      	b.n	8001718 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_COMMAND_DEMOD_ATTEMPT_COUNT:
                        send_debug_logs("PC unicast demod attempt count is: ");
 80016fc:	482a      	ldr	r0, [pc, #168]	; (80017a8 <astronode_send_per_rr+0x1ec>)
 80016fe:	f7ff f96b 	bl	80009d8 <send_debug_logs>
                        break;
 8001702:	e009      	b.n	8001718 <astronode_send_per_rr+0x15c>
                    case PC_COUNTER_ID_COMMAND_DEMOD_SUCCESS_COUNT:
                        send_debug_logs("PC unicast demod success count is: ");
 8001704:	4829      	ldr	r0, [pc, #164]	; (80017ac <astronode_send_per_rr+0x1f0>)
 8001706:	f7ff f967 	bl	80009d8 <send_debug_logs>
                        break;
 800170a:	e005      	b.n	8001718 <astronode_send_per_rr+0x15c>
                    default:
                        send_debug_logs("PC error, type unknown");
 800170c:	4828      	ldr	r0, [pc, #160]	; (80017b0 <astronode_send_per_rr+0x1f4>)
 800170e:	f7ff f963 	bl	80009d8 <send_debug_logs>
                        tlv_size = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 31e5 	strb.w	r3, [r7, #485]	; 0x1e5
                }
                append_multiple_data_size_to_string(log_text, p_data, tlv_size);
 8001718:	f897 21e5 	ldrb.w	r2, [r7, #485]	; 0x1e5
 800171c:	463b      	mov	r3, r7
 800171e:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff0e 	bl	8001544 <append_multiple_data_size_to_string>
                send_debug_logs(log_text);
 8001728:	463b      	mov	r3, r7
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff f954 	bl	80009d8 <send_debug_logs>
                log_text[0] = '\0';
 8001730:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001734:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
                tlv_index += tlv_size + 2;
 800173c:	f897 31e5 	ldrb.w	r3, [r7, #485]	; 0x1e5
 8001740:	b29a      	uxth	r2, r3
 8001742:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8001746:	4413      	add	r3, r2
 8001748:	b29b      	uxth	r3, r3
 800174a:	3302      	adds	r3, #2
 800174c:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
            while (tlv_index < answer.payload_len)
 8001750:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001754:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001758:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800175c:	f8b7 21e6 	ldrh.w	r2, [r7, #486]	; 0x1e6
 8001760:	429a      	cmp	r2, r3
 8001762:	f4ff af5d 	bcc.w	8001620 <astronode_send_per_rr+0x64>
        else
        {
            send_debug_logs("Failed to get performance counters.");
        }
    }
}
 8001766:	e002      	b.n	800176e <astronode_send_per_rr+0x1b2>
            send_debug_logs("Failed to get performance counters.");
 8001768:	4812      	ldr	r0, [pc, #72]	; (80017b4 <astronode_send_per_rr+0x1f8>)
 800176a:	f7ff f935 	bl	80009d8 <send_debug_logs>
}
 800176e:	bf00      	nop
 8001770:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	08005ae4 	.word	0x08005ae4
 800177c:	08005b00 	.word	0x08005b00
 8001780:	08005b20 	.word	0x08005b20
 8001784:	08005b48 	.word	0x08005b48
 8001788:	08005b70 	.word	0x08005b70
 800178c:	08005b9c 	.word	0x08005b9c
 8001790:	08005bbc 	.word	0x08005bbc
 8001794:	08005bdc 	.word	0x08005bdc
 8001798:	08005bfc 	.word	0x08005bfc
 800179c:	08005c24 	.word	0x08005c24
 80017a0:	08005c40 	.word	0x08005c40
 80017a4:	08005c58 	.word	0x08005c58
 80017a8:	08005c70 	.word	0x08005c70
 80017ac:	08005c94 	.word	0x08005c94
 80017b0:	08005cb8 	.word	0x08005cb8
 80017b4:	08005cd0 	.word	0x08005cd0

080017b8 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0e4      	sub	sp, #400	; 0x190
 80017bc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80017be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017c2:	22c6      	movs	r2, #198	; 0xc6
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 ff7a 	bl	80046c0 <memset>
    astronode_app_msg_t answer = {0};
 80017cc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017d0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80017d4:	4618      	mov	r0, r3
 80017d6:	23c6      	movs	r3, #198	; 0xc6
 80017d8:	461a      	mov	r2, r3
 80017da:	2100      	movs	r1, #0
 80017dc:	f002 ff70 	bl	80046c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 80017e0:	2348      	movs	r3, #72	; 0x48
 80017e2:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80017e6:	463a      	mov	r2, r7
 80017e8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017ec:	4611      	mov	r1, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 fb22 	bl	8001e38 <astronode_transport_send_receive>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d110      	bne.n	800181c <astronode_send_cmd_cr+0x64>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 80017fa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2bc8      	cmp	r3, #200	; 0xc8
 8001806:	d106      	bne.n	8001816 <astronode_send_cmd_cr+0x5e>
        {
            g_is_command_available = false;
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <astronode_send_cmd_cr+0x70>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 800180e:	4807      	ldr	r0, [pc, #28]	; (800182c <astronode_send_cmd_cr+0x74>)
 8001810:	f7ff f8e2 	bl	80009d8 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8001814:	e002      	b.n	800181c <astronode_send_cmd_cr+0x64>
            send_debug_logs("No command to clear.");
 8001816:	4806      	ldr	r0, [pc, #24]	; (8001830 <astronode_send_cmd_cr+0x78>)
 8001818:	f7ff f8de 	bl	80009d8 <send_debug_logs>
}
 800181c:	bf00      	nop
 800181e:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200001a6 	.word	0x200001a6
 800182c:	08005efc 	.word	0x08005efc
 8001830:	08005f20 	.word	0x08005f20

08001834 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 8001834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001838:	b0fd      	sub	sp, #500	; 0x1f4
 800183a:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800183c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001840:	22c6      	movs	r2, #198	; 0xc6
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f002 ff3b 	bl	80046c0 <memset>
    astronode_app_msg_t answer = {0};
 800184a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800184e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001852:	4618      	mov	r0, r3
 8001854:	23c6      	movs	r3, #198	; 0xc6
 8001856:	461a      	mov	r2, r3
 8001858:	2100      	movs	r1, #0
 800185a:	f002 ff31 	bl	80046c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 800185e:	2347      	movs	r3, #71	; 0x47
 8001860:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8001864:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001868:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800186c:	4611      	mov	r1, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fae2 	bl	8001e38 <astronode_transport_send_receive>
 8001874:	4603      	mov	r3, r0
 8001876:	2b01      	cmp	r3, #1
 8001878:	f040 80c2 	bne.w	8001a00 <astronode_send_cmd_rr+0x1cc>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 800187c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001880:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2bc7      	cmp	r3, #199	; 0xc7
 8001888:	f040 80b7 	bne.w	80019fa <astronode_send_cmd_rr+0x1c6>
        {
 800188c:	466b      	mov	r3, sp
 800188e:	461e      	mov	r6, r3
            send_debug_logs("Received downlink command");
 8001890:	485e      	ldr	r0, [pc, #376]	; (8001a0c <astronode_send_cmd_rr+0x1d8>)
 8001892:	f7ff f8a1 	bl	80009d8 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8001896:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800189a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800189e:	785b      	ldrb	r3, [r3, #1]
 80018a0:	461a      	mov	r2, r3
                                + (answer.p_payload[1] << 8)
 80018a2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80018a6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80018aa:	789b      	ldrb	r3, [r3, #2]
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	441a      	add	r2, r3
                                + (answer.p_payload[2] << 16)
 80018b0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80018b4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80018b8:	78db      	ldrb	r3, [r3, #3]
 80018ba:	041b      	lsls	r3, r3, #16
 80018bc:	441a      	add	r2, r3
                                + (answer.p_payload[3] << 24);
 80018be:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80018c2:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80018c6:	791b      	ldrb	r3, [r3, #4]
 80018c8:	061b      	lsls	r3, r3, #24
 80018ca:	4413      	add	r3, r2
            uint32_t rtc_time = answer.p_payload[0]
 80018cc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 80018d0:	463b      	mov	r3, r7
 80018d2:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 80018d6:	494e      	ldr	r1, [pc, #312]	; (8001a10 <astronode_send_cmd_rr+0x1dc>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 fed1 	bl	8004680 <siprintf>
            send_debug_logs(str);
 80018de:	463b      	mov	r3, r7
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff f879 	bl	80009d8 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 80018e6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80018ea:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80018ee:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80018f2:	2b2c      	cmp	r3, #44	; 0x2c
 80018f4:	d00b      	beq.n	800190e <astronode_send_cmd_rr+0xda>
 80018f6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80018fa:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80018fe:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001902:	2b0c      	cmp	r3, #12
 8001904:	d003      	beq.n	800190e <astronode_send_cmd_rr+0xda>
            {
                send_debug_logs("Command size error");
 8001906:	4843      	ldr	r0, [pc, #268]	; (8001a14 <astronode_send_cmd_rr+0x1e0>)
 8001908:	f7ff f866 	bl	80009d8 <send_debug_logs>
                return;
 800190c:	e073      	b.n	80019f6 <astronode_send_cmd_rr+0x1c2>
            }

            char command_content[answer.payload_len];
 800190e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001912:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001916:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
 800191a:	460b      	mov	r3, r1
 800191c:	3b01      	subs	r3, #1
 800191e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001922:	b28b      	uxth	r3, r1
 8001924:	2200      	movs	r2, #0
 8001926:	4698      	mov	r8, r3
 8001928:	4691      	mov	r9, r2
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800193a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800193e:	b28b      	uxth	r3, r1
 8001940:	2200      	movs	r2, #0
 8001942:	461c      	mov	r4, r3
 8001944:	4615      	mov	r5, r2
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	00eb      	lsls	r3, r5, #3
 8001950:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001954:	00e2      	lsls	r2, r4, #3
 8001956:	460b      	mov	r3, r1
 8001958:	3307      	adds	r3, #7
 800195a:	08db      	lsrs	r3, r3, #3
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	ebad 0d03 	sub.w	sp, sp, r3
 8001962:	466b      	mov	r3, sp
 8001964:	3300      	adds	r3, #0
 8001966:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 800196a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800196e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001972:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001976:	3b03      	subs	r3, #3
 8001978:	4619      	mov	r1, r3
 800197a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800197e:	3305      	adds	r3, #5
 8001980:	4a25      	ldr	r2, [pc, #148]	; (8001a18 <astronode_send_cmd_rr+0x1e4>)
 8001982:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 8001986:	f002 fe47 	bl	8004618 <sniprintf>
 800198a:	4603      	mov	r3, r0
 800198c:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
            for (uint8_t index = 0; index < command_content_size; index++)
 8001990:	2300      	movs	r3, #0
 8001992:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
 8001996:	e015      	b.n	80019c4 <astronode_send_cmd_rr+0x190>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8001998:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 800199c:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	3301      	adds	r3, #1
 80019a4:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <astronode_send_cmd_rr+0x1e8>)
 80019a6:	4413      	add	r3, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	f003 0397 	and.w	r3, r3, #151	; 0x97
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d103      	bne.n	80019ba <astronode_send_cmd_rr+0x186>
                {
                    send_debug_logs("Command contains non printable characters");
 80019b2:	481b      	ldr	r0, [pc, #108]	; (8001a20 <astronode_send_cmd_rr+0x1ec>)
 80019b4:	f7ff f810 	bl	80009d8 <send_debug_logs>
                    return;
 80019b8:	e01d      	b.n	80019f6 <astronode_send_cmd_rr+0x1c2>
            for (uint8_t index = 0; index < command_content_size; index++)
 80019ba:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 80019be:	3301      	adds	r3, #1
 80019c0:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
 80019c4:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	f8b7 21de 	ldrh.w	r2, [r7, #478]	; 0x1de
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d8e2      	bhi.n	8001998 <astronode_send_cmd_rr+0x164>
                }
            }
            send_debug_logs("Command content is: ");
 80019d2:	4814      	ldr	r0, [pc, #80]	; (8001a24 <astronode_send_cmd_rr+0x1f0>)
 80019d4:	f7ff f800 	bl	80009d8 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 80019d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019dc:	3305      	adds	r3, #5
 80019de:	461a      	mov	r2, r3
 80019e0:	4911      	ldr	r1, [pc, #68]	; (8001a28 <astronode_send_cmd_rr+0x1f4>)
 80019e2:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 80019e6:	f002 fe4b 	bl	8004680 <siprintf>
            send_debug_logs(command_content);
 80019ea:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 80019ee:	f7fe fff3 	bl	80009d8 <send_debug_logs>
 80019f2:	46b5      	mov	sp, r6
 80019f4:	e004      	b.n	8001a00 <astronode_send_cmd_rr+0x1cc>
                return;
 80019f6:	46b5      	mov	sp, r6
 80019f8:	e002      	b.n	8001a00 <astronode_send_cmd_rr+0x1cc>
        }
        else
        {
            send_debug_logs("No command available.");
 80019fa:	480c      	ldr	r0, [pc, #48]	; (8001a2c <astronode_send_cmd_rr+0x1f8>)
 80019fc:	f7fe ffec 	bl	80009d8 <send_debug_logs>
        }
    }
}
 8001a00:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 8001a04:	46bd      	mov	sp, r7
 8001a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a0a:	bf00      	nop
 8001a0c:	08005f38 	.word	0x08005f38
 8001a10:	08005f54 	.word	0x08005f54
 8001a14:	08005fa4 	.word	0x08005fa4
 8001a18:	08005688 	.word	0x08005688
 8001a1c:	08006728 	.word	0x08006728
 8001a20:	08005fb8 	.word	0x08005fb8
 8001a24:	08005fe4 	.word	0x08005fe4
 8001a28:	08005ffc 	.word	0x08005ffc
 8001a2c:	08006000 	.word	0x08006000

08001a30 <is_sak_available>:

bool is_sak_available()
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <is_sak_available+0x14>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	200001a4 	.word	0x200001a4

08001a48 <is_astronode_reset>:

bool is_astronode_reset()
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <is_astronode_reset+0x14>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	200001a5 	.word	0x200001a5

08001a60 <is_command_available>:

bool is_command_available()
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <is_command_available+0x14>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	200001a6 	.word	0x200001a6

08001a78 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	71fb      	strb	r3, [r7, #7]
    if (ascii >= '0' && ascii <= '9')
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	2b2f      	cmp	r3, #47	; 0x2f
 8001a88:	d909      	bls.n	8001a9e <ascii_to_value+0x26>
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2b39      	cmp	r3, #57	; 0x39
 8001a8e:	d806      	bhi.n	8001a9e <ascii_to_value+0x26>
    {
        *p_value = ascii - '0';
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	3b30      	subs	r3, #48	; 0x30
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	701a      	strb	r2, [r3, #0]
        return true;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00d      	b.n	8001aba <ascii_to_value+0x42>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b40      	cmp	r3, #64	; 0x40
 8001aa2:	d909      	bls.n	8001ab8 <ascii_to_value+0x40>
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	2b46      	cmp	r3, #70	; 0x46
 8001aa8:	d806      	bhi.n	8001ab8 <ascii_to_value+0x40>
    {
        *p_value = ascii - 'A' + 10;
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	3b37      	subs	r3, #55	; 0x37
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	701a      	strb	r2, [r3, #0]
        return true;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <ascii_to_value+0x42>
    }
    else
    {
        return false;
 8001ab8:	2300      	movs	r3, #0
    }
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	81fb      	strh	r3, [r7, #14]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8001ad4:	89fb      	ldrh	r3, [r7, #14]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	81fa      	strh	r2, [r7, #14]
 8001ada:	461a      	mov	r2, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aea:	2101      	movs	r1, #1
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 fa07 	bl	8001f00 <calculate_crc>
 8001af2:	4603      	mov	r3, r0
 8001af4:	817b      	strh	r3, [r7, #10]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	1c58      	adds	r0, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001b00:	897a      	ldrh	r2, [r7, #10]
 8001b02:	4619      	mov	r1, r3
 8001b04:	f000 f9fc 	bl	8001f00 <calculate_crc>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	817b      	strh	r3, [r7, #10]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8001b0c:	897b      	ldrh	r3, [r7, #10]
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	b21a      	sxth	r2, r3
 8001b12:	897b      	ldrh	r3, [r7, #10]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	817b      	strh	r3, [r7, #10]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7818      	ldrb	r0, [r3, #0]
 8001b24:	89fb      	ldrh	r3, [r7, #14]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f000 fb28 	bl	8002180 <uint8_to_ascii_buffer>
    index += 2;
 8001b30:	89fb      	ldrh	r3, [r7, #14]
 8001b32:	3302      	adds	r3, #2
 8001b34:	81fb      	strh	r3, [r7, #14]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	81bb      	strh	r3, [r7, #12]
 8001b3a:	e00f      	b.n	8001b5c <astronode_create_request_transport+0x96>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8001b3c:	89bb      	ldrh	r3, [r7, #12]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	7858      	ldrb	r0, [r3, #1]
 8001b44:	89fb      	ldrh	r3, [r7, #14]
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f000 fb18 	bl	8002180 <uint8_to_ascii_buffer>
        index += 2;
 8001b50:	89fb      	ldrh	r3, [r7, #14]
 8001b52:	3302      	adds	r3, #2
 8001b54:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8001b56:	89bb      	ldrh	r3, [r7, #12]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	81bb      	strh	r3, [r7, #12]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001b62:	89ba      	ldrh	r2, [r7, #12]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d3e9      	bcc.n	8001b3c <astronode_create_request_transport+0x76>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8001b68:	897b      	ldrh	r3, [r7, #10]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	b2d8      	uxtb	r0, r3
 8001b70:	89fb      	ldrh	r3, [r7, #14]
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	4413      	add	r3, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f000 fb02 	bl	8002180 <uint8_to_ascii_buffer>
    index += 2;
 8001b7c:	89fb      	ldrh	r3, [r7, #14]
 8001b7e:	3302      	adds	r3, #2
 8001b80:	81fb      	strh	r3, [r7, #14]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8001b82:	897b      	ldrh	r3, [r7, #10]
 8001b84:	b2d8      	uxtb	r0, r3
 8001b86:	89fb      	ldrh	r3, [r7, #14]
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f000 faf7 	bl	8002180 <uint8_to_ascii_buffer>
    index += 2;
 8001b92:	89fb      	ldrh	r3, [r7, #14]
 8001b94:	3302      	adds	r3, #2
 8001b96:	81fb      	strh	r3, [r7, #14]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8001b98:	89fb      	ldrh	r3, [r7, #14]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	81fa      	strh	r2, [r7, #14]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	701a      	strb	r2, [r3, #0]

    return index;
 8001ba8:	89fb      	ldrh	r3, [r7, #14]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	817b      	strh	r3, [r7, #10]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d004      	beq.n	8001bd4 <astronode_decode_answer_transport+0x20>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8001bca:	4896      	ldr	r0, [pc, #600]	; (8001e24 <astronode_decode_answer_transport+0x270>)
 8001bcc:	f7fe ff04 	bl	80009d8 <send_debug_logs>
        return RS_FAILURE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e123      	b.n	8001e1c <astronode_decode_answer_transport+0x268>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8001bd4:	897b      	ldrh	r3, [r7, #10]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d102      	bne.n	8001be6 <astronode_decode_answer_transport+0x32>
 8001be0:	897b      	ldrh	r3, [r7, #10]
 8001be2:	2b07      	cmp	r3, #7
 8001be4:	d804      	bhi.n	8001bf0 <astronode_decode_answer_transport+0x3c>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8001be6:	4890      	ldr	r0, [pc, #576]	; (8001e28 <astronode_decode_answer_transport+0x274>)
 8001be8:	f7fe fef6 	bl	80009d8 <send_debug_logs>
        return RS_FAILURE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e115      	b.n	8001e1c <astronode_decode_answer_transport+0x268>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8001bf0:	897b      	ldrh	r3, [r7, #10]
 8001bf2:	3b08      	subs	r3, #8
 8001bf4:	0fda      	lsrs	r2, r3, #31
 8001bf6:	4413      	add	r3, r2
 8001bf8:	105b      	asrs	r3, r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8001c02:	897b      	ldrh	r3, [r7, #10]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4413      	add	r3, r2
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d004      	beq.n	8001c1a <astronode_decode_answer_transport+0x66>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8001c10:	4886      	ldr	r0, [pc, #536]	; (8001e2c <astronode_decode_answer_transport+0x278>)
 8001c12:	f7fe fee1 	bl	80009d8 <send_debug_logs>
        return RS_FAILURE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e100      	b.n	8001e1c <astronode_decode_answer_transport+0x268>
    }

    uint8_t nibble_high = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]
    uint8_t nibble_low = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	75bb      	strb	r3, [r7, #22]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3301      	adds	r3, #1
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	f107 0217 	add.w	r2, r7, #23
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff22 	bl	8001a78 <ascii_to_value>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f083 0301 	eor.w	r3, r3, #1
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10e      	bne.n	8001c5e <astronode_decode_answer_transport+0xaa>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3302      	adds	r3, #2
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	f107 0216 	add.w	r2, r7, #22
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff13 	bl	8001a78 <ascii_to_value>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f083 0301 	eor.w	r3, r3, #1
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d004      	beq.n	8001c68 <astronode_decode_answer_transport+0xb4>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001c5e:	4874      	ldr	r0, [pc, #464]	; (8001e30 <astronode_decode_answer_transport+0x27c>)
 8001c60:	f7fe feba 	bl	80009d8 <send_debug_logs>
        return RS_FAILURE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e0d9      	b.n	8001e1c <astronode_decode_answer_transport+0x268>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	7dbb      	ldrb	r3, [r7, #22]
 8001c70:	4413      	add	r3, r2
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8001c78:	2303      	movs	r3, #3
 8001c7a:	83fb      	strh	r3, [r7, #30]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	83bb      	strh	r3, [r7, #28]
 8001c80:	e035      	b.n	8001cee <astronode_decode_answer_transport+0x13a>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8001c82:	8bfb      	ldrh	r3, [r7, #30]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	f107 0217 	add.w	r2, r7, #23
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fef1 	bl	8001a78 <ascii_to_value>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f083 0301 	eor.w	r3, r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d110      	bne.n	8001cc4 <astronode_decode_answer_transport+0x110>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8001ca2:	8bfb      	ldrh	r3, [r7, #30]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	f107 0216 	add.w	r2, r7, #22
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fee0 	bl	8001a78 <ascii_to_value>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f083 0301 	eor.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <astronode_decode_answer_transport+0x11a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001cc4:	485a      	ldr	r0, [pc, #360]	; (8001e30 <astronode_decode_answer_transport+0x27c>)
 8001cc6:	f7fe fe87 	bl	80009d8 <send_debug_logs>
            return RS_FAILURE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e0a6      	b.n	8001e1c <astronode_decode_answer_transport+0x268>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	b2d9      	uxtb	r1, r3
 8001cd4:	7dba      	ldrb	r2, [r7, #22]
 8001cd6:	8bbb      	ldrh	r3, [r7, #28]
 8001cd8:	1c58      	adds	r0, r3, #1
 8001cda:	83b8      	strh	r0, [r7, #28]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	188b      	adds	r3, r1, r2
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4403      	add	r3, r0
 8001ce6:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8001ce8:	8bfb      	ldrh	r3, [r7, #30]
 8001cea:	3302      	adds	r3, #2
 8001cec:	83fb      	strh	r3, [r7, #30]
 8001cee:	8bfa      	ldrh	r2, [r7, #30]
 8001cf0:	897b      	ldrh	r3, [r7, #10]
 8001cf2:	3b05      	subs	r3, #5
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	dbc4      	blt.n	8001c82 <astronode_decode_answer_transport+0xce>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cfe:	2101      	movs	r1, #1
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 f8fd 	bl	8001f00 <calculate_crc>
 8001d06:	4603      	mov	r3, r0
 8001d08:	837b      	strh	r3, [r7, #26]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	1c58      	adds	r0, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001d14:	8b7a      	ldrh	r2, [r7, #26]
 8001d16:	4619      	mov	r1, r3
 8001d18:	f000 f8f2 	bl	8001f00 <calculate_crc>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	837b      	strh	r3, [r7, #26]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8001d20:	8b7b      	ldrh	r3, [r7, #26]
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	b21a      	sxth	r2, r3
 8001d26:	8b7b      	ldrh	r3, [r7, #26]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	b21b      	sxth	r3, r3
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	837b      	strh	r3, [r7, #26]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8001d34:	897b      	ldrh	r3, [r7, #10]
 8001d36:	3b05      	subs	r3, #5
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	f107 0217 	add.w	r2, r7, #23
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fe97 	bl	8001a78 <ascii_to_value>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f083 0301 	eor.w	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d110      	bne.n	8001d78 <astronode_decode_answer_transport+0x1c4>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8001d56:	897b      	ldrh	r3, [r7, #10]
 8001d58:	3b04      	subs	r3, #4
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	f107 0216 	add.w	r2, r7, #22
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fe86 	bl	8001a78 <ascii_to_value>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f083 0301 	eor.w	r3, r3, #1
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d004      	beq.n	8001d82 <astronode_decode_answer_transport+0x1ce>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001d78:	482d      	ldr	r0, [pc, #180]	; (8001e30 <astronode_decode_answer_transport+0x27c>)
 8001d7a:	f7fe fe2d 	bl	80009d8 <send_debug_logs>
        return RS_FAILURE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e04c      	b.n	8001e1c <astronode_decode_answer_transport+0x268>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	031b      	lsls	r3, r3, #12
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	7dbb      	ldrb	r3, [r7, #22]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	833b      	strh	r3, [r7, #24]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	f107 0217 	add.w	r2, r7, #23
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fe66 	bl	8001a78 <ascii_to_value>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f083 0301 	eor.w	r3, r3, #1
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d110      	bne.n	8001dda <astronode_decode_answer_transport+0x226>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8001db8:	897b      	ldrh	r3, [r7, #10]
 8001dba:	3b02      	subs	r3, #2
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	f107 0216 	add.w	r2, r7, #22
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fe55 	bl	8001a78 <ascii_to_value>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f083 0301 	eor.w	r3, r3, #1
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <astronode_decode_answer_transport+0x230>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001dda:	4815      	ldr	r0, [pc, #84]	; (8001e30 <astronode_decode_answer_transport+0x27c>)
 8001ddc:	f7fe fdfc 	bl	80009d8 <send_debug_logs>
        return RS_FAILURE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	e01b      	b.n	8001e1c <astronode_decode_answer_transport+0x268>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	7dbb      	ldrb	r3, [r7, #22]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	8b3b      	ldrh	r3, [r7, #24]
 8001df6:	4413      	add	r3, r2
 8001df8:	833b      	strh	r3, [r7, #24]

    if (crc_received != crc_calculated)
 8001dfa:	8b3a      	ldrh	r2, [r7, #24]
 8001dfc:	8b7b      	ldrh	r3, [r7, #26]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d004      	beq.n	8001e0c <astronode_decode_answer_transport+0x258>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8001e02:	480c      	ldr	r0, [pc, #48]	; (8001e34 <astronode_decode_answer_transport+0x280>)
 8001e04:	f7fe fde8 	bl	80009d8 <send_debug_logs>
        return RS_FAILURE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e007      	b.n	8001e1c <astronode_decode_answer_transport+0x268>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2bff      	cmp	r3, #255	; 0xff
 8001e12:	d102      	bne.n	8001e1a <astronode_decode_answer_transport+0x266>
    {
        check_for_error(p_destination_message);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f8ad 	bl	8001f74 <check_for_error>
    }

    return RS_SUCCESS;
 8001e1a:	2301      	movs	r3, #1
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	08006018 	.word	0x08006018
 8001e28:	08006068 	.word	0x08006068
 8001e2c:	080060b8 	.word	0x080060b8
 8001e30:	08006108 	.word	0x08006108
 8001e34:	08006154 	.word	0x08006154

08001e38 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001e44:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8001e48:	6018      	str	r0, [r3, #0]
 8001e4a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001e4e:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001e52:	6019      	str	r1, [r3, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8001e54:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001e58:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	3304      	adds	r3, #4
 8001e62:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f002 fc29 	bl	80046c0 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8001e6e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001e72:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f002 fc1c 	bl	80046c0 <memset>
    uint16_t answer_length =  0;
 8001e88:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001e8c:	f2a3 331e 	subw	r3, r3, #798	; 0x31e
 8001e90:	2200      	movs	r2, #0
 8001e92:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8001e94:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8001e98:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001e9c:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	f7ff fe0f 	bl	8001ac6 <astronode_create_request_transport>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f8a7 3326 	strh.w	r3, [r7, #806]	; 0x326

    send_astronode_request(request_transport, request_length);
 8001eae:	f8b7 2326 	ldrh.w	r2, [r7, #806]	; 0x326
 8001eb2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fdd3 	bl	8000a64 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8001ebe:	f107 020a 	add.w	r2, r7, #10
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 f8fb 	bl	80020c4 <receive_astronode_answer>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d10f      	bne.n	8001ef4 <astronode_transport_send_receive+0xbc>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8001ed4:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001ed8:	f2a3 331e 	subw	r3, r3, #798	; 0x31e
 8001edc:	8819      	ldrh	r1, [r3, #0]
 8001ede:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001ee2:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001ee6:	f107 000c 	add.w	r0, r7, #12
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	f7ff fe62 	bl	8001bb4 <astronode_decode_answer_transport>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	e000      	b.n	8001ef6 <astronode_transport_send_receive+0xbe>
    }
    else
    {
        return RS_FAILURE;
 8001ef4:	2300      	movs	r3, #0
    }
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f507 774a 	add.w	r7, r7, #808	; 0x328
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	803b      	strh	r3, [r7, #0]
    uint16_t crc = init_value;
 8001f10:	883b      	ldrh	r3, [r7, #0]
 8001f12:	81fb      	strh	r3, [r7, #14]

    while (data_len--)
 8001f14:	e021      	b.n	8001f5a <calculate_crc+0x5a>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8001f16:	89fb      	ldrh	r3, [r7, #14]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	1c59      	adds	r1, r3, #1
 8001f20:	6079      	str	r1, [r7, #4]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4053      	eors	r3, r2
 8001f28:	81bb      	strh	r3, [r7, #12]
        x ^= x >> 4;
 8001f2a:	89bb      	ldrh	r3, [r7, #12]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	89bb      	ldrh	r3, [r7, #12]
 8001f32:	4053      	eors	r3, r2
 8001f34:	81bb      	strh	r3, [r7, #12]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8001f36:	89fb      	ldrh	r3, [r7, #14]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	b21a      	sxth	r2, r3
 8001f3c:	89bb      	ldrh	r3, [r7, #12]
 8001f3e:	031b      	lsls	r3, r3, #12
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	4053      	eors	r3, r2
 8001f44:	b21a      	sxth	r2, r3
 8001f46:	89bb      	ldrh	r3, [r7, #12]
 8001f48:	015b      	lsls	r3, r3, #5
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	4053      	eors	r3, r2
 8001f4e:	b21a      	sxth	r2, r3
 8001f50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f54:	4053      	eors	r3, r2
 8001f56:	b21b      	sxth	r3, r3
 8001f58:	81fb      	strh	r3, [r7, #14]
    while (data_len--)
 8001f5a:	887b      	ldrh	r3, [r7, #2]
 8001f5c:	1e5a      	subs	r2, r3, #1
 8001f5e:	807a      	strh	r2, [r7, #2]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1d8      	bne.n	8001f16 <calculate_crc+0x16>
    }
    return crc;
 8001f64:	89fb      	ldrh	r3, [r7, #14]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	785b      	ldrb	r3, [r3, #1]
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	789b      	ldrb	r3, [r3, #2]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	81fb      	strh	r3, [r7, #14]

    switch (error_code)
 8001f90:	89fb      	ldrh	r3, [r7, #14]
 8001f92:	f244 6201 	movw	r2, #17921	; 0x4601
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d06f      	beq.n	800207a <check_for_error+0x106>
 8001f9a:	f244 6201 	movw	r2, #17921	; 0x4601
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	dc6f      	bgt.n	8002082 <check_for_error+0x10e>
 8001fa2:	f244 5201 	movw	r2, #17665	; 0x4501
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d063      	beq.n	8002072 <check_for_error+0xfe>
 8001faa:	f244 5201 	movw	r2, #17665	; 0x4501
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	dc67      	bgt.n	8002082 <check_for_error+0x10e>
 8001fb2:	f243 5201 	movw	r2, #13569	; 0x3501
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d057      	beq.n	800206a <check_for_error+0xf6>
 8001fba:	f243 5201 	movw	r2, #13569	; 0x3501
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	dc5f      	bgt.n	8002082 <check_for_error+0x10e>
 8001fc2:	f242 6201 	movw	r2, #9729	; 0x2601
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d04b      	beq.n	8002062 <check_for_error+0xee>
 8001fca:	f242 6201 	movw	r2, #9729	; 0x2601
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	dc57      	bgt.n	8002082 <check_for_error+0x10e>
 8001fd2:	f242 5211 	movw	r2, #9489	; 0x2511
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d03f      	beq.n	800205a <check_for_error+0xe6>
 8001fda:	f242 5211 	movw	r2, #9489	; 0x2511
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	dc4f      	bgt.n	8002082 <check_for_error+0x10e>
 8001fe2:	f242 5201 	movw	r2, #9473	; 0x2501
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d033      	beq.n	8002052 <check_for_error+0xde>
 8001fea:	f242 5201 	movw	r2, #9473	; 0x2501
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	dc47      	bgt.n	8002082 <check_for_error+0x10e>
 8001ff2:	f240 6211 	movw	r2, #1553	; 0x611
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d027      	beq.n	800204a <check_for_error+0xd6>
 8001ffa:	f240 6211 	movw	r2, #1553	; 0x611
 8001ffe:	4293      	cmp	r3, r2
 8002000:	dc3f      	bgt.n	8002082 <check_for_error+0x10e>
 8002002:	f240 6201 	movw	r2, #1537	; 0x601
 8002006:	4293      	cmp	r3, r2
 8002008:	d01b      	beq.n	8002042 <check_for_error+0xce>
 800200a:	f240 6201 	movw	r2, #1537	; 0x601
 800200e:	4293      	cmp	r3, r2
 8002010:	dc37      	bgt.n	8002082 <check_for_error+0x10e>
 8002012:	f240 1221 	movw	r2, #289	; 0x121
 8002016:	4293      	cmp	r3, r2
 8002018:	d00f      	beq.n	800203a <check_for_error+0xc6>
 800201a:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 800201e:	da30      	bge.n	8002082 <check_for_error+0x10e>
 8002020:	2b01      	cmp	r3, #1
 8002022:	d002      	beq.n	800202a <check_for_error+0xb6>
 8002024:	2b11      	cmp	r3, #17
 8002026:	d004      	beq.n	8002032 <check_for_error+0xbe>
 8002028:	e02b      	b.n	8002082 <check_for_error+0x10e>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 800202a:	481a      	ldr	r0, [pc, #104]	; (8002094 <check_for_error+0x120>)
 800202c:	f7fe fcd4 	bl	80009d8 <send_debug_logs>
            break;
 8002030:	e02b      	b.n	800208a <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8002032:	4819      	ldr	r0, [pc, #100]	; (8002098 <check_for_error+0x124>)
 8002034:	f7fe fcd0 	bl	80009d8 <send_debug_logs>
            break;
 8002038:	e027      	b.n	800208a <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 800203a:	4818      	ldr	r0, [pc, #96]	; (800209c <check_for_error+0x128>)
 800203c:	f7fe fccc 	bl	80009d8 <send_debug_logs>
            break;
 8002040:	e023      	b.n	800208a <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8002042:	4817      	ldr	r0, [pc, #92]	; (80020a0 <check_for_error+0x12c>)
 8002044:	f7fe fcc8 	bl	80009d8 <send_debug_logs>
            break;
 8002048:	e01f      	b.n	800208a <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 800204a:	4816      	ldr	r0, [pc, #88]	; (80020a4 <check_for_error+0x130>)
 800204c:	f7fe fcc4 	bl	80009d8 <send_debug_logs>
            break;
 8002050:	e01b      	b.n	800208a <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8002052:	4815      	ldr	r0, [pc, #84]	; (80020a8 <check_for_error+0x134>)
 8002054:	f7fe fcc0 	bl	80009d8 <send_debug_logs>
            break;
 8002058:	e017      	b.n	800208a <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 800205a:	4814      	ldr	r0, [pc, #80]	; (80020ac <check_for_error+0x138>)
 800205c:	f7fe fcbc 	bl	80009d8 <send_debug_logs>
            break;
 8002060:	e013      	b.n	800208a <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8002062:	4813      	ldr	r0, [pc, #76]	; (80020b0 <check_for_error+0x13c>)
 8002064:	f7fe fcb8 	bl	80009d8 <send_debug_logs>
            break;
 8002068:	e00f      	b.n	800208a <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 800206a:	4812      	ldr	r0, [pc, #72]	; (80020b4 <check_for_error+0x140>)
 800206c:	f7fe fcb4 	bl	80009d8 <send_debug_logs>
            break;
 8002070:	e00b      	b.n	800208a <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 8002072:	4811      	ldr	r0, [pc, #68]	; (80020b8 <check_for_error+0x144>)
 8002074:	f7fe fcb0 	bl	80009d8 <send_debug_logs>
            break;
 8002078:	e007      	b.n	800208a <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 800207a:	4810      	ldr	r0, [pc, #64]	; (80020bc <check_for_error+0x148>)
 800207c:	f7fe fcac 	bl	80009d8 <send_debug_logs>
            break;
 8002080:	e003      	b.n	800208a <check_for_error+0x116>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8002082:	480f      	ldr	r0, [pc, #60]	; (80020c0 <check_for_error+0x14c>)
 8002084:	f7fe fca8 	bl	80009d8 <send_debug_logs>
            break;
 8002088:	bf00      	nop
    }
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	08006198 	.word	0x08006198
 8002098:	080061e4 	.word	0x080061e4
 800209c:	08006248 	.word	0x08006248
 80020a0:	08006280 	.word	0x08006280
 80020a4:	08006324 	.word	0x08006324
 80020a8:	0800638c 	.word	0x0800638c
 80020ac:	080063ec 	.word	0x080063ec
 80020b0:	08006478 	.word	0x08006478
 80020b4:	080064d8 	.word	0x080064d8
 80020b8:	08006584 	.word	0x08006584
 80020bc:	080065d0 	.word	0x080065d0
 80020c0:	08006618 	.word	0x08006618

080020c4 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]
    uint16_t length = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	82fb      	strh	r3, [r7, #22]
    uint32_t timeout_answer_received = get_systick();
 80020d6:	f7fe fce1 	bl	8000a9c <get_systick>
 80020da:	4603      	mov	r3, r0
 80020dc:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 80020de:	2300      	movs	r3, #0
 80020e0:	757b      	strb	r3, [r7, #21]

    while (is_answer_received == false)
 80020e2:	e036      	b.n	8002152 <receive_astronode_answer+0x8e>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 80020e4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80020e8:	6938      	ldr	r0, [r7, #16]
 80020ea:	f7fe fcde 	bl	8000aaa <is_systick_timeout_over>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <receive_astronode_answer+0x3a>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 80020f4:	481f      	ldr	r0, [pc, #124]	; (8002174 <receive_astronode_answer+0xb0>)
 80020f6:	f7fe fc6f 	bl	80009d8 <send_debug_logs>
            return RS_FAILURE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e036      	b.n	800216c <receive_astronode_answer+0xa8>
        }
        if (is_astronode_character_received(&rx_char))
 80020fe:	f107 030f 	add.w	r3, r7, #15
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fce6 	bl	8000ad4 <is_astronode_character_received>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d021      	beq.n	8002152 <receive_astronode_answer+0x8e>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d103      	bne.n	800211c <receive_astronode_answer+0x58>
            {
                is_answer_received = false;
 8002114:	2300      	movs	r3, #0
 8002116:	757b      	strb	r3, [r7, #21]
                length = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	82fb      	strh	r3, [r7, #22]
            }

            p_rx_buffer[length] = rx_char;
 800211c:	8afb      	ldrh	r3, [r7, #22]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	701a      	strb	r2, [r3, #0]
            length++;
 8002126:	8afb      	ldrh	r3, [r7, #22]
 8002128:	3301      	adds	r3, #1
 800212a:	82fb      	strh	r3, [r7, #22]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 800212c:	8afb      	ldrh	r3, [r7, #22]
 800212e:	2bb2      	cmp	r3, #178	; 0xb2
 8002130:	d904      	bls.n	800213c <receive_astronode_answer+0x78>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8002132:	4811      	ldr	r0, [pc, #68]	; (8002178 <receive_astronode_answer+0xb4>)
 8002134:	f7fe fc50 	bl	80009d8 <send_debug_logs>
                return RS_FAILURE;
 8002138:	2300      	movs	r3, #0
 800213a:	e017      	b.n	800216c <receive_astronode_answer+0xa8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d107      	bne.n	8002152 <receive_astronode_answer+0x8e>
            {
                if (length > 1)
 8002142:	8afb      	ldrh	r3, [r7, #22]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d904      	bls.n	8002152 <receive_astronode_answer+0x8e>
                {
                    *p_buffer_length = length;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	8afa      	ldrh	r2, [r7, #22]
 800214c:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800214e:	2301      	movs	r3, #1
 8002150:	757b      	strb	r3, [r7, #21]
    while (is_answer_received == false)
 8002152:	7d7b      	ldrb	r3, [r7, #21]
 8002154:	f083 0301 	eor.w	r3, r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1c2      	bne.n	80020e4 <receive_astronode_answer+0x20>
                }
            }
        }
    }

    send_debug_logs("Message received from the Astronode <-- ");
 800215e:	4807      	ldr	r0, [pc, #28]	; (800217c <receive_astronode_answer+0xb8>)
 8002160:	f7fe fc3a 	bl	80009d8 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7fe fc37 	bl	80009d8 <send_debug_logs>

    return RS_SUCCESS;
 800216a:	2301      	movs	r3, #1
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	0800663c 	.word	0x0800663c
 8002178:	08006660 	.word	0x08006660
 800217c:	080066ac 	.word	0x080066ac

08002180 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	71fb      	strb	r3, [r7, #7]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <uint8_to_ascii_buffer+0x38>)
 8002196:	5c9a      	ldrb	r2, [r3, r2]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	f003 020f 	and.w	r2, r3, #15
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	3301      	adds	r3, #1
 80021a6:	4904      	ldr	r1, [pc, #16]	; (80021b8 <uint8_to_ascii_buffer+0x38>)
 80021a8:	5c8a      	ldrb	r2, [r1, r2]
 80021aa:	701a      	strb	r2, [r3, #0]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	080066f0 	.word	0x080066f0

080021bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c6:	2003      	movs	r0, #3
 80021c8:	f000 f93c 	bl	8002444 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021cc:	2000      	movs	r0, #0
 80021ce:	f000 f80d 	bl	80021ec <HAL_InitTick>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	71fb      	strb	r3, [r7, #7]
 80021dc:	e001      	b.n	80021e2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021de:	f7fe fcbb 	bl	8000b58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021e2:	79fb      	ldrb	r3, [r7, #7]

}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021f8:	4b16      	ldr	r3, [pc, #88]	; (8002254 <HAL_InitTick+0x68>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d022      	beq.n	8002246 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002200:	4b15      	ldr	r3, [pc, #84]	; (8002258 <HAL_InitTick+0x6c>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_InitTick+0x68>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800220c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f93a 	bl	800248e <HAL_SYSTICK_Config>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10f      	bne.n	8002240 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b0f      	cmp	r3, #15
 8002224:	d809      	bhi.n	800223a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002226:	2200      	movs	r2, #0
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	f04f 30ff 	mov.w	r0, #4294967295
 800222e:	f000 f914 	bl	800245a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_InitTick+0x70>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	e007      	b.n	800224a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
 800223e:	e004      	b.n	800224a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
 8002244:	e001      	b.n	800224a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000008 	.word	0x20000008
 8002258:	20000000 	.word	0x20000000
 800225c:	20000004 	.word	0x20000004

08002260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_IncTick+0x1c>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_IncTick+0x20>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4413      	add	r3, r2
 800226e:	4a03      	ldr	r2, [pc, #12]	; (800227c <HAL_IncTick+0x1c>)
 8002270:	6013      	str	r3, [r2, #0]
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	200001a8 	.word	0x200001a8
 8002280:	20000008 	.word	0x20000008

08002284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return uwTick;
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_GetTick+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	200001a8 	.word	0x200001a8

0800229c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff ffee 	bl	8002284 <HAL_GetTick>
 80022a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d004      	beq.n	80022c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_Delay+0x40>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4413      	add	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022c0:	bf00      	nop
 80022c2:	f7ff ffdf 	bl	8002284 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d8f7      	bhi.n	80022c2 <HAL_Delay+0x26>
  {
  }
}
 80022d2:	bf00      	nop
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000008 	.word	0x20000008

080022e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022fc:	4013      	ands	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800230c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002312:	4a04      	ldr	r2, [pc, #16]	; (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	60d3      	str	r3, [r2, #12]
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <__NVIC_GetPriorityGrouping+0x18>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	f003 0307 	and.w	r3, r3, #7
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	2b00      	cmp	r3, #0
 8002356:	db0a      	blt.n	800236e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	490c      	ldr	r1, [pc, #48]	; (8002390 <__NVIC_SetPriority+0x4c>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	440b      	add	r3, r1
 8002368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800236c:	e00a      	b.n	8002384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4908      	ldr	r1, [pc, #32]	; (8002394 <__NVIC_SetPriority+0x50>)
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3b04      	subs	r3, #4
 800237c:	0112      	lsls	r2, r2, #4
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	440b      	add	r3, r1
 8002382:	761a      	strb	r2, [r3, #24]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000e100 	.word	0xe000e100
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f1c3 0307 	rsb	r3, r3, #7
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	bf28      	it	cs
 80023b6:	2304      	movcs	r3, #4
 80023b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3304      	adds	r3, #4
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d902      	bls.n	80023c8 <NVIC_EncodePriority+0x30>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3b03      	subs	r3, #3
 80023c6:	e000      	b.n	80023ca <NVIC_EncodePriority+0x32>
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	401a      	ands	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e0:	f04f 31ff 	mov.w	r1, #4294967295
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43d9      	mvns	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	4313      	orrs	r3, r2
         );
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3724      	adds	r7, #36	; 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002410:	d301      	bcc.n	8002416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002412:	2301      	movs	r3, #1
 8002414:	e00f      	b.n	8002436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <SysTick_Config+0x40>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3b01      	subs	r3, #1
 800241c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241e:	210f      	movs	r1, #15
 8002420:	f04f 30ff 	mov.w	r0, #4294967295
 8002424:	f7ff ff8e 	bl	8002344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <SysTick_Config+0x40>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242e:	4b04      	ldr	r3, [pc, #16]	; (8002440 <SysTick_Config+0x40>)
 8002430:	2207      	movs	r2, #7
 8002432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	e000e010 	.word	0xe000e010

08002444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ff47 	bl	80022e0 <__NVIC_SetPriorityGrouping>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002468:	f7ff ff5e 	bl	8002328 <__NVIC_GetPriorityGrouping>
 800246c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	6978      	ldr	r0, [r7, #20]
 8002474:	f7ff ff90 	bl	8002398 <NVIC_EncodePriority>
 8002478:	4602      	mov	r2, r0
 800247a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff5f 	bl	8002344 <__NVIC_SetPriority>
}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffb2 	bl	8002400 <SysTick_Config>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024b6:	e15a      	b.n	800276e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2101      	movs	r1, #1
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	4013      	ands	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 814c 	beq.w	8002768 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d005      	beq.n	80024e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d130      	bne.n	800254a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800251e:	2201      	movs	r2, #1
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	f003 0201 	and.w	r2, r3, #1
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b03      	cmp	r3, #3
 8002554:	d017      	beq.n	8002586 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	2203      	movs	r2, #3
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d123      	bne.n	80025da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	08da      	lsrs	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3208      	adds	r2, #8
 800259a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	220f      	movs	r2, #15
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4013      	ands	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	08da      	lsrs	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3208      	adds	r2, #8
 80025d4:	6939      	ldr	r1, [r7, #16]
 80025d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	2203      	movs	r2, #3
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0203 	and.w	r2, r3, #3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 80a6 	beq.w	8002768 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261c:	4b5b      	ldr	r3, [pc, #364]	; (800278c <HAL_GPIO_Init+0x2e4>)
 800261e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002620:	4a5a      	ldr	r2, [pc, #360]	; (800278c <HAL_GPIO_Init+0x2e4>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6613      	str	r3, [r2, #96]	; 0x60
 8002628:	4b58      	ldr	r3, [pc, #352]	; (800278c <HAL_GPIO_Init+0x2e4>)
 800262a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002634:	4a56      	ldr	r2, [pc, #344]	; (8002790 <HAL_GPIO_Init+0x2e8>)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	3302      	adds	r3, #2
 800263c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	220f      	movs	r2, #15
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800265e:	d01f      	beq.n	80026a0 <HAL_GPIO_Init+0x1f8>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a4c      	ldr	r2, [pc, #304]	; (8002794 <HAL_GPIO_Init+0x2ec>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d019      	beq.n	800269c <HAL_GPIO_Init+0x1f4>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a4b      	ldr	r2, [pc, #300]	; (8002798 <HAL_GPIO_Init+0x2f0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <HAL_GPIO_Init+0x1f0>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a4a      	ldr	r2, [pc, #296]	; (800279c <HAL_GPIO_Init+0x2f4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00d      	beq.n	8002694 <HAL_GPIO_Init+0x1ec>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a49      	ldr	r2, [pc, #292]	; (80027a0 <HAL_GPIO_Init+0x2f8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d007      	beq.n	8002690 <HAL_GPIO_Init+0x1e8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a48      	ldr	r2, [pc, #288]	; (80027a4 <HAL_GPIO_Init+0x2fc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d101      	bne.n	800268c <HAL_GPIO_Init+0x1e4>
 8002688:	2305      	movs	r3, #5
 800268a:	e00a      	b.n	80026a2 <HAL_GPIO_Init+0x1fa>
 800268c:	2306      	movs	r3, #6
 800268e:	e008      	b.n	80026a2 <HAL_GPIO_Init+0x1fa>
 8002690:	2304      	movs	r3, #4
 8002692:	e006      	b.n	80026a2 <HAL_GPIO_Init+0x1fa>
 8002694:	2303      	movs	r3, #3
 8002696:	e004      	b.n	80026a2 <HAL_GPIO_Init+0x1fa>
 8002698:	2302      	movs	r3, #2
 800269a:	e002      	b.n	80026a2 <HAL_GPIO_Init+0x1fa>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_GPIO_Init+0x1fa>
 80026a0:	2300      	movs	r3, #0
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	f002 0203 	and.w	r2, r2, #3
 80026a8:	0092      	lsls	r2, r2, #2
 80026aa:	4093      	lsls	r3, r2
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b2:	4937      	ldr	r1, [pc, #220]	; (8002790 <HAL_GPIO_Init+0x2e8>)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3302      	adds	r3, #2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026c0:	4b39      	ldr	r3, [pc, #228]	; (80027a8 <HAL_GPIO_Init+0x300>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4013      	ands	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026e4:	4a30      	ldr	r2, [pc, #192]	; (80027a8 <HAL_GPIO_Init+0x300>)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026ea:	4b2f      	ldr	r3, [pc, #188]	; (80027a8 <HAL_GPIO_Init+0x300>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800270e:	4a26      	ldr	r2, [pc, #152]	; (80027a8 <HAL_GPIO_Init+0x300>)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002714:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_GPIO_Init+0x300>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	43db      	mvns	r3, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002738:	4a1b      	ldr	r2, [pc, #108]	; (80027a8 <HAL_GPIO_Init+0x300>)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800273e:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <HAL_GPIO_Init+0x300>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	43db      	mvns	r3, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002762:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <HAL_GPIO_Init+0x300>)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3301      	adds	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	f47f ae9d 	bne.w	80024b8 <HAL_GPIO_Init+0x10>
  }
}
 800277e:	bf00      	nop
 8002780:	bf00      	nop
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40021000 	.word	0x40021000
 8002790:	40010000 	.word	0x40010000
 8002794:	48000400 	.word	0x48000400
 8002798:	48000800 	.word	0x48000800
 800279c:	48000c00 	.word	0x48000c00
 80027a0:	48001000 	.word	0x48001000
 80027a4:	48001400 	.word	0x48001400
 80027a8:	40010400 	.word	0x40010400

080027ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	e001      	b.n	80027ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
 80027e8:	4613      	mov	r3, r2
 80027ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027ec:	787b      	ldrb	r3, [r7, #1]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027f8:	e002      	b.n	8002800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d141      	bne.n	800289e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800281a:	4b4b      	ldr	r3, [pc, #300]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002826:	d131      	bne.n	800288c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002828:	4b47      	ldr	r3, [pc, #284]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800282a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800282e:	4a46      	ldr	r2, [pc, #280]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002834:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002838:	4b43      	ldr	r3, [pc, #268]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002840:	4a41      	ldr	r2, [pc, #260]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002846:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002848:	4b40      	ldr	r3, [pc, #256]	; (800294c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2232      	movs	r2, #50	; 0x32
 800284e:	fb02 f303 	mul.w	r3, r2, r3
 8002852:	4a3f      	ldr	r2, [pc, #252]	; (8002950 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	0c9b      	lsrs	r3, r3, #18
 800285a:	3301      	adds	r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800285e:	e002      	b.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3b01      	subs	r3, #1
 8002864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002866:	4b38      	ldr	r3, [pc, #224]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002872:	d102      	bne.n	800287a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f2      	bne.n	8002860 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800287a:	4b33      	ldr	r3, [pc, #204]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002886:	d158      	bne.n	800293a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e057      	b.n	800293c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800288c:	4b2e      	ldr	r3, [pc, #184]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800288e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002892:	4a2d      	ldr	r2, [pc, #180]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800289c:	e04d      	b.n	800293a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a4:	d141      	bne.n	800292a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028a6:	4b28      	ldr	r3, [pc, #160]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b2:	d131      	bne.n	8002918 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ba:	4a23      	ldr	r2, [pc, #140]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028c4:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028cc:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028d4:	4b1d      	ldr	r3, [pc, #116]	; (800294c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2232      	movs	r2, #50	; 0x32
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	0c9b      	lsrs	r3, r3, #18
 80028e6:	3301      	adds	r3, #1
 80028e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028ea:	e002      	b.n	80028f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fe:	d102      	bne.n	8002906 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f2      	bne.n	80028ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002912:	d112      	bne.n	800293a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e011      	b.n	800293c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800291a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002924:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002928:	e007      	b.n	800293a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800292a:	4b07      	ldr	r3, [pc, #28]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002932:	4a05      	ldr	r2, [pc, #20]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002934:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002938:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	40007000 	.word	0x40007000
 800294c:	20000000 	.word	0x20000000
 8002950:	431bde83 	.word	0x431bde83

08002954 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e306      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d075      	beq.n	8002a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002972:	4b97      	ldr	r3, [pc, #604]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800297c:	4b94      	ldr	r3, [pc, #592]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b0c      	cmp	r3, #12
 800298a:	d102      	bne.n	8002992 <HAL_RCC_OscConfig+0x3e>
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d002      	beq.n	8002998 <HAL_RCC_OscConfig+0x44>
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d10b      	bne.n	80029b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002998:	4b8d      	ldr	r3, [pc, #564]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d05b      	beq.n	8002a5c <HAL_RCC_OscConfig+0x108>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d157      	bne.n	8002a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e2e1      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b8:	d106      	bne.n	80029c8 <HAL_RCC_OscConfig+0x74>
 80029ba:	4b85      	ldr	r3, [pc, #532]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a84      	ldr	r2, [pc, #528]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e01d      	b.n	8002a04 <HAL_RCC_OscConfig+0xb0>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0x98>
 80029d2:	4b7f      	ldr	r3, [pc, #508]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a7e      	ldr	r2, [pc, #504]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b7c      	ldr	r3, [pc, #496]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a7b      	ldr	r2, [pc, #492]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e00b      	b.n	8002a04 <HAL_RCC_OscConfig+0xb0>
 80029ec:	4b78      	ldr	r3, [pc, #480]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a77      	ldr	r2, [pc, #476]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b75      	ldr	r3, [pc, #468]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a74      	ldr	r2, [pc, #464]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 80029fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d013      	beq.n	8002a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7ff fc3a 	bl	8002284 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7ff fc36 	bl	8002284 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e2a6      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a26:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0xc0>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7ff fc26 	bl	8002284 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7ff fc22 	bl	8002284 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e292      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a4e:	4b60      	ldr	r3, [pc, #384]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0xe8>
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d075      	beq.n	8002b56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6a:	4b59      	ldr	r3, [pc, #356]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a74:	4b56      	ldr	r3, [pc, #344]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b0c      	cmp	r3, #12
 8002a82:	d102      	bne.n	8002a8a <HAL_RCC_OscConfig+0x136>
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d002      	beq.n	8002a90 <HAL_RCC_OscConfig+0x13c>
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d11f      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a90:	4b4f      	ldr	r3, [pc, #316]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x154>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e265      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa8:	4b49      	ldr	r3, [pc, #292]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	061b      	lsls	r3, r3, #24
 8002ab6:	4946      	ldr	r1, [pc, #280]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002abc:	4b45      	ldr	r3, [pc, #276]	; (8002bd4 <HAL_RCC_OscConfig+0x280>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fb93 	bl	80021ec <HAL_InitTick>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d043      	beq.n	8002b54 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e251      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d023      	beq.n	8002b20 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad8:	4b3d      	ldr	r3, [pc, #244]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a3c      	ldr	r2, [pc, #240]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7ff fbce 	bl	8002284 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aec:	f7ff fbca 	bl	8002284 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e23a      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002afe:	4b34      	ldr	r3, [pc, #208]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	061b      	lsls	r3, r3, #24
 8002b18:	492d      	ldr	r1, [pc, #180]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	604b      	str	r3, [r1, #4]
 8002b1e:	e01a      	b.n	8002b56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2a      	ldr	r2, [pc, #168]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7ff fbaa 	bl	8002284 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b34:	f7ff fba6 	bl	8002284 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e216      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b46:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x1e0>
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d041      	beq.n	8002be6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01c      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6a:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b70:	4a17      	ldr	r2, [pc, #92]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7a:	f7ff fb83 	bl	8002284 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b82:	f7ff fb7f 	bl	8002284 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e1ef      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b94:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0ef      	beq.n	8002b82 <HAL_RCC_OscConfig+0x22e>
 8002ba2:	e020      	b.n	8002be6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba4:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002baa:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7ff fb66 	bl	8002284 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bba:	e00d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bbc:	f7ff fb62 	bl	8002284 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d906      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e1d2      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bd8:	4b8c      	ldr	r3, [pc, #560]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1ea      	bne.n	8002bbc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 80a6 	beq.w	8002d40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bf8:	4b84      	ldr	r3, [pc, #528]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_OscConfig+0x2b4>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x2b6>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00d      	beq.n	8002c2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	4b7f      	ldr	r3, [pc, #508]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c12:	4a7e      	ldr	r2, [pc, #504]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6593      	str	r3, [r2, #88]	; 0x58
 8002c1a:	4b7c      	ldr	r3, [pc, #496]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c26:	2301      	movs	r3, #1
 8002c28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2a:	4b79      	ldr	r3, [pc, #484]	; (8002e10 <HAL_RCC_OscConfig+0x4bc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d118      	bne.n	8002c68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c36:	4b76      	ldr	r3, [pc, #472]	; (8002e10 <HAL_RCC_OscConfig+0x4bc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a75      	ldr	r2, [pc, #468]	; (8002e10 <HAL_RCC_OscConfig+0x4bc>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c42:	f7ff fb1f 	bl	8002284 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4a:	f7ff fb1b 	bl	8002284 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e18b      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c5c:	4b6c      	ldr	r3, [pc, #432]	; (8002e10 <HAL_RCC_OscConfig+0x4bc>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d108      	bne.n	8002c82 <HAL_RCC_OscConfig+0x32e>
 8002c70:	4b66      	ldr	r3, [pc, #408]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	4a65      	ldr	r2, [pc, #404]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c80:	e024      	b.n	8002ccc <HAL_RCC_OscConfig+0x378>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b05      	cmp	r3, #5
 8002c88:	d110      	bne.n	8002cac <HAL_RCC_OscConfig+0x358>
 8002c8a:	4b60      	ldr	r3, [pc, #384]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c90:	4a5e      	ldr	r2, [pc, #376]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002c92:	f043 0304 	orr.w	r3, r3, #4
 8002c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c9a:	4b5c      	ldr	r3, [pc, #368]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca0:	4a5a      	ldr	r2, [pc, #360]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002caa:	e00f      	b.n	8002ccc <HAL_RCC_OscConfig+0x378>
 8002cac:	4b57      	ldr	r3, [pc, #348]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb2:	4a56      	ldr	r2, [pc, #344]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cbc:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	4a52      	ldr	r2, [pc, #328]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d016      	beq.n	8002d02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7ff fad6 	bl	8002284 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7ff fad2 	bl	8002284 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e140      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf2:	4b46      	ldr	r3, [pc, #280]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ed      	beq.n	8002cdc <HAL_RCC_OscConfig+0x388>
 8002d00:	e015      	b.n	8002d2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d02:	f7ff fabf 	bl	8002284 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7ff fabb 	bl	8002284 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e129      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d20:	4b3a      	ldr	r3, [pc, #232]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1ed      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d2e:	7ffb      	ldrb	r3, [r7, #31]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d105      	bne.n	8002d40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d34:	4b35      	ldr	r3, [pc, #212]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	4a34      	ldr	r2, [pc, #208]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d03c      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01c      	beq.n	8002d8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d54:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d5a:	4a2c      	ldr	r2, [pc, #176]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7ff fa8e 	bl	8002284 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d6c:	f7ff fa8a 	bl	8002284 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e0fa      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d7e:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ef      	beq.n	8002d6c <HAL_RCC_OscConfig+0x418>
 8002d8c:	e01b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d8e:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d94:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7ff fa71 	bl	8002284 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da6:	f7ff fa6d 	bl	8002284 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0dd      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002db8:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1ef      	bne.n	8002da6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80d1 	beq.w	8002f72 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	f000 808b 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d15e      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a08      	ldr	r2, [pc, #32]	; (8002e0c <HAL_RCC_OscConfig+0x4b8>)
 8002dec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df2:	f7ff fa47 	bl	8002284 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df8:	e00c      	b.n	8002e14 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfa:	f7ff fa43 	bl	8002284 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d905      	bls.n	8002e14 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e0b3      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e14:	4b59      	ldr	r3, [pc, #356]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ec      	bne.n	8002dfa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e20:	4b56      	ldr	r3, [pc, #344]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	4b56      	ldr	r3, [pc, #344]	; (8002f80 <HAL_RCC_OscConfig+0x62c>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6a11      	ldr	r1, [r2, #32]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e30:	3a01      	subs	r2, #1
 8002e32:	0112      	lsls	r2, r2, #4
 8002e34:	4311      	orrs	r1, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e3a:	0212      	lsls	r2, r2, #8
 8002e3c:	4311      	orrs	r1, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e42:	0852      	lsrs	r2, r2, #1
 8002e44:	3a01      	subs	r2, #1
 8002e46:	0552      	lsls	r2, r2, #21
 8002e48:	4311      	orrs	r1, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e4e:	0852      	lsrs	r2, r2, #1
 8002e50:	3a01      	subs	r2, #1
 8002e52:	0652      	lsls	r2, r2, #25
 8002e54:	4311      	orrs	r1, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e5a:	06d2      	lsls	r2, r2, #27
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	4947      	ldr	r1, [pc, #284]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e64:	4b45      	ldr	r3, [pc, #276]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a44      	ldr	r2, [pc, #272]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e70:	4b42      	ldr	r3, [pc, #264]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4a41      	ldr	r2, [pc, #260]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7ff fa02 	bl	8002284 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7ff f9fe 	bl	8002284 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e06e      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e96:	4b39      	ldr	r3, [pc, #228]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x530>
 8002ea2:	e066      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea4:	4b35      	ldr	r3, [pc, #212]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a34      	ldr	r2, [pc, #208]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eae:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002eb0:	4b32      	ldr	r3, [pc, #200]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4a31      	ldr	r2, [pc, #196]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002eb6:	f023 0303 	bic.w	r3, r3, #3
 8002eba:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ebc:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4a2e      	ldr	r2, [pc, #184]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002ec2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7ff f9da 	bl	8002284 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed4:	f7ff f9d6 	bl	8002284 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e046      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee6:	4b25      	ldr	r3, [pc, #148]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x580>
 8002ef2:	e03e      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e039      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002f00:	4b1e      	ldr	r3, [pc, #120]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f003 0203 	and.w	r2, r3, #3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d12c      	bne.n	8002f6e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d123      	bne.n	8002f6e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d11b      	bne.n	8002f6e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d113      	bne.n	8002f6e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	3b01      	subs	r3, #1
 8002f54:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d109      	bne.n	8002f6e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f64:	085b      	lsrs	r3, r3, #1
 8002f66:	3b01      	subs	r3, #1
 8002f68:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3720      	adds	r7, #32
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	019f800c 	.word	0x019f800c

08002f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e11e      	b.n	80031da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b91      	ldr	r3, [pc, #580]	; (80031e4 <HAL_RCC_ClockConfig+0x260>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d910      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b8e      	ldr	r3, [pc, #568]	; (80031e4 <HAL_RCC_ClockConfig+0x260>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 020f 	bic.w	r2, r3, #15
 8002fb2:	498c      	ldr	r1, [pc, #560]	; (80031e4 <HAL_RCC_ClockConfig+0x260>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b8a      	ldr	r3, [pc, #552]	; (80031e4 <HAL_RCC_ClockConfig+0x260>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e106      	b.n	80031da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d073      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d129      	bne.n	8003034 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe0:	4b81      	ldr	r3, [pc, #516]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0f4      	b.n	80031da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ff0:	f000 f99e 	bl	8003330 <RCC_GetSysClockFreqFromPLLSource>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4a7c      	ldr	r2, [pc, #496]	; (80031ec <HAL_RCC_ClockConfig+0x268>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d93f      	bls.n	800307e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ffe:	4b7a      	ldr	r3, [pc, #488]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003012:	2b00      	cmp	r3, #0
 8003014:	d033      	beq.n	800307e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800301a:	2b00      	cmp	r3, #0
 800301c:	d12f      	bne.n	800307e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800301e:	4b72      	ldr	r3, [pc, #456]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003026:	4a70      	ldr	r2, [pc, #448]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 8003028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800302c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800302e:	2380      	movs	r3, #128	; 0x80
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	e024      	b.n	800307e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d107      	bne.n	800304c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800303c:	4b6a      	ldr	r3, [pc, #424]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d109      	bne.n	800305c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0c6      	b.n	80031da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800304c:	4b66      	ldr	r3, [pc, #408]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0be      	b.n	80031da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800305c:	f000 f8ce 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 8003060:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4a61      	ldr	r2, [pc, #388]	; (80031ec <HAL_RCC_ClockConfig+0x268>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d909      	bls.n	800307e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800306a:	4b5f      	ldr	r3, [pc, #380]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003072:	4a5d      	ldr	r2, [pc, #372]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 8003074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003078:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800307e:	4b5a      	ldr	r3, [pc, #360]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f023 0203 	bic.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4957      	ldr	r1, [pc, #348]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800308c:	4313      	orrs	r3, r2
 800308e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003090:	f7ff f8f8 	bl	8002284 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	e00a      	b.n	80030ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003098:	f7ff f8f4 	bl	8002284 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e095      	b.n	80031da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ae:	4b4e      	ldr	r3, [pc, #312]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 020c 	and.w	r2, r3, #12
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	429a      	cmp	r2, r3
 80030be:	d1eb      	bne.n	8003098 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d023      	beq.n	8003114 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d8:	4b43      	ldr	r3, [pc, #268]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a42      	ldr	r2, [pc, #264]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 80030de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80030f0:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030f8:	4a3b      	ldr	r2, [pc, #236]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 80030fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003100:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4936      	ldr	r1, [pc, #216]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
 8003112:	e008      	b.n	8003126 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2b80      	cmp	r3, #128	; 0x80
 8003118:	d105      	bne.n	8003126 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800311a:	4b33      	ldr	r3, [pc, #204]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	4a32      	ldr	r2, [pc, #200]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 8003120:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003124:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003126:	4b2f      	ldr	r3, [pc, #188]	; (80031e4 <HAL_RCC_ClockConfig+0x260>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d21d      	bcs.n	8003170 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003134:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <HAL_RCC_ClockConfig+0x260>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f023 020f 	bic.w	r2, r3, #15
 800313c:	4929      	ldr	r1, [pc, #164]	; (80031e4 <HAL_RCC_ClockConfig+0x260>)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	4313      	orrs	r3, r2
 8003142:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003144:	f7ff f89e 	bl	8002284 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7ff f89a 	bl	8002284 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e03b      	b.n	80031da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCC_ClockConfig+0x260>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d1ed      	bne.n	800314c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800317c:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4917      	ldr	r1, [pc, #92]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	490f      	ldr	r1, [pc, #60]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ae:	f000 f825 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 80031b2:	4602      	mov	r2, r0
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <HAL_RCC_ClockConfig+0x264>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	490c      	ldr	r1, [pc, #48]	; (80031f0 <HAL_RCC_ClockConfig+0x26c>)
 80031c0:	5ccb      	ldrb	r3, [r1, r3]
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ca:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <HAL_RCC_ClockConfig+0x270>)
 80031cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <HAL_RCC_ClockConfig+0x274>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff f80a 	bl	80021ec <HAL_InitTick>
 80031d8:	4603      	mov	r3, r0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40022000 	.word	0x40022000
 80031e8:	40021000 	.word	0x40021000
 80031ec:	04c4b400 	.word	0x04c4b400
 80031f0:	080066d8 	.word	0x080066d8
 80031f4:	20000000 	.word	0x20000000
 80031f8:	20000004 	.word	0x20000004

080031fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003202:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b04      	cmp	r3, #4
 800320c:	d102      	bne.n	8003214 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800320e:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	e047      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b08      	cmp	r3, #8
 800321e:	d102      	bne.n	8003226 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003220:	4b26      	ldr	r3, [pc, #152]	; (80032bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	e03e      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003226:	4b23      	ldr	r3, [pc, #140]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d136      	bne.n	80032a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003232:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800323c:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	3301      	adds	r3, #1
 8003248:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d10c      	bne.n	800326a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003250:	4a1a      	ldr	r2, [pc, #104]	; (80032bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800325a:	68d2      	ldr	r2, [r2, #12]
 800325c:	0a12      	lsrs	r2, r2, #8
 800325e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	617b      	str	r3, [r7, #20]
      break;
 8003268:	e00c      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800326a:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003272:	4a10      	ldr	r2, [pc, #64]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003274:	68d2      	ldr	r2, [r2, #12]
 8003276:	0a12      	lsrs	r2, r2, #8
 8003278:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800327c:	fb02 f303 	mul.w	r3, r2, r3
 8003280:	617b      	str	r3, [r7, #20]
      break;
 8003282:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	0e5b      	lsrs	r3, r3, #25
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	3301      	adds	r3, #1
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	fbb2 f3f3 	udiv	r3, r2, r3
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	e001      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80032a4:	693b      	ldr	r3, [r7, #16]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000
 80032b8:	00f42400 	.word	0x00f42400
 80032bc:	007a1200 	.word	0x007a1200

080032c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032c6:	681b      	ldr	r3, [r3, #0]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000000 	.word	0x20000000

080032d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032dc:	f7ff fff0 	bl	80032c0 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4904      	ldr	r1, [pc, #16]	; (8003300 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000
 8003300:	080066e8 	.word	0x080066e8

08003304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003308:	f7ff ffda 	bl	80032c0 <HAL_RCC_GetHCLKFreq>
 800330c:	4602      	mov	r2, r0
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	0adb      	lsrs	r3, r3, #11
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	4904      	ldr	r1, [pc, #16]	; (800332c <HAL_RCC_GetPCLK2Freq+0x28>)
 800331a:	5ccb      	ldrb	r3, [r1, r3]
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021000 	.word	0x40021000
 800332c:	080066e8 	.word	0x080066e8

08003330 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003336:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003340:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	3301      	adds	r3, #1
 800334c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b03      	cmp	r3, #3
 8003352:	d10c      	bne.n	800336e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003354:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	fbb2 f3f3 	udiv	r3, r2, r3
 800335c:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800335e:	68d2      	ldr	r2, [r2, #12]
 8003360:	0a12      	lsrs	r2, r2, #8
 8003362:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	617b      	str	r3, [r7, #20]
    break;
 800336c:	e00c      	b.n	8003388 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800336e:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	fbb2 f3f3 	udiv	r3, r2, r3
 8003376:	4a0e      	ldr	r2, [pc, #56]	; (80033b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003378:	68d2      	ldr	r2, [r2, #12]
 800337a:	0a12      	lsrs	r2, r2, #8
 800337c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003380:	fb02 f303 	mul.w	r3, r2, r3
 8003384:	617b      	str	r3, [r7, #20]
    break;
 8003386:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	0e5b      	lsrs	r3, r3, #25
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	3301      	adds	r3, #1
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80033a2:	687b      	ldr	r3, [r7, #4]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	40021000 	.word	0x40021000
 80033b4:	007a1200 	.word	0x007a1200
 80033b8:	00f42400 	.word	0x00f42400

080033bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033c4:	2300      	movs	r3, #0
 80033c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033c8:	2300      	movs	r3, #0
 80033ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8098 	beq.w	800350a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033da:	2300      	movs	r3, #0
 80033dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033de:	4b43      	ldr	r3, [pc, #268]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10d      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	4b40      	ldr	r3, [pc, #256]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ee:	4a3f      	ldr	r2, [pc, #252]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f4:	6593      	str	r3, [r2, #88]	; 0x58
 80033f6:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003402:	2301      	movs	r3, #1
 8003404:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003406:	4b3a      	ldr	r3, [pc, #232]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a39      	ldr	r2, [pc, #228]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800340c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003410:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003412:	f7fe ff37 	bl	8002284 <HAL_GetTick>
 8003416:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003418:	e009      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341a:	f7fe ff33 	bl	8002284 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d902      	bls.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	74fb      	strb	r3, [r7, #19]
        break;
 800342c:	e005      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800342e:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0ef      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d159      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003440:	4b2a      	ldr	r3, [pc, #168]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01e      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	429a      	cmp	r2, r3
 800345a:	d019      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800345c:	4b23      	ldr	r3, [pc, #140]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003466:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003468:	4b20      	ldr	r3, [pc, #128]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346e:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003478:	4b1c      	ldr	r3, [pc, #112]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347e:	4a1b      	ldr	r2, [pc, #108]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003488:	4a18      	ldr	r2, [pc, #96]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d016      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7fe fef3 	bl	8002284 <HAL_GetTick>
 800349e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a0:	e00b      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fe feef 	bl	8002284 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d902      	bls.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	74fb      	strb	r3, [r7, #19]
            break;
 80034b8:	e006      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ba:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ec      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10b      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	4903      	ldr	r1, [pc, #12]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034e4:	e008      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034e6:	7cfb      	ldrb	r3, [r7, #19]
 80034e8:	74bb      	strb	r3, [r7, #18]
 80034ea:	e005      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f4:	7cfb      	ldrb	r3, [r7, #19]
 80034f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f8:	7c7b      	ldrb	r3, [r7, #17]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fe:	4ba6      	ldr	r3, [pc, #664]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003502:	4aa5      	ldr	r2, [pc, #660]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003508:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003516:	4ba0      	ldr	r3, [pc, #640]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f023 0203 	bic.w	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	499c      	ldr	r1, [pc, #624]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003538:	4b97      	ldr	r3, [pc, #604]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	f023 020c 	bic.w	r2, r3, #12
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	4994      	ldr	r1, [pc, #592]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800355a:	4b8f      	ldr	r3, [pc, #572]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	498b      	ldr	r1, [pc, #556]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800357c:	4b86      	ldr	r3, [pc, #536]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	4983      	ldr	r1, [pc, #524]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800359e:	4b7e      	ldr	r3, [pc, #504]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	497a      	ldr	r1, [pc, #488]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035c0:	4b75      	ldr	r3, [pc, #468]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	4972      	ldr	r1, [pc, #456]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035e2:	4b6d      	ldr	r3, [pc, #436]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	4969      	ldr	r1, [pc, #420]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003604:	4b64      	ldr	r3, [pc, #400]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	4961      	ldr	r1, [pc, #388]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003626:	4b5c      	ldr	r3, [pc, #368]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	4958      	ldr	r1, [pc, #352]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003644:	2b00      	cmp	r3, #0
 8003646:	d015      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003648:	4b53      	ldr	r3, [pc, #332]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	4950      	ldr	r1, [pc, #320]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003666:	d105      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003668:	4b4b      	ldr	r3, [pc, #300]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4a4a      	ldr	r2, [pc, #296]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800366e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003672:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800367c:	2b00      	cmp	r3, #0
 800367e:	d015      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003680:	4b45      	ldr	r3, [pc, #276]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003686:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	4942      	ldr	r1, [pc, #264]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800369e:	d105      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a0:	4b3d      	ldr	r3, [pc, #244]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4a3c      	ldr	r2, [pc, #240]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d015      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036b8:	4b37      	ldr	r3, [pc, #220]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	4934      	ldr	r1, [pc, #208]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036d6:	d105      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d8:	4b2f      	ldr	r3, [pc, #188]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a2e      	ldr	r2, [pc, #184]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d015      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036f0:	4b29      	ldr	r3, [pc, #164]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fe:	4926      	ldr	r1, [pc, #152]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800370e:	d105      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003710:	4b21      	ldr	r3, [pc, #132]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4a20      	ldr	r2, [pc, #128]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800371a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d015      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003728:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	4918      	ldr	r1, [pc, #96]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003746:	d105      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003748:	4b13      	ldr	r3, [pc, #76]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4a12      	ldr	r2, [pc, #72]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800374e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003752:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d015      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003760:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	490a      	ldr	r1, [pc, #40]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800377e:	d105      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a04      	ldr	r2, [pc, #16]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800378c:	7cbb      	ldrb	r3, [r7, #18]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000

0800379c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e042      	b.n	8003834 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fd f9ed 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2224      	movs	r2, #36	; 0x24
 80037ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f996 	bl	8003b10 <UART_SetConfig>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e022      	b.n	8003834 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fc56 	bl	80040a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800380a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800381a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fcdd 	bl	80041ec <UART_CheckIdleState>
 8003832:	4603      	mov	r3, r0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08a      	sub	sp, #40	; 0x28
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	4613      	mov	r3, r2
 800384a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003852:	2b20      	cmp	r3, #32
 8003854:	f040 8083 	bne.w	800395e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_UART_Transmit+0x28>
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e07b      	b.n	8003960 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_UART_Transmit+0x3a>
 8003872:	2302      	movs	r3, #2
 8003874:	e074      	b.n	8003960 <HAL_UART_Transmit+0x124>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2221      	movs	r2, #33	; 0x21
 800388a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800388e:	f7fe fcf9 	bl	8002284 <HAL_GetTick>
 8003892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	88fa      	ldrh	r2, [r7, #6]
 8003898:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	88fa      	ldrh	r2, [r7, #6]
 80038a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ac:	d108      	bne.n	80038c0 <HAL_UART_Transmit+0x84>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d104      	bne.n	80038c0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	e003      	b.n	80038c8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80038d0:	e02c      	b.n	800392c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2200      	movs	r2, #0
 80038da:	2180      	movs	r1, #128	; 0x80
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fcd0 	bl	8004282 <UART_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e039      	b.n	8003960 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10b      	bne.n	800390a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003900:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	3302      	adds	r3, #2
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	e007      	b.n	800391a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	781a      	ldrb	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	3301      	adds	r3, #1
 8003918:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1cc      	bne.n	80038d2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2200      	movs	r2, #0
 8003940:	2140      	movs	r1, #64	; 0x40
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fc9d 	bl	8004282 <UART_WaitOnFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e006      	b.n	8003960 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e000      	b.n	8003960 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	3720      	adds	r7, #32
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	; 0x28
 800396c:	af02      	add	r7, sp, #8
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	2b20      	cmp	r3, #32
 8003980:	f040 80c0 	bne.w	8003b04 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_UART_Receive+0x28>
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0b8      	b.n	8003b06 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_UART_Receive+0x3a>
 800399e:	2302      	movs	r3, #2
 80039a0:	e0b1      	b.n	8003b06 <HAL_UART_Receive+0x19e>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2222      	movs	r2, #34	; 0x22
 80039b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039c0:	f7fe fc60 	bl	8002284 <HAL_GetTick>
 80039c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	88fa      	ldrh	r2, [r7, #6]
 80039ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	88fa      	ldrh	r2, [r7, #6]
 80039d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039de:	d10e      	bne.n	80039fe <HAL_UART_Receive+0x96>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d105      	bne.n	80039f4 <HAL_UART_Receive+0x8c>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80039ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039f2:	e02d      	b.n	8003a50 <HAL_UART_Receive+0xe8>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	22ff      	movs	r2, #255	; 0xff
 80039f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039fc:	e028      	b.n	8003a50 <HAL_UART_Receive+0xe8>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10d      	bne.n	8003a22 <HAL_UART_Receive+0xba>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d104      	bne.n	8003a18 <HAL_UART_Receive+0xb0>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	22ff      	movs	r2, #255	; 0xff
 8003a12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a16:	e01b      	b.n	8003a50 <HAL_UART_Receive+0xe8>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	227f      	movs	r2, #127	; 0x7f
 8003a1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a20:	e016      	b.n	8003a50 <HAL_UART_Receive+0xe8>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a2a:	d10d      	bne.n	8003a48 <HAL_UART_Receive+0xe0>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <HAL_UART_Receive+0xd6>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	227f      	movs	r2, #127	; 0x7f
 8003a38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a3c:	e008      	b.n	8003a50 <HAL_UART_Receive+0xe8>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	223f      	movs	r2, #63	; 0x3f
 8003a42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a46:	e003      	b.n	8003a50 <HAL_UART_Receive+0xe8>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003a56:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a60:	d108      	bne.n	8003a74 <HAL_UART_Receive+0x10c>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d104      	bne.n	8003a74 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	e003      	b.n	8003a7c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003a84:	e032      	b.n	8003aec <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2120      	movs	r1, #32
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 fbf6 	bl	8004282 <UART_WaitOnFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e032      	b.n	8003b06 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	8a7b      	ldrh	r3, [r7, #18]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	3302      	adds	r3, #2
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	e00c      	b.n	8003ada <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	8a7b      	ldrh	r3, [r7, #18]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	4013      	ands	r3, r2
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1c6      	bne.n	8003a86 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e000      	b.n	8003b06 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b14:	b08c      	sub	sp, #48	; 0x30
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4bab      	ldr	r3, [pc, #684]	; (8003dec <UART_SetConfig+0x2dc>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4aa0      	ldr	r2, [pc, #640]	; (8003df0 <UART_SetConfig+0x2e0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003b86:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	f023 010f 	bic.w	r1, r3, #15
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a91      	ldr	r2, [pc, #580]	; (8003df4 <UART_SetConfig+0x2e4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d125      	bne.n	8003c00 <UART_SetConfig+0xf0>
 8003bb4:	4b90      	ldr	r3, [pc, #576]	; (8003df8 <UART_SetConfig+0x2e8>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d81a      	bhi.n	8003bf8 <UART_SetConfig+0xe8>
 8003bc2:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <UART_SetConfig+0xb8>)
 8003bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc8:	08003bd9 	.word	0x08003bd9
 8003bcc:	08003be9 	.word	0x08003be9
 8003bd0:	08003be1 	.word	0x08003be1
 8003bd4:	08003bf1 	.word	0x08003bf1
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bde:	e0d6      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003be0:	2302      	movs	r3, #2
 8003be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003be6:	e0d2      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003be8:	2304      	movs	r3, #4
 8003bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bee:	e0ce      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bf6:	e0ca      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bfe:	e0c6      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a7d      	ldr	r2, [pc, #500]	; (8003dfc <UART_SetConfig+0x2ec>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d138      	bne.n	8003c7c <UART_SetConfig+0x16c>
 8003c0a:	4b7b      	ldr	r3, [pc, #492]	; (8003df8 <UART_SetConfig+0x2e8>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	2b0c      	cmp	r3, #12
 8003c16:	d82d      	bhi.n	8003c74 <UART_SetConfig+0x164>
 8003c18:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <UART_SetConfig+0x110>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003c55 	.word	0x08003c55
 8003c24:	08003c75 	.word	0x08003c75
 8003c28:	08003c75 	.word	0x08003c75
 8003c2c:	08003c75 	.word	0x08003c75
 8003c30:	08003c65 	.word	0x08003c65
 8003c34:	08003c75 	.word	0x08003c75
 8003c38:	08003c75 	.word	0x08003c75
 8003c3c:	08003c75 	.word	0x08003c75
 8003c40:	08003c5d 	.word	0x08003c5d
 8003c44:	08003c75 	.word	0x08003c75
 8003c48:	08003c75 	.word	0x08003c75
 8003c4c:	08003c75 	.word	0x08003c75
 8003c50:	08003c6d 	.word	0x08003c6d
 8003c54:	2300      	movs	r3, #0
 8003c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c5a:	e098      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c62:	e094      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003c64:	2304      	movs	r3, #4
 8003c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c6a:	e090      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003c6c:	2308      	movs	r3, #8
 8003c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c72:	e08c      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003c74:	2310      	movs	r3, #16
 8003c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7a:	e088      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a5f      	ldr	r2, [pc, #380]	; (8003e00 <UART_SetConfig+0x2f0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d125      	bne.n	8003cd2 <UART_SetConfig+0x1c2>
 8003c86:	4b5c      	ldr	r3, [pc, #368]	; (8003df8 <UART_SetConfig+0x2e8>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c90:	2b30      	cmp	r3, #48	; 0x30
 8003c92:	d016      	beq.n	8003cc2 <UART_SetConfig+0x1b2>
 8003c94:	2b30      	cmp	r3, #48	; 0x30
 8003c96:	d818      	bhi.n	8003cca <UART_SetConfig+0x1ba>
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d00a      	beq.n	8003cb2 <UART_SetConfig+0x1a2>
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d814      	bhi.n	8003cca <UART_SetConfig+0x1ba>
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <UART_SetConfig+0x19a>
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d008      	beq.n	8003cba <UART_SetConfig+0x1aa>
 8003ca8:	e00f      	b.n	8003cca <UART_SetConfig+0x1ba>
 8003caa:	2300      	movs	r3, #0
 8003cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb0:	e06d      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb8:	e069      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003cba:	2304      	movs	r3, #4
 8003cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc0:	e065      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003cc2:	2308      	movs	r3, #8
 8003cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc8:	e061      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003cca:	2310      	movs	r3, #16
 8003ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd0:	e05d      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a4b      	ldr	r2, [pc, #300]	; (8003e04 <UART_SetConfig+0x2f4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d125      	bne.n	8003d28 <UART_SetConfig+0x218>
 8003cdc:	4b46      	ldr	r3, [pc, #280]	; (8003df8 <UART_SetConfig+0x2e8>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ce6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ce8:	d016      	beq.n	8003d18 <UART_SetConfig+0x208>
 8003cea:	2bc0      	cmp	r3, #192	; 0xc0
 8003cec:	d818      	bhi.n	8003d20 <UART_SetConfig+0x210>
 8003cee:	2b80      	cmp	r3, #128	; 0x80
 8003cf0:	d00a      	beq.n	8003d08 <UART_SetConfig+0x1f8>
 8003cf2:	2b80      	cmp	r3, #128	; 0x80
 8003cf4:	d814      	bhi.n	8003d20 <UART_SetConfig+0x210>
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <UART_SetConfig+0x1f0>
 8003cfa:	2b40      	cmp	r3, #64	; 0x40
 8003cfc:	d008      	beq.n	8003d10 <UART_SetConfig+0x200>
 8003cfe:	e00f      	b.n	8003d20 <UART_SetConfig+0x210>
 8003d00:	2300      	movs	r3, #0
 8003d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d06:	e042      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0e:	e03e      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003d10:	2304      	movs	r3, #4
 8003d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d16:	e03a      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003d18:	2308      	movs	r3, #8
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1e:	e036      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003d20:	2310      	movs	r3, #16
 8003d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d26:	e032      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a30      	ldr	r2, [pc, #192]	; (8003df0 <UART_SetConfig+0x2e0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d12a      	bne.n	8003d88 <UART_SetConfig+0x278>
 8003d32:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <UART_SetConfig+0x2e8>)
 8003d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d40:	d01a      	beq.n	8003d78 <UART_SetConfig+0x268>
 8003d42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d46:	d81b      	bhi.n	8003d80 <UART_SetConfig+0x270>
 8003d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d4c:	d00c      	beq.n	8003d68 <UART_SetConfig+0x258>
 8003d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d52:	d815      	bhi.n	8003d80 <UART_SetConfig+0x270>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <UART_SetConfig+0x250>
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5c:	d008      	beq.n	8003d70 <UART_SetConfig+0x260>
 8003d5e:	e00f      	b.n	8003d80 <UART_SetConfig+0x270>
 8003d60:	2300      	movs	r3, #0
 8003d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d66:	e012      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d6e:	e00e      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003d70:	2304      	movs	r3, #4
 8003d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d76:	e00a      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003d78:	2308      	movs	r3, #8
 8003d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d7e:	e006      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003d80:	2310      	movs	r3, #16
 8003d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d86:	e002      	b.n	8003d8e <UART_SetConfig+0x27e>
 8003d88:	2310      	movs	r3, #16
 8003d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a17      	ldr	r2, [pc, #92]	; (8003df0 <UART_SetConfig+0x2e0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	f040 80a8 	bne.w	8003eea <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d834      	bhi.n	8003e0c <UART_SetConfig+0x2fc>
 8003da2:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <UART_SetConfig+0x298>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003dcd 	.word	0x08003dcd
 8003dac:	08003e0d 	.word	0x08003e0d
 8003db0:	08003dd5 	.word	0x08003dd5
 8003db4:	08003e0d 	.word	0x08003e0d
 8003db8:	08003ddb 	.word	0x08003ddb
 8003dbc:	08003e0d 	.word	0x08003e0d
 8003dc0:	08003e0d 	.word	0x08003e0d
 8003dc4:	08003e0d 	.word	0x08003e0d
 8003dc8:	08003de3 	.word	0x08003de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dcc:	f7ff fa84 	bl	80032d8 <HAL_RCC_GetPCLK1Freq>
 8003dd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dd2:	e021      	b.n	8003e18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <UART_SetConfig+0x2f8>)
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dd8:	e01e      	b.n	8003e18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dda:	f7ff fa0f 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 8003dde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003de0:	e01a      	b.n	8003e18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003de8:	e016      	b.n	8003e18 <UART_SetConfig+0x308>
 8003dea:	bf00      	nop
 8003dec:	cfff69f3 	.word	0xcfff69f3
 8003df0:	40008000 	.word	0x40008000
 8003df4:	40013800 	.word	0x40013800
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40004400 	.word	0x40004400
 8003e00:	40004800 	.word	0x40004800
 8003e04:	40004c00 	.word	0x40004c00
 8003e08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 812a 	beq.w	8004074 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	4a9e      	ldr	r2, [pc, #632]	; (80040a0 <UART_SetConfig+0x590>)
 8003e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	4413      	add	r3, r2
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d305      	bcc.n	8003e50 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d903      	bls.n	8003e58 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e56:	e10d      	b.n	8004074 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	60fa      	str	r2, [r7, #12]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	4a8e      	ldr	r2, [pc, #568]	; (80040a0 <UART_SetConfig+0x590>)
 8003e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e7a:	f7fc fa29 	bl	80002d0 <__aeabi_uldivmod>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4610      	mov	r0, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	020b      	lsls	r3, r1, #8
 8003e90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e94:	0202      	lsls	r2, r0, #8
 8003e96:	6979      	ldr	r1, [r7, #20]
 8003e98:	6849      	ldr	r1, [r1, #4]
 8003e9a:	0849      	lsrs	r1, r1, #1
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	4605      	mov	r5, r0
 8003ea2:	eb12 0804 	adds.w	r8, r2, r4
 8003ea6:	eb43 0905 	adc.w	r9, r3, r5
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	469a      	mov	sl, r3
 8003eb2:	4693      	mov	fp, r2
 8003eb4:	4652      	mov	r2, sl
 8003eb6:	465b      	mov	r3, fp
 8003eb8:	4640      	mov	r0, r8
 8003eba:	4649      	mov	r1, r9
 8003ebc:	f7fc fa08 	bl	80002d0 <__aeabi_uldivmod>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ece:	d308      	bcc.n	8003ee2 <UART_SetConfig+0x3d2>
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed6:	d204      	bcs.n	8003ee2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6a3a      	ldr	r2, [r7, #32]
 8003ede:	60da      	str	r2, [r3, #12]
 8003ee0:	e0c8      	b.n	8004074 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ee8:	e0c4      	b.n	8004074 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef2:	d167      	bne.n	8003fc4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003ef4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d828      	bhi.n	8003f4e <UART_SetConfig+0x43e>
 8003efc:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <UART_SetConfig+0x3f4>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f29 	.word	0x08003f29
 8003f08:	08003f31 	.word	0x08003f31
 8003f0c:	08003f39 	.word	0x08003f39
 8003f10:	08003f4f 	.word	0x08003f4f
 8003f14:	08003f3f 	.word	0x08003f3f
 8003f18:	08003f4f 	.word	0x08003f4f
 8003f1c:	08003f4f 	.word	0x08003f4f
 8003f20:	08003f4f 	.word	0x08003f4f
 8003f24:	08003f47 	.word	0x08003f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f28:	f7ff f9d6 	bl	80032d8 <HAL_RCC_GetPCLK1Freq>
 8003f2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f2e:	e014      	b.n	8003f5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f30:	f7ff f9e8 	bl	8003304 <HAL_RCC_GetPCLK2Freq>
 8003f34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f36:	e010      	b.n	8003f5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f38:	4b5a      	ldr	r3, [pc, #360]	; (80040a4 <UART_SetConfig+0x594>)
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f3c:	e00d      	b.n	8003f5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f3e:	f7ff f95d 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 8003f42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f44:	e009      	b.n	8003f5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f4c:	e005      	b.n	8003f5a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8089 	beq.w	8004074 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	4a4e      	ldr	r2, [pc, #312]	; (80040a0 <UART_SetConfig+0x590>)
 8003f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f74:	005a      	lsls	r2, r3, #1
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	085b      	lsrs	r3, r3, #1
 8003f7c:	441a      	add	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	2b0f      	cmp	r3, #15
 8003f8c:	d916      	bls.n	8003fbc <UART_SetConfig+0x4ac>
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f94:	d212      	bcs.n	8003fbc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f023 030f 	bic.w	r3, r3, #15
 8003f9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	8bfb      	ldrh	r3, [r7, #30]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	8bfa      	ldrh	r2, [r7, #30]
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	e05b      	b.n	8004074 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003fc2:	e057      	b.n	8004074 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d828      	bhi.n	800401e <UART_SetConfig+0x50e>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <UART_SetConfig+0x4c4>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	08004001 	.word	0x08004001
 8003fdc:	08004009 	.word	0x08004009
 8003fe0:	0800401f 	.word	0x0800401f
 8003fe4:	0800400f 	.word	0x0800400f
 8003fe8:	0800401f 	.word	0x0800401f
 8003fec:	0800401f 	.word	0x0800401f
 8003ff0:	0800401f 	.word	0x0800401f
 8003ff4:	08004017 	.word	0x08004017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff8:	f7ff f96e 	bl	80032d8 <HAL_RCC_GetPCLK1Freq>
 8003ffc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ffe:	e014      	b.n	800402a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004000:	f7ff f980 	bl	8003304 <HAL_RCC_GetPCLK2Freq>
 8004004:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004006:	e010      	b.n	800402a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004008:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <UART_SetConfig+0x594>)
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800400c:	e00d      	b.n	800402a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800400e:	f7ff f8f5 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 8004012:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004014:	e009      	b.n	800402a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800401c:	e005      	b.n	800402a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004028:	bf00      	nop
    }

    if (pclk != 0U)
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	2b00      	cmp	r3, #0
 800402e:	d021      	beq.n	8004074 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	4a1a      	ldr	r2, [pc, #104]	; (80040a0 <UART_SetConfig+0x590>)
 8004036:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800403a:	461a      	mov	r2, r3
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	441a      	add	r2, r3
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004052:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	2b0f      	cmp	r3, #15
 8004058:	d909      	bls.n	800406e <UART_SetConfig+0x55e>
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004060:	d205      	bcs.n	800406e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	b29a      	uxth	r2, r3
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60da      	str	r2, [r3, #12]
 800406c:	e002      	b.n	8004074 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2201      	movs	r2, #1
 8004078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2201      	movs	r2, #1
 8004080:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2200      	movs	r2, #0
 8004088:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2200      	movs	r2, #0
 800408e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004090:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004094:	4618      	mov	r0, r3
 8004096:	3730      	adds	r7, #48	; 0x30
 8004098:	46bd      	mov	sp, r7
 800409a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800409e:	bf00      	nop
 80040a0:	08006700 	.word	0x08006700
 80040a4:	00f42400 	.word	0x00f42400

080040a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01a      	beq.n	80041be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041a6:	d10a      	bne.n	80041be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	605a      	str	r2, [r3, #4]
  }
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041fc:	f7fe f842 	bl	8002284 <HAL_GetTick>
 8004200:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b08      	cmp	r3, #8
 800420e:	d10e      	bne.n	800422e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f82f 	bl	8004282 <UART_WaitOnFlagUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e025      	b.n	800427a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b04      	cmp	r3, #4
 800423a:	d10e      	bne.n	800425a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800423c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f819 	bl	8004282 <UART_WaitOnFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e00f      	b.n	800427a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b09c      	sub	sp, #112	; 0x70
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	603b      	str	r3, [r7, #0]
 800428e:	4613      	mov	r3, r2
 8004290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004292:	e0a9      	b.n	80043e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	f000 80a5 	beq.w	80043e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429e:	f7fd fff1 	bl	8002284 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d302      	bcc.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80042ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d140      	bne.n	8004336 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042c8:	667b      	str	r3, [r7, #100]	; 0x64
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042da:	e841 2300 	strex	r3, r2, [r1]
 80042de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1e6      	bne.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3308      	adds	r3, #8
 80042ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f0:	e853 3f00 	ldrex	r3, [r3]
 80042f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	663b      	str	r3, [r7, #96]	; 0x60
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3308      	adds	r3, #8
 8004304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004306:	64ba      	str	r2, [r7, #72]	; 0x48
 8004308:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800430c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e5      	bne.n	80042e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e069      	b.n	800440a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d051      	beq.n	80043e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800434e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004352:	d149      	bne.n	80043e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800435c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004372:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800437c:	637b      	str	r3, [r7, #52]	; 0x34
 800437e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e6      	bne.n	800435e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3308      	adds	r3, #8
 8004396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	613b      	str	r3, [r7, #16]
   return(result);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f023 0301 	bic.w	r3, r3, #1
 80043a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3308      	adds	r3, #8
 80043ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043b0:	623a      	str	r2, [r7, #32]
 80043b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	69f9      	ldr	r1, [r7, #28]
 80043b6:	6a3a      	ldr	r2, [r7, #32]
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e5      	bne.n	8004390 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e010      	b.n	800440a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69da      	ldr	r2, [r3, #28]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4013      	ands	r3, r2
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	429a      	cmp	r2, r3
 8004404:	f43f af46 	beq.w	8004294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3770      	adds	r7, #112	; 0x70
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_UARTEx_DisableFifoMode+0x16>
 8004424:	2302      	movs	r3, #2
 8004426:	e027      	b.n	8004478 <HAL_UARTEx_DisableFifoMode+0x66>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2224      	movs	r2, #36	; 0x24
 8004434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004456:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004498:	2302      	movs	r3, #2
 800449a:	e02d      	b.n	80044f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2224      	movs	r2, #36	; 0x24
 80044a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0201 	bic.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f84f 	bl	800457c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004514:	2302      	movs	r3, #2
 8004516:	e02d      	b.n	8004574 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2224      	movs	r2, #36	; 0x24
 8004524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0201 	bic.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f811 	bl	800457c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004588:	2b00      	cmp	r3, #0
 800458a:	d108      	bne.n	800459e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800459c:	e031      	b.n	8004602 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800459e:	2308      	movs	r3, #8
 80045a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045a2:	2308      	movs	r3, #8
 80045a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	0e5b      	lsrs	r3, r3, #25
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	0f5b      	lsrs	r3, r3, #29
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045c6:	7bbb      	ldrb	r3, [r7, #14]
 80045c8:	7b3a      	ldrb	r2, [r7, #12]
 80045ca:	4911      	ldr	r1, [pc, #68]	; (8004610 <UARTEx_SetNbDataToProcess+0x94>)
 80045cc:	5c8a      	ldrb	r2, [r1, r2]
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80045d2:	7b3a      	ldrb	r2, [r7, #12]
 80045d4:	490f      	ldr	r1, [pc, #60]	; (8004614 <UARTEx_SetNbDataToProcess+0x98>)
 80045d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	7b7a      	ldrb	r2, [r7, #13]
 80045e8:	4909      	ldr	r1, [pc, #36]	; (8004610 <UARTEx_SetNbDataToProcess+0x94>)
 80045ea:	5c8a      	ldrb	r2, [r1, r2]
 80045ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80045f0:	7b7a      	ldrb	r2, [r7, #13]
 80045f2:	4908      	ldr	r1, [pc, #32]	; (8004614 <UARTEx_SetNbDataToProcess+0x98>)
 80045f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	08006718 	.word	0x08006718
 8004614:	08006720 	.word	0x08006720

08004618 <sniprintf>:
 8004618:	b40c      	push	{r2, r3}
 800461a:	b530      	push	{r4, r5, lr}
 800461c:	4b17      	ldr	r3, [pc, #92]	; (800467c <sniprintf+0x64>)
 800461e:	1e0c      	subs	r4, r1, #0
 8004620:	681d      	ldr	r5, [r3, #0]
 8004622:	b09d      	sub	sp, #116	; 0x74
 8004624:	da08      	bge.n	8004638 <sniprintf+0x20>
 8004626:	238b      	movs	r3, #139	; 0x8b
 8004628:	602b      	str	r3, [r5, #0]
 800462a:	f04f 30ff 	mov.w	r0, #4294967295
 800462e:	b01d      	add	sp, #116	; 0x74
 8004630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004634:	b002      	add	sp, #8
 8004636:	4770      	bx	lr
 8004638:	f44f 7302 	mov.w	r3, #520	; 0x208
 800463c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004640:	bf14      	ite	ne
 8004642:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004646:	4623      	moveq	r3, r4
 8004648:	9304      	str	r3, [sp, #16]
 800464a:	9307      	str	r3, [sp, #28]
 800464c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004650:	9002      	str	r0, [sp, #8]
 8004652:	9006      	str	r0, [sp, #24]
 8004654:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004658:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800465a:	ab21      	add	r3, sp, #132	; 0x84
 800465c:	a902      	add	r1, sp, #8
 800465e:	4628      	mov	r0, r5
 8004660:	9301      	str	r3, [sp, #4]
 8004662:	f000 f9c1 	bl	80049e8 <_svfiprintf_r>
 8004666:	1c43      	adds	r3, r0, #1
 8004668:	bfbc      	itt	lt
 800466a:	238b      	movlt	r3, #139	; 0x8b
 800466c:	602b      	strlt	r3, [r5, #0]
 800466e:	2c00      	cmp	r4, #0
 8004670:	d0dd      	beq.n	800462e <sniprintf+0x16>
 8004672:	9b02      	ldr	r3, [sp, #8]
 8004674:	2200      	movs	r2, #0
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	e7d9      	b.n	800462e <sniprintf+0x16>
 800467a:	bf00      	nop
 800467c:	20000058 	.word	0x20000058

08004680 <siprintf>:
 8004680:	b40e      	push	{r1, r2, r3}
 8004682:	b500      	push	{lr}
 8004684:	b09c      	sub	sp, #112	; 0x70
 8004686:	ab1d      	add	r3, sp, #116	; 0x74
 8004688:	9002      	str	r0, [sp, #8]
 800468a:	9006      	str	r0, [sp, #24]
 800468c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004690:	4809      	ldr	r0, [pc, #36]	; (80046b8 <siprintf+0x38>)
 8004692:	9107      	str	r1, [sp, #28]
 8004694:	9104      	str	r1, [sp, #16]
 8004696:	4909      	ldr	r1, [pc, #36]	; (80046bc <siprintf+0x3c>)
 8004698:	f853 2b04 	ldr.w	r2, [r3], #4
 800469c:	9105      	str	r1, [sp, #20]
 800469e:	6800      	ldr	r0, [r0, #0]
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	a902      	add	r1, sp, #8
 80046a4:	f000 f9a0 	bl	80049e8 <_svfiprintf_r>
 80046a8:	9b02      	ldr	r3, [sp, #8]
 80046aa:	2200      	movs	r2, #0
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	b01c      	add	sp, #112	; 0x70
 80046b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80046b4:	b003      	add	sp, #12
 80046b6:	4770      	bx	lr
 80046b8:	20000058 	.word	0x20000058
 80046bc:	ffff0208 	.word	0xffff0208

080046c0 <memset>:
 80046c0:	4402      	add	r2, r0
 80046c2:	4603      	mov	r3, r0
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d100      	bne.n	80046ca <memset+0xa>
 80046c8:	4770      	bx	lr
 80046ca:	f803 1b01 	strb.w	r1, [r3], #1
 80046ce:	e7f9      	b.n	80046c4 <memset+0x4>

080046d0 <__errno>:
 80046d0:	4b01      	ldr	r3, [pc, #4]	; (80046d8 <__errno+0x8>)
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000058 	.word	0x20000058

080046dc <__libc_init_array>:
 80046dc:	b570      	push	{r4, r5, r6, lr}
 80046de:	4d0d      	ldr	r5, [pc, #52]	; (8004714 <__libc_init_array+0x38>)
 80046e0:	4c0d      	ldr	r4, [pc, #52]	; (8004718 <__libc_init_array+0x3c>)
 80046e2:	1b64      	subs	r4, r4, r5
 80046e4:	10a4      	asrs	r4, r4, #2
 80046e6:	2600      	movs	r6, #0
 80046e8:	42a6      	cmp	r6, r4
 80046ea:	d109      	bne.n	8004700 <__libc_init_array+0x24>
 80046ec:	4d0b      	ldr	r5, [pc, #44]	; (800471c <__libc_init_array+0x40>)
 80046ee:	4c0c      	ldr	r4, [pc, #48]	; (8004720 <__libc_init_array+0x44>)
 80046f0:	f000 fc6a 	bl	8004fc8 <_init>
 80046f4:	1b64      	subs	r4, r4, r5
 80046f6:	10a4      	asrs	r4, r4, #2
 80046f8:	2600      	movs	r6, #0
 80046fa:	42a6      	cmp	r6, r4
 80046fc:	d105      	bne.n	800470a <__libc_init_array+0x2e>
 80046fe:	bd70      	pop	{r4, r5, r6, pc}
 8004700:	f855 3b04 	ldr.w	r3, [r5], #4
 8004704:	4798      	blx	r3
 8004706:	3601      	adds	r6, #1
 8004708:	e7ee      	b.n	80046e8 <__libc_init_array+0xc>
 800470a:	f855 3b04 	ldr.w	r3, [r5], #4
 800470e:	4798      	blx	r3
 8004710:	3601      	adds	r6, #1
 8004712:	e7f2      	b.n	80046fa <__libc_init_array+0x1e>
 8004714:	08006864 	.word	0x08006864
 8004718:	08006864 	.word	0x08006864
 800471c:	08006864 	.word	0x08006864
 8004720:	08006868 	.word	0x08006868

08004724 <__retarget_lock_acquire_recursive>:
 8004724:	4770      	bx	lr

08004726 <__retarget_lock_release_recursive>:
 8004726:	4770      	bx	lr

08004728 <memcpy>:
 8004728:	440a      	add	r2, r1
 800472a:	4291      	cmp	r1, r2
 800472c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004730:	d100      	bne.n	8004734 <memcpy+0xc>
 8004732:	4770      	bx	lr
 8004734:	b510      	push	{r4, lr}
 8004736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800473a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800473e:	4291      	cmp	r1, r2
 8004740:	d1f9      	bne.n	8004736 <memcpy+0xe>
 8004742:	bd10      	pop	{r4, pc}

08004744 <_free_r>:
 8004744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004746:	2900      	cmp	r1, #0
 8004748:	d044      	beq.n	80047d4 <_free_r+0x90>
 800474a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800474e:	9001      	str	r0, [sp, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	f1a1 0404 	sub.w	r4, r1, #4
 8004756:	bfb8      	it	lt
 8004758:	18e4      	addlt	r4, r4, r3
 800475a:	f000 f8df 	bl	800491c <__malloc_lock>
 800475e:	4a1e      	ldr	r2, [pc, #120]	; (80047d8 <_free_r+0x94>)
 8004760:	9801      	ldr	r0, [sp, #4]
 8004762:	6813      	ldr	r3, [r2, #0]
 8004764:	b933      	cbnz	r3, 8004774 <_free_r+0x30>
 8004766:	6063      	str	r3, [r4, #4]
 8004768:	6014      	str	r4, [r2, #0]
 800476a:	b003      	add	sp, #12
 800476c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004770:	f000 b8da 	b.w	8004928 <__malloc_unlock>
 8004774:	42a3      	cmp	r3, r4
 8004776:	d908      	bls.n	800478a <_free_r+0x46>
 8004778:	6825      	ldr	r5, [r4, #0]
 800477a:	1961      	adds	r1, r4, r5
 800477c:	428b      	cmp	r3, r1
 800477e:	bf01      	itttt	eq
 8004780:	6819      	ldreq	r1, [r3, #0]
 8004782:	685b      	ldreq	r3, [r3, #4]
 8004784:	1949      	addeq	r1, r1, r5
 8004786:	6021      	streq	r1, [r4, #0]
 8004788:	e7ed      	b.n	8004766 <_free_r+0x22>
 800478a:	461a      	mov	r2, r3
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	b10b      	cbz	r3, 8004794 <_free_r+0x50>
 8004790:	42a3      	cmp	r3, r4
 8004792:	d9fa      	bls.n	800478a <_free_r+0x46>
 8004794:	6811      	ldr	r1, [r2, #0]
 8004796:	1855      	adds	r5, r2, r1
 8004798:	42a5      	cmp	r5, r4
 800479a:	d10b      	bne.n	80047b4 <_free_r+0x70>
 800479c:	6824      	ldr	r4, [r4, #0]
 800479e:	4421      	add	r1, r4
 80047a0:	1854      	adds	r4, r2, r1
 80047a2:	42a3      	cmp	r3, r4
 80047a4:	6011      	str	r1, [r2, #0]
 80047a6:	d1e0      	bne.n	800476a <_free_r+0x26>
 80047a8:	681c      	ldr	r4, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	6053      	str	r3, [r2, #4]
 80047ae:	440c      	add	r4, r1
 80047b0:	6014      	str	r4, [r2, #0]
 80047b2:	e7da      	b.n	800476a <_free_r+0x26>
 80047b4:	d902      	bls.n	80047bc <_free_r+0x78>
 80047b6:	230c      	movs	r3, #12
 80047b8:	6003      	str	r3, [r0, #0]
 80047ba:	e7d6      	b.n	800476a <_free_r+0x26>
 80047bc:	6825      	ldr	r5, [r4, #0]
 80047be:	1961      	adds	r1, r4, r5
 80047c0:	428b      	cmp	r3, r1
 80047c2:	bf04      	itt	eq
 80047c4:	6819      	ldreq	r1, [r3, #0]
 80047c6:	685b      	ldreq	r3, [r3, #4]
 80047c8:	6063      	str	r3, [r4, #4]
 80047ca:	bf04      	itt	eq
 80047cc:	1949      	addeq	r1, r1, r5
 80047ce:	6021      	streq	r1, [r4, #0]
 80047d0:	6054      	str	r4, [r2, #4]
 80047d2:	e7ca      	b.n	800476a <_free_r+0x26>
 80047d4:	b003      	add	sp, #12
 80047d6:	bd30      	pop	{r4, r5, pc}
 80047d8:	200002ec 	.word	0x200002ec

080047dc <sbrk_aligned>:
 80047dc:	b570      	push	{r4, r5, r6, lr}
 80047de:	4e0e      	ldr	r6, [pc, #56]	; (8004818 <sbrk_aligned+0x3c>)
 80047e0:	460c      	mov	r4, r1
 80047e2:	6831      	ldr	r1, [r6, #0]
 80047e4:	4605      	mov	r5, r0
 80047e6:	b911      	cbnz	r1, 80047ee <sbrk_aligned+0x12>
 80047e8:	f000 fba6 	bl	8004f38 <_sbrk_r>
 80047ec:	6030      	str	r0, [r6, #0]
 80047ee:	4621      	mov	r1, r4
 80047f0:	4628      	mov	r0, r5
 80047f2:	f000 fba1 	bl	8004f38 <_sbrk_r>
 80047f6:	1c43      	adds	r3, r0, #1
 80047f8:	d00a      	beq.n	8004810 <sbrk_aligned+0x34>
 80047fa:	1cc4      	adds	r4, r0, #3
 80047fc:	f024 0403 	bic.w	r4, r4, #3
 8004800:	42a0      	cmp	r0, r4
 8004802:	d007      	beq.n	8004814 <sbrk_aligned+0x38>
 8004804:	1a21      	subs	r1, r4, r0
 8004806:	4628      	mov	r0, r5
 8004808:	f000 fb96 	bl	8004f38 <_sbrk_r>
 800480c:	3001      	adds	r0, #1
 800480e:	d101      	bne.n	8004814 <sbrk_aligned+0x38>
 8004810:	f04f 34ff 	mov.w	r4, #4294967295
 8004814:	4620      	mov	r0, r4
 8004816:	bd70      	pop	{r4, r5, r6, pc}
 8004818:	200002f0 	.word	0x200002f0

0800481c <_malloc_r>:
 800481c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004820:	1ccd      	adds	r5, r1, #3
 8004822:	f025 0503 	bic.w	r5, r5, #3
 8004826:	3508      	adds	r5, #8
 8004828:	2d0c      	cmp	r5, #12
 800482a:	bf38      	it	cc
 800482c:	250c      	movcc	r5, #12
 800482e:	2d00      	cmp	r5, #0
 8004830:	4607      	mov	r7, r0
 8004832:	db01      	blt.n	8004838 <_malloc_r+0x1c>
 8004834:	42a9      	cmp	r1, r5
 8004836:	d905      	bls.n	8004844 <_malloc_r+0x28>
 8004838:	230c      	movs	r3, #12
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	2600      	movs	r6, #0
 800483e:	4630      	mov	r0, r6
 8004840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004844:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004918 <_malloc_r+0xfc>
 8004848:	f000 f868 	bl	800491c <__malloc_lock>
 800484c:	f8d8 3000 	ldr.w	r3, [r8]
 8004850:	461c      	mov	r4, r3
 8004852:	bb5c      	cbnz	r4, 80048ac <_malloc_r+0x90>
 8004854:	4629      	mov	r1, r5
 8004856:	4638      	mov	r0, r7
 8004858:	f7ff ffc0 	bl	80047dc <sbrk_aligned>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	4604      	mov	r4, r0
 8004860:	d155      	bne.n	800490e <_malloc_r+0xf2>
 8004862:	f8d8 4000 	ldr.w	r4, [r8]
 8004866:	4626      	mov	r6, r4
 8004868:	2e00      	cmp	r6, #0
 800486a:	d145      	bne.n	80048f8 <_malloc_r+0xdc>
 800486c:	2c00      	cmp	r4, #0
 800486e:	d048      	beq.n	8004902 <_malloc_r+0xe6>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	4631      	mov	r1, r6
 8004874:	4638      	mov	r0, r7
 8004876:	eb04 0903 	add.w	r9, r4, r3
 800487a:	f000 fb5d 	bl	8004f38 <_sbrk_r>
 800487e:	4581      	cmp	r9, r0
 8004880:	d13f      	bne.n	8004902 <_malloc_r+0xe6>
 8004882:	6821      	ldr	r1, [r4, #0]
 8004884:	1a6d      	subs	r5, r5, r1
 8004886:	4629      	mov	r1, r5
 8004888:	4638      	mov	r0, r7
 800488a:	f7ff ffa7 	bl	80047dc <sbrk_aligned>
 800488e:	3001      	adds	r0, #1
 8004890:	d037      	beq.n	8004902 <_malloc_r+0xe6>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	442b      	add	r3, r5
 8004896:	6023      	str	r3, [r4, #0]
 8004898:	f8d8 3000 	ldr.w	r3, [r8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d038      	beq.n	8004912 <_malloc_r+0xf6>
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	42a2      	cmp	r2, r4
 80048a4:	d12b      	bne.n	80048fe <_malloc_r+0xe2>
 80048a6:	2200      	movs	r2, #0
 80048a8:	605a      	str	r2, [r3, #4]
 80048aa:	e00f      	b.n	80048cc <_malloc_r+0xb0>
 80048ac:	6822      	ldr	r2, [r4, #0]
 80048ae:	1b52      	subs	r2, r2, r5
 80048b0:	d41f      	bmi.n	80048f2 <_malloc_r+0xd6>
 80048b2:	2a0b      	cmp	r2, #11
 80048b4:	d917      	bls.n	80048e6 <_malloc_r+0xca>
 80048b6:	1961      	adds	r1, r4, r5
 80048b8:	42a3      	cmp	r3, r4
 80048ba:	6025      	str	r5, [r4, #0]
 80048bc:	bf18      	it	ne
 80048be:	6059      	strne	r1, [r3, #4]
 80048c0:	6863      	ldr	r3, [r4, #4]
 80048c2:	bf08      	it	eq
 80048c4:	f8c8 1000 	streq.w	r1, [r8]
 80048c8:	5162      	str	r2, [r4, r5]
 80048ca:	604b      	str	r3, [r1, #4]
 80048cc:	4638      	mov	r0, r7
 80048ce:	f104 060b 	add.w	r6, r4, #11
 80048d2:	f000 f829 	bl	8004928 <__malloc_unlock>
 80048d6:	f026 0607 	bic.w	r6, r6, #7
 80048da:	1d23      	adds	r3, r4, #4
 80048dc:	1af2      	subs	r2, r6, r3
 80048de:	d0ae      	beq.n	800483e <_malloc_r+0x22>
 80048e0:	1b9b      	subs	r3, r3, r6
 80048e2:	50a3      	str	r3, [r4, r2]
 80048e4:	e7ab      	b.n	800483e <_malloc_r+0x22>
 80048e6:	42a3      	cmp	r3, r4
 80048e8:	6862      	ldr	r2, [r4, #4]
 80048ea:	d1dd      	bne.n	80048a8 <_malloc_r+0x8c>
 80048ec:	f8c8 2000 	str.w	r2, [r8]
 80048f0:	e7ec      	b.n	80048cc <_malloc_r+0xb0>
 80048f2:	4623      	mov	r3, r4
 80048f4:	6864      	ldr	r4, [r4, #4]
 80048f6:	e7ac      	b.n	8004852 <_malloc_r+0x36>
 80048f8:	4634      	mov	r4, r6
 80048fa:	6876      	ldr	r6, [r6, #4]
 80048fc:	e7b4      	b.n	8004868 <_malloc_r+0x4c>
 80048fe:	4613      	mov	r3, r2
 8004900:	e7cc      	b.n	800489c <_malloc_r+0x80>
 8004902:	230c      	movs	r3, #12
 8004904:	603b      	str	r3, [r7, #0]
 8004906:	4638      	mov	r0, r7
 8004908:	f000 f80e 	bl	8004928 <__malloc_unlock>
 800490c:	e797      	b.n	800483e <_malloc_r+0x22>
 800490e:	6025      	str	r5, [r4, #0]
 8004910:	e7dc      	b.n	80048cc <_malloc_r+0xb0>
 8004912:	605b      	str	r3, [r3, #4]
 8004914:	deff      	udf	#255	; 0xff
 8004916:	bf00      	nop
 8004918:	200002ec 	.word	0x200002ec

0800491c <__malloc_lock>:
 800491c:	4801      	ldr	r0, [pc, #4]	; (8004924 <__malloc_lock+0x8>)
 800491e:	f7ff bf01 	b.w	8004724 <__retarget_lock_acquire_recursive>
 8004922:	bf00      	nop
 8004924:	200002e8 	.word	0x200002e8

08004928 <__malloc_unlock>:
 8004928:	4801      	ldr	r0, [pc, #4]	; (8004930 <__malloc_unlock+0x8>)
 800492a:	f7ff befc 	b.w	8004726 <__retarget_lock_release_recursive>
 800492e:	bf00      	nop
 8004930:	200002e8 	.word	0x200002e8

08004934 <__ssputs_r>:
 8004934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004938:	688e      	ldr	r6, [r1, #8]
 800493a:	461f      	mov	r7, r3
 800493c:	42be      	cmp	r6, r7
 800493e:	680b      	ldr	r3, [r1, #0]
 8004940:	4682      	mov	sl, r0
 8004942:	460c      	mov	r4, r1
 8004944:	4690      	mov	r8, r2
 8004946:	d82c      	bhi.n	80049a2 <__ssputs_r+0x6e>
 8004948:	898a      	ldrh	r2, [r1, #12]
 800494a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800494e:	d026      	beq.n	800499e <__ssputs_r+0x6a>
 8004950:	6965      	ldr	r5, [r4, #20]
 8004952:	6909      	ldr	r1, [r1, #16]
 8004954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004958:	eba3 0901 	sub.w	r9, r3, r1
 800495c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004960:	1c7b      	adds	r3, r7, #1
 8004962:	444b      	add	r3, r9
 8004964:	106d      	asrs	r5, r5, #1
 8004966:	429d      	cmp	r5, r3
 8004968:	bf38      	it	cc
 800496a:	461d      	movcc	r5, r3
 800496c:	0553      	lsls	r3, r2, #21
 800496e:	d527      	bpl.n	80049c0 <__ssputs_r+0x8c>
 8004970:	4629      	mov	r1, r5
 8004972:	f7ff ff53 	bl	800481c <_malloc_r>
 8004976:	4606      	mov	r6, r0
 8004978:	b360      	cbz	r0, 80049d4 <__ssputs_r+0xa0>
 800497a:	6921      	ldr	r1, [r4, #16]
 800497c:	464a      	mov	r2, r9
 800497e:	f7ff fed3 	bl	8004728 <memcpy>
 8004982:	89a3      	ldrh	r3, [r4, #12]
 8004984:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498c:	81a3      	strh	r3, [r4, #12]
 800498e:	6126      	str	r6, [r4, #16]
 8004990:	6165      	str	r5, [r4, #20]
 8004992:	444e      	add	r6, r9
 8004994:	eba5 0509 	sub.w	r5, r5, r9
 8004998:	6026      	str	r6, [r4, #0]
 800499a:	60a5      	str	r5, [r4, #8]
 800499c:	463e      	mov	r6, r7
 800499e:	42be      	cmp	r6, r7
 80049a0:	d900      	bls.n	80049a4 <__ssputs_r+0x70>
 80049a2:	463e      	mov	r6, r7
 80049a4:	6820      	ldr	r0, [r4, #0]
 80049a6:	4632      	mov	r2, r6
 80049a8:	4641      	mov	r1, r8
 80049aa:	f000 faab 	bl	8004f04 <memmove>
 80049ae:	68a3      	ldr	r3, [r4, #8]
 80049b0:	1b9b      	subs	r3, r3, r6
 80049b2:	60a3      	str	r3, [r4, #8]
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	4433      	add	r3, r6
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	2000      	movs	r0, #0
 80049bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c0:	462a      	mov	r2, r5
 80049c2:	f000 fac9 	bl	8004f58 <_realloc_r>
 80049c6:	4606      	mov	r6, r0
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d1e0      	bne.n	800498e <__ssputs_r+0x5a>
 80049cc:	6921      	ldr	r1, [r4, #16]
 80049ce:	4650      	mov	r0, sl
 80049d0:	f7ff feb8 	bl	8004744 <_free_r>
 80049d4:	230c      	movs	r3, #12
 80049d6:	f8ca 3000 	str.w	r3, [sl]
 80049da:	89a3      	ldrh	r3, [r4, #12]
 80049dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049e0:	81a3      	strh	r3, [r4, #12]
 80049e2:	f04f 30ff 	mov.w	r0, #4294967295
 80049e6:	e7e9      	b.n	80049bc <__ssputs_r+0x88>

080049e8 <_svfiprintf_r>:
 80049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ec:	4698      	mov	r8, r3
 80049ee:	898b      	ldrh	r3, [r1, #12]
 80049f0:	061b      	lsls	r3, r3, #24
 80049f2:	b09d      	sub	sp, #116	; 0x74
 80049f4:	4607      	mov	r7, r0
 80049f6:	460d      	mov	r5, r1
 80049f8:	4614      	mov	r4, r2
 80049fa:	d50e      	bpl.n	8004a1a <_svfiprintf_r+0x32>
 80049fc:	690b      	ldr	r3, [r1, #16]
 80049fe:	b963      	cbnz	r3, 8004a1a <_svfiprintf_r+0x32>
 8004a00:	2140      	movs	r1, #64	; 0x40
 8004a02:	f7ff ff0b 	bl	800481c <_malloc_r>
 8004a06:	6028      	str	r0, [r5, #0]
 8004a08:	6128      	str	r0, [r5, #16]
 8004a0a:	b920      	cbnz	r0, 8004a16 <_svfiprintf_r+0x2e>
 8004a0c:	230c      	movs	r3, #12
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	f04f 30ff 	mov.w	r0, #4294967295
 8004a14:	e0d0      	b.n	8004bb8 <_svfiprintf_r+0x1d0>
 8004a16:	2340      	movs	r3, #64	; 0x40
 8004a18:	616b      	str	r3, [r5, #20]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a1e:	2320      	movs	r3, #32
 8004a20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a24:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a28:	2330      	movs	r3, #48	; 0x30
 8004a2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004bd0 <_svfiprintf_r+0x1e8>
 8004a2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a32:	f04f 0901 	mov.w	r9, #1
 8004a36:	4623      	mov	r3, r4
 8004a38:	469a      	mov	sl, r3
 8004a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a3e:	b10a      	cbz	r2, 8004a44 <_svfiprintf_r+0x5c>
 8004a40:	2a25      	cmp	r2, #37	; 0x25
 8004a42:	d1f9      	bne.n	8004a38 <_svfiprintf_r+0x50>
 8004a44:	ebba 0b04 	subs.w	fp, sl, r4
 8004a48:	d00b      	beq.n	8004a62 <_svfiprintf_r+0x7a>
 8004a4a:	465b      	mov	r3, fp
 8004a4c:	4622      	mov	r2, r4
 8004a4e:	4629      	mov	r1, r5
 8004a50:	4638      	mov	r0, r7
 8004a52:	f7ff ff6f 	bl	8004934 <__ssputs_r>
 8004a56:	3001      	adds	r0, #1
 8004a58:	f000 80a9 	beq.w	8004bae <_svfiprintf_r+0x1c6>
 8004a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a5e:	445a      	add	r2, fp
 8004a60:	9209      	str	r2, [sp, #36]	; 0x24
 8004a62:	f89a 3000 	ldrb.w	r3, [sl]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 80a1 	beq.w	8004bae <_svfiprintf_r+0x1c6>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a76:	f10a 0a01 	add.w	sl, sl, #1
 8004a7a:	9304      	str	r3, [sp, #16]
 8004a7c:	9307      	str	r3, [sp, #28]
 8004a7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a82:	931a      	str	r3, [sp, #104]	; 0x68
 8004a84:	4654      	mov	r4, sl
 8004a86:	2205      	movs	r2, #5
 8004a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a8c:	4850      	ldr	r0, [pc, #320]	; (8004bd0 <_svfiprintf_r+0x1e8>)
 8004a8e:	f7fb fbcf 	bl	8000230 <memchr>
 8004a92:	9a04      	ldr	r2, [sp, #16]
 8004a94:	b9d8      	cbnz	r0, 8004ace <_svfiprintf_r+0xe6>
 8004a96:	06d0      	lsls	r0, r2, #27
 8004a98:	bf44      	itt	mi
 8004a9a:	2320      	movmi	r3, #32
 8004a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004aa0:	0711      	lsls	r1, r2, #28
 8004aa2:	bf44      	itt	mi
 8004aa4:	232b      	movmi	r3, #43	; 0x2b
 8004aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8004aae:	2b2a      	cmp	r3, #42	; 0x2a
 8004ab0:	d015      	beq.n	8004ade <_svfiprintf_r+0xf6>
 8004ab2:	9a07      	ldr	r2, [sp, #28]
 8004ab4:	4654      	mov	r4, sl
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	f04f 0c0a 	mov.w	ip, #10
 8004abc:	4621      	mov	r1, r4
 8004abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ac2:	3b30      	subs	r3, #48	; 0x30
 8004ac4:	2b09      	cmp	r3, #9
 8004ac6:	d94d      	bls.n	8004b64 <_svfiprintf_r+0x17c>
 8004ac8:	b1b0      	cbz	r0, 8004af8 <_svfiprintf_r+0x110>
 8004aca:	9207      	str	r2, [sp, #28]
 8004acc:	e014      	b.n	8004af8 <_svfiprintf_r+0x110>
 8004ace:	eba0 0308 	sub.w	r3, r0, r8
 8004ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	9304      	str	r3, [sp, #16]
 8004ada:	46a2      	mov	sl, r4
 8004adc:	e7d2      	b.n	8004a84 <_svfiprintf_r+0x9c>
 8004ade:	9b03      	ldr	r3, [sp, #12]
 8004ae0:	1d19      	adds	r1, r3, #4
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	9103      	str	r1, [sp, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bfbb      	ittet	lt
 8004aea:	425b      	neglt	r3, r3
 8004aec:	f042 0202 	orrlt.w	r2, r2, #2
 8004af0:	9307      	strge	r3, [sp, #28]
 8004af2:	9307      	strlt	r3, [sp, #28]
 8004af4:	bfb8      	it	lt
 8004af6:	9204      	strlt	r2, [sp, #16]
 8004af8:	7823      	ldrb	r3, [r4, #0]
 8004afa:	2b2e      	cmp	r3, #46	; 0x2e
 8004afc:	d10c      	bne.n	8004b18 <_svfiprintf_r+0x130>
 8004afe:	7863      	ldrb	r3, [r4, #1]
 8004b00:	2b2a      	cmp	r3, #42	; 0x2a
 8004b02:	d134      	bne.n	8004b6e <_svfiprintf_r+0x186>
 8004b04:	9b03      	ldr	r3, [sp, #12]
 8004b06:	1d1a      	adds	r2, r3, #4
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	9203      	str	r2, [sp, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	bfb8      	it	lt
 8004b10:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b14:	3402      	adds	r4, #2
 8004b16:	9305      	str	r3, [sp, #20]
 8004b18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004be0 <_svfiprintf_r+0x1f8>
 8004b1c:	7821      	ldrb	r1, [r4, #0]
 8004b1e:	2203      	movs	r2, #3
 8004b20:	4650      	mov	r0, sl
 8004b22:	f7fb fb85 	bl	8000230 <memchr>
 8004b26:	b138      	cbz	r0, 8004b38 <_svfiprintf_r+0x150>
 8004b28:	9b04      	ldr	r3, [sp, #16]
 8004b2a:	eba0 000a 	sub.w	r0, r0, sl
 8004b2e:	2240      	movs	r2, #64	; 0x40
 8004b30:	4082      	lsls	r2, r0
 8004b32:	4313      	orrs	r3, r2
 8004b34:	3401      	adds	r4, #1
 8004b36:	9304      	str	r3, [sp, #16]
 8004b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b3c:	4825      	ldr	r0, [pc, #148]	; (8004bd4 <_svfiprintf_r+0x1ec>)
 8004b3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b42:	2206      	movs	r2, #6
 8004b44:	f7fb fb74 	bl	8000230 <memchr>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d038      	beq.n	8004bbe <_svfiprintf_r+0x1d6>
 8004b4c:	4b22      	ldr	r3, [pc, #136]	; (8004bd8 <_svfiprintf_r+0x1f0>)
 8004b4e:	bb1b      	cbnz	r3, 8004b98 <_svfiprintf_r+0x1b0>
 8004b50:	9b03      	ldr	r3, [sp, #12]
 8004b52:	3307      	adds	r3, #7
 8004b54:	f023 0307 	bic.w	r3, r3, #7
 8004b58:	3308      	adds	r3, #8
 8004b5a:	9303      	str	r3, [sp, #12]
 8004b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b5e:	4433      	add	r3, r6
 8004b60:	9309      	str	r3, [sp, #36]	; 0x24
 8004b62:	e768      	b.n	8004a36 <_svfiprintf_r+0x4e>
 8004b64:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b68:	460c      	mov	r4, r1
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	e7a6      	b.n	8004abc <_svfiprintf_r+0xd4>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	3401      	adds	r4, #1
 8004b72:	9305      	str	r3, [sp, #20]
 8004b74:	4619      	mov	r1, r3
 8004b76:	f04f 0c0a 	mov.w	ip, #10
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b80:	3a30      	subs	r2, #48	; 0x30
 8004b82:	2a09      	cmp	r2, #9
 8004b84:	d903      	bls.n	8004b8e <_svfiprintf_r+0x1a6>
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0c6      	beq.n	8004b18 <_svfiprintf_r+0x130>
 8004b8a:	9105      	str	r1, [sp, #20]
 8004b8c:	e7c4      	b.n	8004b18 <_svfiprintf_r+0x130>
 8004b8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b92:	4604      	mov	r4, r0
 8004b94:	2301      	movs	r3, #1
 8004b96:	e7f0      	b.n	8004b7a <_svfiprintf_r+0x192>
 8004b98:	ab03      	add	r3, sp, #12
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	462a      	mov	r2, r5
 8004b9e:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <_svfiprintf_r+0x1f4>)
 8004ba0:	a904      	add	r1, sp, #16
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	f3af 8000 	nop.w
 8004ba8:	1c42      	adds	r2, r0, #1
 8004baa:	4606      	mov	r6, r0
 8004bac:	d1d6      	bne.n	8004b5c <_svfiprintf_r+0x174>
 8004bae:	89ab      	ldrh	r3, [r5, #12]
 8004bb0:	065b      	lsls	r3, r3, #25
 8004bb2:	f53f af2d 	bmi.w	8004a10 <_svfiprintf_r+0x28>
 8004bb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bb8:	b01d      	add	sp, #116	; 0x74
 8004bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bbe:	ab03      	add	r3, sp, #12
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	462a      	mov	r2, r5
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <_svfiprintf_r+0x1f4>)
 8004bc6:	a904      	add	r1, sp, #16
 8004bc8:	4638      	mov	r0, r7
 8004bca:	f000 f879 	bl	8004cc0 <_printf_i>
 8004bce:	e7eb      	b.n	8004ba8 <_svfiprintf_r+0x1c0>
 8004bd0:	08006829 	.word	0x08006829
 8004bd4:	08006833 	.word	0x08006833
 8004bd8:	00000000 	.word	0x00000000
 8004bdc:	08004935 	.word	0x08004935
 8004be0:	0800682f 	.word	0x0800682f

08004be4 <_printf_common>:
 8004be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be8:	4616      	mov	r6, r2
 8004bea:	4699      	mov	r9, r3
 8004bec:	688a      	ldr	r2, [r1, #8]
 8004bee:	690b      	ldr	r3, [r1, #16]
 8004bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	bfb8      	it	lt
 8004bf8:	4613      	movlt	r3, r2
 8004bfa:	6033      	str	r3, [r6, #0]
 8004bfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c00:	4607      	mov	r7, r0
 8004c02:	460c      	mov	r4, r1
 8004c04:	b10a      	cbz	r2, 8004c0a <_printf_common+0x26>
 8004c06:	3301      	adds	r3, #1
 8004c08:	6033      	str	r3, [r6, #0]
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	0699      	lsls	r1, r3, #26
 8004c0e:	bf42      	ittt	mi
 8004c10:	6833      	ldrmi	r3, [r6, #0]
 8004c12:	3302      	addmi	r3, #2
 8004c14:	6033      	strmi	r3, [r6, #0]
 8004c16:	6825      	ldr	r5, [r4, #0]
 8004c18:	f015 0506 	ands.w	r5, r5, #6
 8004c1c:	d106      	bne.n	8004c2c <_printf_common+0x48>
 8004c1e:	f104 0a19 	add.w	sl, r4, #25
 8004c22:	68e3      	ldr	r3, [r4, #12]
 8004c24:	6832      	ldr	r2, [r6, #0]
 8004c26:	1a9b      	subs	r3, r3, r2
 8004c28:	42ab      	cmp	r3, r5
 8004c2a:	dc26      	bgt.n	8004c7a <_printf_common+0x96>
 8004c2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c30:	1e13      	subs	r3, r2, #0
 8004c32:	6822      	ldr	r2, [r4, #0]
 8004c34:	bf18      	it	ne
 8004c36:	2301      	movne	r3, #1
 8004c38:	0692      	lsls	r2, r2, #26
 8004c3a:	d42b      	bmi.n	8004c94 <_printf_common+0xb0>
 8004c3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c40:	4649      	mov	r1, r9
 8004c42:	4638      	mov	r0, r7
 8004c44:	47c0      	blx	r8
 8004c46:	3001      	adds	r0, #1
 8004c48:	d01e      	beq.n	8004c88 <_printf_common+0xa4>
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	6922      	ldr	r2, [r4, #16]
 8004c4e:	f003 0306 	and.w	r3, r3, #6
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	bf02      	ittt	eq
 8004c56:	68e5      	ldreq	r5, [r4, #12]
 8004c58:	6833      	ldreq	r3, [r6, #0]
 8004c5a:	1aed      	subeq	r5, r5, r3
 8004c5c:	68a3      	ldr	r3, [r4, #8]
 8004c5e:	bf0c      	ite	eq
 8004c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c64:	2500      	movne	r5, #0
 8004c66:	4293      	cmp	r3, r2
 8004c68:	bfc4      	itt	gt
 8004c6a:	1a9b      	subgt	r3, r3, r2
 8004c6c:	18ed      	addgt	r5, r5, r3
 8004c6e:	2600      	movs	r6, #0
 8004c70:	341a      	adds	r4, #26
 8004c72:	42b5      	cmp	r5, r6
 8004c74:	d11a      	bne.n	8004cac <_printf_common+0xc8>
 8004c76:	2000      	movs	r0, #0
 8004c78:	e008      	b.n	8004c8c <_printf_common+0xa8>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	4652      	mov	r2, sl
 8004c7e:	4649      	mov	r1, r9
 8004c80:	4638      	mov	r0, r7
 8004c82:	47c0      	blx	r8
 8004c84:	3001      	adds	r0, #1
 8004c86:	d103      	bne.n	8004c90 <_printf_common+0xac>
 8004c88:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c90:	3501      	adds	r5, #1
 8004c92:	e7c6      	b.n	8004c22 <_printf_common+0x3e>
 8004c94:	18e1      	adds	r1, r4, r3
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	2030      	movs	r0, #48	; 0x30
 8004c9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c9e:	4422      	add	r2, r4
 8004ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ca8:	3302      	adds	r3, #2
 8004caa:	e7c7      	b.n	8004c3c <_printf_common+0x58>
 8004cac:	2301      	movs	r3, #1
 8004cae:	4622      	mov	r2, r4
 8004cb0:	4649      	mov	r1, r9
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	47c0      	blx	r8
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	d0e6      	beq.n	8004c88 <_printf_common+0xa4>
 8004cba:	3601      	adds	r6, #1
 8004cbc:	e7d9      	b.n	8004c72 <_printf_common+0x8e>
	...

08004cc0 <_printf_i>:
 8004cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc4:	7e0f      	ldrb	r7, [r1, #24]
 8004cc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cc8:	2f78      	cmp	r7, #120	; 0x78
 8004cca:	4691      	mov	r9, r2
 8004ccc:	4680      	mov	r8, r0
 8004cce:	460c      	mov	r4, r1
 8004cd0:	469a      	mov	sl, r3
 8004cd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cd6:	d807      	bhi.n	8004ce8 <_printf_i+0x28>
 8004cd8:	2f62      	cmp	r7, #98	; 0x62
 8004cda:	d80a      	bhi.n	8004cf2 <_printf_i+0x32>
 8004cdc:	2f00      	cmp	r7, #0
 8004cde:	f000 80d4 	beq.w	8004e8a <_printf_i+0x1ca>
 8004ce2:	2f58      	cmp	r7, #88	; 0x58
 8004ce4:	f000 80c0 	beq.w	8004e68 <_printf_i+0x1a8>
 8004ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cf0:	e03a      	b.n	8004d68 <_printf_i+0xa8>
 8004cf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cf6:	2b15      	cmp	r3, #21
 8004cf8:	d8f6      	bhi.n	8004ce8 <_printf_i+0x28>
 8004cfa:	a101      	add	r1, pc, #4	; (adr r1, 8004d00 <_printf_i+0x40>)
 8004cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d00:	08004d59 	.word	0x08004d59
 8004d04:	08004d6d 	.word	0x08004d6d
 8004d08:	08004ce9 	.word	0x08004ce9
 8004d0c:	08004ce9 	.word	0x08004ce9
 8004d10:	08004ce9 	.word	0x08004ce9
 8004d14:	08004ce9 	.word	0x08004ce9
 8004d18:	08004d6d 	.word	0x08004d6d
 8004d1c:	08004ce9 	.word	0x08004ce9
 8004d20:	08004ce9 	.word	0x08004ce9
 8004d24:	08004ce9 	.word	0x08004ce9
 8004d28:	08004ce9 	.word	0x08004ce9
 8004d2c:	08004e71 	.word	0x08004e71
 8004d30:	08004d99 	.word	0x08004d99
 8004d34:	08004e2b 	.word	0x08004e2b
 8004d38:	08004ce9 	.word	0x08004ce9
 8004d3c:	08004ce9 	.word	0x08004ce9
 8004d40:	08004e93 	.word	0x08004e93
 8004d44:	08004ce9 	.word	0x08004ce9
 8004d48:	08004d99 	.word	0x08004d99
 8004d4c:	08004ce9 	.word	0x08004ce9
 8004d50:	08004ce9 	.word	0x08004ce9
 8004d54:	08004e33 	.word	0x08004e33
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	1d1a      	adds	r2, r3, #4
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	602a      	str	r2, [r5, #0]
 8004d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e09f      	b.n	8004eac <_printf_i+0x1ec>
 8004d6c:	6820      	ldr	r0, [r4, #0]
 8004d6e:	682b      	ldr	r3, [r5, #0]
 8004d70:	0607      	lsls	r7, r0, #24
 8004d72:	f103 0104 	add.w	r1, r3, #4
 8004d76:	6029      	str	r1, [r5, #0]
 8004d78:	d501      	bpl.n	8004d7e <_printf_i+0xbe>
 8004d7a:	681e      	ldr	r6, [r3, #0]
 8004d7c:	e003      	b.n	8004d86 <_printf_i+0xc6>
 8004d7e:	0646      	lsls	r6, r0, #25
 8004d80:	d5fb      	bpl.n	8004d7a <_printf_i+0xba>
 8004d82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d86:	2e00      	cmp	r6, #0
 8004d88:	da03      	bge.n	8004d92 <_printf_i+0xd2>
 8004d8a:	232d      	movs	r3, #45	; 0x2d
 8004d8c:	4276      	negs	r6, r6
 8004d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d92:	485a      	ldr	r0, [pc, #360]	; (8004efc <_printf_i+0x23c>)
 8004d94:	230a      	movs	r3, #10
 8004d96:	e012      	b.n	8004dbe <_printf_i+0xfe>
 8004d98:	682b      	ldr	r3, [r5, #0]
 8004d9a:	6820      	ldr	r0, [r4, #0]
 8004d9c:	1d19      	adds	r1, r3, #4
 8004d9e:	6029      	str	r1, [r5, #0]
 8004da0:	0605      	lsls	r5, r0, #24
 8004da2:	d501      	bpl.n	8004da8 <_printf_i+0xe8>
 8004da4:	681e      	ldr	r6, [r3, #0]
 8004da6:	e002      	b.n	8004dae <_printf_i+0xee>
 8004da8:	0641      	lsls	r1, r0, #25
 8004daa:	d5fb      	bpl.n	8004da4 <_printf_i+0xe4>
 8004dac:	881e      	ldrh	r6, [r3, #0]
 8004dae:	4853      	ldr	r0, [pc, #332]	; (8004efc <_printf_i+0x23c>)
 8004db0:	2f6f      	cmp	r7, #111	; 0x6f
 8004db2:	bf0c      	ite	eq
 8004db4:	2308      	moveq	r3, #8
 8004db6:	230a      	movne	r3, #10
 8004db8:	2100      	movs	r1, #0
 8004dba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dbe:	6865      	ldr	r5, [r4, #4]
 8004dc0:	60a5      	str	r5, [r4, #8]
 8004dc2:	2d00      	cmp	r5, #0
 8004dc4:	bfa2      	ittt	ge
 8004dc6:	6821      	ldrge	r1, [r4, #0]
 8004dc8:	f021 0104 	bicge.w	r1, r1, #4
 8004dcc:	6021      	strge	r1, [r4, #0]
 8004dce:	b90e      	cbnz	r6, 8004dd4 <_printf_i+0x114>
 8004dd0:	2d00      	cmp	r5, #0
 8004dd2:	d04b      	beq.n	8004e6c <_printf_i+0x1ac>
 8004dd4:	4615      	mov	r5, r2
 8004dd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dda:	fb03 6711 	mls	r7, r3, r1, r6
 8004dde:	5dc7      	ldrb	r7, [r0, r7]
 8004de0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004de4:	4637      	mov	r7, r6
 8004de6:	42bb      	cmp	r3, r7
 8004de8:	460e      	mov	r6, r1
 8004dea:	d9f4      	bls.n	8004dd6 <_printf_i+0x116>
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d10b      	bne.n	8004e08 <_printf_i+0x148>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	07de      	lsls	r6, r3, #31
 8004df4:	d508      	bpl.n	8004e08 <_printf_i+0x148>
 8004df6:	6923      	ldr	r3, [r4, #16]
 8004df8:	6861      	ldr	r1, [r4, #4]
 8004dfa:	4299      	cmp	r1, r3
 8004dfc:	bfde      	ittt	le
 8004dfe:	2330      	movle	r3, #48	; 0x30
 8004e00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e08:	1b52      	subs	r2, r2, r5
 8004e0a:	6122      	str	r2, [r4, #16]
 8004e0c:	f8cd a000 	str.w	sl, [sp]
 8004e10:	464b      	mov	r3, r9
 8004e12:	aa03      	add	r2, sp, #12
 8004e14:	4621      	mov	r1, r4
 8004e16:	4640      	mov	r0, r8
 8004e18:	f7ff fee4 	bl	8004be4 <_printf_common>
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	d14a      	bne.n	8004eb6 <_printf_i+0x1f6>
 8004e20:	f04f 30ff 	mov.w	r0, #4294967295
 8004e24:	b004      	add	sp, #16
 8004e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	f043 0320 	orr.w	r3, r3, #32
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	4833      	ldr	r0, [pc, #204]	; (8004f00 <_printf_i+0x240>)
 8004e34:	2778      	movs	r7, #120	; 0x78
 8004e36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	6829      	ldr	r1, [r5, #0]
 8004e3e:	061f      	lsls	r7, r3, #24
 8004e40:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e44:	d402      	bmi.n	8004e4c <_printf_i+0x18c>
 8004e46:	065f      	lsls	r7, r3, #25
 8004e48:	bf48      	it	mi
 8004e4a:	b2b6      	uxthmi	r6, r6
 8004e4c:	07df      	lsls	r7, r3, #31
 8004e4e:	bf48      	it	mi
 8004e50:	f043 0320 	orrmi.w	r3, r3, #32
 8004e54:	6029      	str	r1, [r5, #0]
 8004e56:	bf48      	it	mi
 8004e58:	6023      	strmi	r3, [r4, #0]
 8004e5a:	b91e      	cbnz	r6, 8004e64 <_printf_i+0x1a4>
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	f023 0320 	bic.w	r3, r3, #32
 8004e62:	6023      	str	r3, [r4, #0]
 8004e64:	2310      	movs	r3, #16
 8004e66:	e7a7      	b.n	8004db8 <_printf_i+0xf8>
 8004e68:	4824      	ldr	r0, [pc, #144]	; (8004efc <_printf_i+0x23c>)
 8004e6a:	e7e4      	b.n	8004e36 <_printf_i+0x176>
 8004e6c:	4615      	mov	r5, r2
 8004e6e:	e7bd      	b.n	8004dec <_printf_i+0x12c>
 8004e70:	682b      	ldr	r3, [r5, #0]
 8004e72:	6826      	ldr	r6, [r4, #0]
 8004e74:	6961      	ldr	r1, [r4, #20]
 8004e76:	1d18      	adds	r0, r3, #4
 8004e78:	6028      	str	r0, [r5, #0]
 8004e7a:	0635      	lsls	r5, r6, #24
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	d501      	bpl.n	8004e84 <_printf_i+0x1c4>
 8004e80:	6019      	str	r1, [r3, #0]
 8004e82:	e002      	b.n	8004e8a <_printf_i+0x1ca>
 8004e84:	0670      	lsls	r0, r6, #25
 8004e86:	d5fb      	bpl.n	8004e80 <_printf_i+0x1c0>
 8004e88:	8019      	strh	r1, [r3, #0]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	6123      	str	r3, [r4, #16]
 8004e8e:	4615      	mov	r5, r2
 8004e90:	e7bc      	b.n	8004e0c <_printf_i+0x14c>
 8004e92:	682b      	ldr	r3, [r5, #0]
 8004e94:	1d1a      	adds	r2, r3, #4
 8004e96:	602a      	str	r2, [r5, #0]
 8004e98:	681d      	ldr	r5, [r3, #0]
 8004e9a:	6862      	ldr	r2, [r4, #4]
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f7fb f9c6 	bl	8000230 <memchr>
 8004ea4:	b108      	cbz	r0, 8004eaa <_printf_i+0x1ea>
 8004ea6:	1b40      	subs	r0, r0, r5
 8004ea8:	6060      	str	r0, [r4, #4]
 8004eaa:	6863      	ldr	r3, [r4, #4]
 8004eac:	6123      	str	r3, [r4, #16]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eb4:	e7aa      	b.n	8004e0c <_printf_i+0x14c>
 8004eb6:	6923      	ldr	r3, [r4, #16]
 8004eb8:	462a      	mov	r2, r5
 8004eba:	4649      	mov	r1, r9
 8004ebc:	4640      	mov	r0, r8
 8004ebe:	47d0      	blx	sl
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d0ad      	beq.n	8004e20 <_printf_i+0x160>
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	079b      	lsls	r3, r3, #30
 8004ec8:	d413      	bmi.n	8004ef2 <_printf_i+0x232>
 8004eca:	68e0      	ldr	r0, [r4, #12]
 8004ecc:	9b03      	ldr	r3, [sp, #12]
 8004ece:	4298      	cmp	r0, r3
 8004ed0:	bfb8      	it	lt
 8004ed2:	4618      	movlt	r0, r3
 8004ed4:	e7a6      	b.n	8004e24 <_printf_i+0x164>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	4632      	mov	r2, r6
 8004eda:	4649      	mov	r1, r9
 8004edc:	4640      	mov	r0, r8
 8004ede:	47d0      	blx	sl
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d09d      	beq.n	8004e20 <_printf_i+0x160>
 8004ee4:	3501      	adds	r5, #1
 8004ee6:	68e3      	ldr	r3, [r4, #12]
 8004ee8:	9903      	ldr	r1, [sp, #12]
 8004eea:	1a5b      	subs	r3, r3, r1
 8004eec:	42ab      	cmp	r3, r5
 8004eee:	dcf2      	bgt.n	8004ed6 <_printf_i+0x216>
 8004ef0:	e7eb      	b.n	8004eca <_printf_i+0x20a>
 8004ef2:	2500      	movs	r5, #0
 8004ef4:	f104 0619 	add.w	r6, r4, #25
 8004ef8:	e7f5      	b.n	8004ee6 <_printf_i+0x226>
 8004efa:	bf00      	nop
 8004efc:	0800683a 	.word	0x0800683a
 8004f00:	0800684b 	.word	0x0800684b

08004f04 <memmove>:
 8004f04:	4288      	cmp	r0, r1
 8004f06:	b510      	push	{r4, lr}
 8004f08:	eb01 0402 	add.w	r4, r1, r2
 8004f0c:	d902      	bls.n	8004f14 <memmove+0x10>
 8004f0e:	4284      	cmp	r4, r0
 8004f10:	4623      	mov	r3, r4
 8004f12:	d807      	bhi.n	8004f24 <memmove+0x20>
 8004f14:	1e43      	subs	r3, r0, #1
 8004f16:	42a1      	cmp	r1, r4
 8004f18:	d008      	beq.n	8004f2c <memmove+0x28>
 8004f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f22:	e7f8      	b.n	8004f16 <memmove+0x12>
 8004f24:	4402      	add	r2, r0
 8004f26:	4601      	mov	r1, r0
 8004f28:	428a      	cmp	r2, r1
 8004f2a:	d100      	bne.n	8004f2e <memmove+0x2a>
 8004f2c:	bd10      	pop	{r4, pc}
 8004f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f36:	e7f7      	b.n	8004f28 <memmove+0x24>

08004f38 <_sbrk_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4d06      	ldr	r5, [pc, #24]	; (8004f54 <_sbrk_r+0x1c>)
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	4604      	mov	r4, r0
 8004f40:	4608      	mov	r0, r1
 8004f42:	602b      	str	r3, [r5, #0]
 8004f44:	f7fb feee 	bl	8000d24 <_sbrk>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d102      	bne.n	8004f52 <_sbrk_r+0x1a>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	b103      	cbz	r3, 8004f52 <_sbrk_r+0x1a>
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	200002e4 	.word	0x200002e4

08004f58 <_realloc_r>:
 8004f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5c:	4680      	mov	r8, r0
 8004f5e:	4614      	mov	r4, r2
 8004f60:	460e      	mov	r6, r1
 8004f62:	b921      	cbnz	r1, 8004f6e <_realloc_r+0x16>
 8004f64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f68:	4611      	mov	r1, r2
 8004f6a:	f7ff bc57 	b.w	800481c <_malloc_r>
 8004f6e:	b92a      	cbnz	r2, 8004f7c <_realloc_r+0x24>
 8004f70:	f7ff fbe8 	bl	8004744 <_free_r>
 8004f74:	4625      	mov	r5, r4
 8004f76:	4628      	mov	r0, r5
 8004f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f7c:	f000 f81b 	bl	8004fb6 <_malloc_usable_size_r>
 8004f80:	4284      	cmp	r4, r0
 8004f82:	4607      	mov	r7, r0
 8004f84:	d802      	bhi.n	8004f8c <_realloc_r+0x34>
 8004f86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f8a:	d812      	bhi.n	8004fb2 <_realloc_r+0x5a>
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4640      	mov	r0, r8
 8004f90:	f7ff fc44 	bl	800481c <_malloc_r>
 8004f94:	4605      	mov	r5, r0
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d0ed      	beq.n	8004f76 <_realloc_r+0x1e>
 8004f9a:	42bc      	cmp	r4, r7
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	bf28      	it	cs
 8004fa2:	463a      	movcs	r2, r7
 8004fa4:	f7ff fbc0 	bl	8004728 <memcpy>
 8004fa8:	4631      	mov	r1, r6
 8004faa:	4640      	mov	r0, r8
 8004fac:	f7ff fbca 	bl	8004744 <_free_r>
 8004fb0:	e7e1      	b.n	8004f76 <_realloc_r+0x1e>
 8004fb2:	4635      	mov	r5, r6
 8004fb4:	e7df      	b.n	8004f76 <_realloc_r+0x1e>

08004fb6 <_malloc_usable_size_r>:
 8004fb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fba:	1f18      	subs	r0, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bfbc      	itt	lt
 8004fc0:	580b      	ldrlt	r3, [r1, r0]
 8004fc2:	18c0      	addlt	r0, r0, r3
 8004fc4:	4770      	bx	lr
	...

08004fc8 <_init>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr

08004fd4 <_fini>:
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	bf00      	nop
 8004fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fda:	bc08      	pop	{r3}
 8004fdc:	469e      	mov	lr, r3
 8004fde:	4770      	bx	lr
