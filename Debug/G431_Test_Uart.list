
G431_Test_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003748  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000164c  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f6c  08004f6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f6c  08004f6c  00014f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f74  08004f74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f78  08004f78  00014f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  08004f88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08004f88  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e033  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee5  00000000  00000000  0002e06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  00030a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d5b8  00000000  00000000  00031488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfeb  00000000  00000000  0004ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8ae2  00000000  00000000  0005ba2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011450d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c24  00000000  00000000  00114560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003908 	.word	0x08003908

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003908 	.word	0x08003908

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b974 	b.w	8000528 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	4604      	mov	r4, r0
 8000260:	468e      	mov	lr, r1
 8000262:	2b00      	cmp	r3, #0
 8000264:	d14d      	bne.n	8000302 <__udivmoddi4+0xaa>
 8000266:	428a      	cmp	r2, r1
 8000268:	4694      	mov	ip, r2
 800026a:	d969      	bls.n	8000340 <__udivmoddi4+0xe8>
 800026c:	fab2 f282 	clz	r2, r2
 8000270:	b152      	cbz	r2, 8000288 <__udivmoddi4+0x30>
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	f1c2 0120 	rsb	r1, r2, #32
 800027a:	fa20 f101 	lsr.w	r1, r0, r1
 800027e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000282:	ea41 0e03 	orr.w	lr, r1, r3
 8000286:	4094      	lsls	r4, r2
 8000288:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800028c:	0c21      	lsrs	r1, r4, #16
 800028e:	fbbe f6f8 	udiv	r6, lr, r8
 8000292:	fa1f f78c 	uxth.w	r7, ip
 8000296:	fb08 e316 	mls	r3, r8, r6, lr
 800029a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029e:	fb06 f107 	mul.w	r1, r6, r7
 80002a2:	4299      	cmp	r1, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x64>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ae:	f080 811f 	bcs.w	80004f0 <__udivmoddi4+0x298>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 811c 	bls.w	80004f0 <__udivmoddi4+0x298>
 80002b8:	3e02      	subs	r6, #2
 80002ba:	4463      	add	r3, ip
 80002bc:	1a5b      	subs	r3, r3, r1
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c4:	fb08 3310 	mls	r3, r8, r0, r3
 80002c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002cc:	fb00 f707 	mul.w	r7, r0, r7
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	d90a      	bls.n	80002ea <__udivmoddi4+0x92>
 80002d4:	eb1c 0404 	adds.w	r4, ip, r4
 80002d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002dc:	f080 810a 	bcs.w	80004f4 <__udivmoddi4+0x29c>
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	f240 8107 	bls.w	80004f4 <__udivmoddi4+0x29c>
 80002e6:	4464      	add	r4, ip
 80002e8:	3802      	subs	r0, #2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	1be4      	subs	r4, r4, r7
 80002f0:	2600      	movs	r6, #0
 80002f2:	b11d      	cbz	r5, 80002fc <__udivmoddi4+0xa4>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c5 4300 	strd	r4, r3, [r5]
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0xc2>
 8000306:	2d00      	cmp	r5, #0
 8000308:	f000 80ef 	beq.w	80004ea <__udivmoddi4+0x292>
 800030c:	2600      	movs	r6, #0
 800030e:	e9c5 0100 	strd	r0, r1, [r5]
 8000312:	4630      	mov	r0, r6
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f683 	clz	r6, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d14a      	bne.n	80003b8 <__udivmoddi4+0x160>
 8000322:	428b      	cmp	r3, r1
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xd4>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80f9 	bhi.w	800051e <__udivmoddi4+0x2c6>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb61 0303 	sbc.w	r3, r1, r3
 8000332:	2001      	movs	r0, #1
 8000334:	469e      	mov	lr, r3
 8000336:	2d00      	cmp	r5, #0
 8000338:	d0e0      	beq.n	80002fc <__udivmoddi4+0xa4>
 800033a:	e9c5 4e00 	strd	r4, lr, [r5]
 800033e:	e7dd      	b.n	80002fc <__udivmoddi4+0xa4>
 8000340:	b902      	cbnz	r2, 8000344 <__udivmoddi4+0xec>
 8000342:	deff      	udf	#255	; 0xff
 8000344:	fab2 f282 	clz	r2, r2
 8000348:	2a00      	cmp	r2, #0
 800034a:	f040 8092 	bne.w	8000472 <__udivmoddi4+0x21a>
 800034e:	eba1 010c 	sub.w	r1, r1, ip
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	2601      	movs	r6, #1
 800035c:	0c20      	lsrs	r0, r4, #16
 800035e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000362:	fb07 1113 	mls	r1, r7, r3, r1
 8000366:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800036a:	fb0e f003 	mul.w	r0, lr, r3
 800036e:	4288      	cmp	r0, r1
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x12c>
 8000372:	eb1c 0101 	adds.w	r1, ip, r1
 8000376:	f103 38ff 	add.w	r8, r3, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x12a>
 800037c:	4288      	cmp	r0, r1
 800037e:	f200 80cb 	bhi.w	8000518 <__udivmoddi4+0x2c0>
 8000382:	4643      	mov	r3, r8
 8000384:	1a09      	subs	r1, r1, r0
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb1 f0f7 	udiv	r0, r1, r7
 800038c:	fb07 1110 	mls	r1, r7, r0, r1
 8000390:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	45a6      	cmp	lr, r4
 800039a:	d908      	bls.n	80003ae <__udivmoddi4+0x156>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x154>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f200 80bb 	bhi.w	8000522 <__udivmoddi4+0x2ca>
 80003ac:	4608      	mov	r0, r1
 80003ae:	eba4 040e 	sub.w	r4, r4, lr
 80003b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b6:	e79c      	b.n	80002f2 <__udivmoddi4+0x9a>
 80003b8:	f1c6 0720 	rsb	r7, r6, #32
 80003bc:	40b3      	lsls	r3, r6
 80003be:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ca:	fa01 f306 	lsl.w	r3, r1, r6
 80003ce:	431c      	orrs	r4, r3
 80003d0:	40f9      	lsrs	r1, r7
 80003d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d6:	fa00 f306 	lsl.w	r3, r0, r6
 80003da:	fbb1 f8f9 	udiv	r8, r1, r9
 80003de:	0c20      	lsrs	r0, r4, #16
 80003e0:	fa1f fe8c 	uxth.w	lr, ip
 80003e4:	fb09 1118 	mls	r1, r9, r8, r1
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	fb08 f00e 	mul.w	r0, r8, lr
 80003f0:	4288      	cmp	r0, r1
 80003f2:	fa02 f206 	lsl.w	r2, r2, r6
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b8>
 80003f8:	eb1c 0101 	adds.w	r1, ip, r1
 80003fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000400:	f080 8088 	bcs.w	8000514 <__udivmoddi4+0x2bc>
 8000404:	4288      	cmp	r0, r1
 8000406:	f240 8085 	bls.w	8000514 <__udivmoddi4+0x2bc>
 800040a:	f1a8 0802 	sub.w	r8, r8, #2
 800040e:	4461      	add	r1, ip
 8000410:	1a09      	subs	r1, r1, r0
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb1 f0f9 	udiv	r0, r1, r9
 8000418:	fb09 1110 	mls	r1, r9, r0, r1
 800041c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	458e      	cmp	lr, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1e2>
 8000428:	eb1c 0101 	adds.w	r1, ip, r1
 800042c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000430:	d26c      	bcs.n	800050c <__udivmoddi4+0x2b4>
 8000432:	458e      	cmp	lr, r1
 8000434:	d96a      	bls.n	800050c <__udivmoddi4+0x2b4>
 8000436:	3802      	subs	r0, #2
 8000438:	4461      	add	r1, ip
 800043a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043e:	fba0 9402 	umull	r9, r4, r0, r2
 8000442:	eba1 010e 	sub.w	r1, r1, lr
 8000446:	42a1      	cmp	r1, r4
 8000448:	46c8      	mov	r8, r9
 800044a:	46a6      	mov	lr, r4
 800044c:	d356      	bcc.n	80004fc <__udivmoddi4+0x2a4>
 800044e:	d053      	beq.n	80004f8 <__udivmoddi4+0x2a0>
 8000450:	b15d      	cbz	r5, 800046a <__udivmoddi4+0x212>
 8000452:	ebb3 0208 	subs.w	r2, r3, r8
 8000456:	eb61 010e 	sbc.w	r1, r1, lr
 800045a:	fa01 f707 	lsl.w	r7, r1, r7
 800045e:	fa22 f306 	lsr.w	r3, r2, r6
 8000462:	40f1      	lsrs	r1, r6
 8000464:	431f      	orrs	r7, r3
 8000466:	e9c5 7100 	strd	r7, r1, [r5]
 800046a:	2600      	movs	r6, #0
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	f1c2 0320 	rsb	r3, r2, #32
 8000476:	40d8      	lsrs	r0, r3
 8000478:	fa0c fc02 	lsl.w	ip, ip, r2
 800047c:	fa21 f303 	lsr.w	r3, r1, r3
 8000480:	4091      	lsls	r1, r2
 8000482:	4301      	orrs	r1, r0
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000490:	fb07 3610 	mls	r6, r7, r0, r3
 8000494:	0c0b      	lsrs	r3, r1, #16
 8000496:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800049a:	fb00 f60e 	mul.w	r6, r0, lr
 800049e:	429e      	cmp	r6, r3
 80004a0:	fa04 f402 	lsl.w	r4, r4, r2
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x260>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ae:	d22f      	bcs.n	8000510 <__udivmoddi4+0x2b8>
 80004b0:	429e      	cmp	r6, r3
 80004b2:	d92d      	bls.n	8000510 <__udivmoddi4+0x2b8>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	1b9b      	subs	r3, r3, r6
 80004ba:	b289      	uxth	r1, r1
 80004bc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c0:	fb07 3316 	mls	r3, r7, r6, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb06 f30e 	mul.w	r3, r6, lr
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x28a>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d8:	d216      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004da:	428b      	cmp	r3, r1
 80004dc:	d914      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004de:	3e02      	subs	r6, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	1ac9      	subs	r1, r1, r3
 80004e4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e8:	e738      	b.n	800035c <__udivmoddi4+0x104>
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e705      	b.n	80002fc <__udivmoddi4+0xa4>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e3      	b.n	80002bc <__udivmoddi4+0x64>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6f8      	b.n	80002ea <__udivmoddi4+0x92>
 80004f8:	454b      	cmp	r3, r9
 80004fa:	d2a9      	bcs.n	8000450 <__udivmoddi4+0x1f8>
 80004fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000500:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000504:	3801      	subs	r0, #1
 8000506:	e7a3      	b.n	8000450 <__udivmoddi4+0x1f8>
 8000508:	4646      	mov	r6, r8
 800050a:	e7ea      	b.n	80004e2 <__udivmoddi4+0x28a>
 800050c:	4620      	mov	r0, r4
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1e2>
 8000510:	4640      	mov	r0, r8
 8000512:	e7d1      	b.n	80004b8 <__udivmoddi4+0x260>
 8000514:	46d0      	mov	r8, sl
 8000516:	e77b      	b.n	8000410 <__udivmoddi4+0x1b8>
 8000518:	3b02      	subs	r3, #2
 800051a:	4461      	add	r1, ip
 800051c:	e732      	b.n	8000384 <__udivmoddi4+0x12c>
 800051e:	4630      	mov	r0, r6
 8000520:	e709      	b.n	8000336 <__udivmoddi4+0xde>
 8000522:	4464      	add	r4, ip
 8000524:	3802      	subs	r0, #2
 8000526:	e742      	b.n	80003ae <__udivmoddi4+0x156>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 ffa7 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f837 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f919 	bl	8000770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800053e:	f000 f8cb 	bl	80006d8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000542:	f000 f87d 	bl	8000640 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  send_debug_logs ( "\nStart the application." ) ;
 8000546:	4816      	ldr	r0, [pc, #88]	; (80005a0 <main+0x74>)
 8000548:	f000 f976 	bl	8000838 <send_debug_logs>
  reset_astronode () ;
 800054c:	f000 f9a2 	bl	8000894 <reset_astronode>

  print_housekeeping_timer = get_systick () ;
 8000550:	f000 f9d2 	bl	80008f8 <get_systick>
 8000554:	4603      	mov	r3, r0
 8000556:	4a13      	ldr	r2, [pc, #76]	; (80005a4 <main+0x78>)
 8000558:	6013      	str	r3, [r2, #0]
  // application cfg
  //astronode_send_cfg_wr ( true , false , true , false , true , true , true , false ) ;
  //default cfg
  //astronode_send_cfg_wr ( true , false , true, false , true , false , true , false ) ;
  //test
  HAL_Delay ( 1000 ) ;
 800055a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800055e:	f001 f801 	bl	8001564 <HAL_Delay>
  astronode_send_cfg_wr ( true , false , true , false , true , true , true , false ) ;
 8000562:	2300      	movs	r3, #0
 8000564:	9303      	str	r3, [sp, #12]
 8000566:	2301      	movs	r3, #1
 8000568:	9302      	str	r3, [sp, #8]
 800056a:	2301      	movs	r3, #1
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2301      	movs	r3, #1
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2300      	movs	r3, #0
 8000574:	2201      	movs	r2, #1
 8000576:	2100      	movs	r1, #0
 8000578:	2001      	movs	r0, #1
 800057a:	f000 fb4d 	bl	8000c18 <astronode_send_cfg_wr>
  astronode_send_cfg_wr ( true , false , true , false , true , true , true , false ) ;
 800057e:	2300      	movs	r3, #0
 8000580:	9303      	str	r3, [sp, #12]
 8000582:	2301      	movs	r3, #1
 8000584:	9302      	str	r3, [sp, #8]
 8000586:	2301      	movs	r3, #1
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2301      	movs	r3, #1
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	2201      	movs	r2, #1
 8000592:	2100      	movs	r1, #0
 8000594:	2001      	movs	r0, #1
 8000596:	f000 fb3f 	bl	8000c18 <astronode_send_cfg_wr>
  astronode_send_cfg_sr () ;
 800059a:	f000 fb07 	bl	8000bac <astronode_send_cfg_sr>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059e:	e7fe      	b.n	800059e <main+0x72>
 80005a0:	08003920 	.word	0x08003920
 80005a4:	20000148 	.word	0x20000148

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	2238      	movs	r2, #56	; 0x38
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 f99e 	bl	80038f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f001 fa6a 	bl	8001aa4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005da:	2340      	movs	r3, #64	; 0x40
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005e6:	2304      	movs	r3, #4
 80005e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ea:	2355      	movs	r3, #85	; 0x55
 80005ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 faf4 	bl	8001bec <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800060a:	f000 f9a7 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2303      	movs	r3, #3
 8000614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f001 fdf8 	bl	800221c <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000632:	f000 f993 	bl	800095c <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	; 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <MX_USART1_UART_Init+0x90>)
 8000646:	4a23      	ldr	r2, [pc, #140]	; (80006d4 <MX_USART1_UART_Init+0x94>)
 8000648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <MX_USART1_UART_Init+0x90>)
 800064c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_USART1_UART_Init+0x90>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <MX_USART1_UART_Init+0x90>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_USART1_UART_Init+0x90>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_USART1_UART_Init+0x90>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_USART1_UART_Init+0x90>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_USART1_UART_Init+0x90>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_USART1_UART_Init+0x90>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_USART1_UART_Init+0x90>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_USART1_UART_Init+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000688:	4811      	ldr	r0, [pc, #68]	; (80006d0 <MX_USART1_UART_Init+0x90>)
 800068a:	f002 f9d3 	bl	8002a34 <HAL_UART_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000694:	f000 f962 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000698:	2100      	movs	r1, #0
 800069a:	480d      	ldr	r0, [pc, #52]	; (80006d0 <MX_USART1_UART_Init+0x90>)
 800069c:	f003 f83e 	bl	800371c <HAL_UARTEx_SetTxFifoThreshold>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006a6:	f000 f959 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <MX_USART1_UART_Init+0x90>)
 80006ae:	f003 f873 	bl	8003798 <HAL_UARTEx_SetRxFifoThreshold>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006b8:	f000 f950 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_USART1_UART_Init+0x90>)
 80006be:	f002 fff4 	bl	80036aa <HAL_UARTEx_DisableFifoMode>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006c8:	f000 f948 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000028 	.word	0x20000028
 80006d4:	40013800 	.word	0x40013800

080006d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <MX_USART2_UART_Init+0x90>)
 80006de:	4a23      	ldr	r2, [pc, #140]	; (800076c <MX_USART2_UART_Init+0x94>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e2:	4b21      	ldr	r3, [pc, #132]	; (8000768 <MX_USART2_UART_Init+0x90>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_USART2_UART_Init+0x90>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_USART2_UART_Init+0x90>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_USART2_UART_Init+0x90>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_USART2_UART_Init+0x90>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_USART2_UART_Init+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_USART2_UART_Init+0x90>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_USART2_UART_Init+0x90>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USART2_UART_Init+0x90>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_USART2_UART_Init+0x90>)
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000720:	4811      	ldr	r0, [pc, #68]	; (8000768 <MX_USART2_UART_Init+0x90>)
 8000722:	f002 f987 	bl	8002a34 <HAL_UART_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800072c:	f000 f916 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_USART2_UART_Init+0x90>)
 8000734:	f002 fff2 	bl	800371c <HAL_UARTEx_SetTxFifoThreshold>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800073e:	f000 f90d 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4808      	ldr	r0, [pc, #32]	; (8000768 <MX_USART2_UART_Init+0x90>)
 8000746:	f003 f827 	bl	8003798 <HAL_UARTEx_SetRxFifoThreshold>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000750:	f000 f904 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_USART2_UART_Init+0x90>)
 8000756:	f002 ffa8 	bl	80036aa <HAL_UARTEx_DisableFifoMode>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000760:	f000 f8fc 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000b8 	.word	0x200000b8
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_GPIO_Init+0xc0>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a29      	ldr	r2, [pc, #164]	; (8000830 <MX_GPIO_Init+0xc0>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b27      	ldr	r3, [pc, #156]	; (8000830 <MX_GPIO_Init+0xc0>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <MX_GPIO_Init+0xc0>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a23      	ldr	r2, [pc, #140]	; (8000830 <MX_GPIO_Init+0xc0>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_GPIO_Init+0xc0>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ASTRO_RESET_Pin|ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2103      	movs	r1, #3
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007be:	f001 f959 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c8:	481a      	ldr	r0, [pc, #104]	; (8000834 <MX_GPIO_Init+0xc4>)
 80007ca:	f001 f953 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ASTRO_RESET_Pin ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = ASTRO_RESET_Pin|ASTRO_WAKEUP_Pin;
 80007ce:	2303      	movs	r3, #3
 80007d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	4619      	mov	r1, r3
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e8:	f000 ffc2 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVENT_EXTI12_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVENT_EXTI12_Pin;
 80007ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ASTRO_EVENT_EXTI12_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	4619      	mov	r1, r3
 8000802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000806:	f000 ffb3 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800080a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_GPIO_Init+0xc4>)
 8000824:	f000 ffa4 	bl	8001770 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000
 8000834:	48000400 	.word	0x48000400

08000838 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fce9 	bl	8000218 <strlen>
 8000846:	60f8      	str	r0, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2bfa      	cmp	r3, #250	; 0xfa
 800084c:	d908      	bls.n	8000860 <send_debug_logs+0x28>
    {
        HAL_UART_Transmit ( HUART_USB , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	222a      	movs	r2, #42	; 0x2a
 8000854:	490c      	ldr	r1, [pc, #48]	; (8000888 <send_debug_logs+0x50>)
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <send_debug_logs+0x54>)
 8000858:	f002 f93c 	bl	8002ad4 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 800085c:	23fa      	movs	r3, #250	; 0xfa
 800085e:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_USB , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	b29a      	uxth	r2, r3
 8000864:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000868:	6879      	ldr	r1, [r7, #4]
 800086a:	4808      	ldr	r0, [pc, #32]	; (800088c <send_debug_logs+0x54>)
 800086c:	f002 f932 	bl	8002ad4 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_USB , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8000870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000874:	2201      	movs	r2, #1
 8000876:	4906      	ldr	r1, [pc, #24]	; (8000890 <send_debug_logs+0x58>)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <send_debug_logs+0x54>)
 800087a:	f002 f92b 	bl	8002ad4 <HAL_UART_Transmit>
}
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	08003938 	.word	0x08003938
 800088c:	200000b8 	.word	0x200000b8
 8000890:	08003964 	.word	0x08003964

08000894 <reset_astronode>:
void reset_astronode ( void )
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RESET_GPIO_Port , ASTRO_RESET_Pin , GPIO_PIN_SET ) ;
 8000898:	2201      	movs	r2, #1
 800089a:	2101      	movs	r1, #1
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f001 f8e8 	bl	8001a74 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 80008a4:	2001      	movs	r0, #1
 80008a6:	f000 fe5d 	bl	8001564 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RESET_GPIO_Port , ASTRO_RESET_Pin , GPIO_PIN_RESET ) ;
 80008aa:	2200      	movs	r2, #0
 80008ac:	2101      	movs	r1, #1
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b2:	f001 f8df 	bl	8001a74 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 80008b6:	20fa      	movs	r0, #250	; 0xfa
 80008b8:	f000 fe54 	bl	8001564 <HAL_Delay>
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}

080008c0 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 80008ca:	4809      	ldr	r0, [pc, #36]	; (80008f0 <send_astronode_request+0x30>)
 80008cc:	f7ff ffb4 	bl	8000838 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ffb1 	bl	8000838 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	b29a      	uxth	r2, r3
 80008da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <send_astronode_request+0x34>)
 80008e2:	f002 f8f7 	bl	8002ad4 <HAL_UART_Transmit>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	08003968 	.word	0x08003968
 80008f4:	20000028 	.word	0x20000028

080008f8 <get_systick>:
uint32_t get_systick ( void )
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 80008fc:	f000 fe26 	bl	800154c <HAL_GetTick>
 8000900:	4603      	mov	r3, r0
}
 8000902:	4618      	mov	r0, r3
 8000904:	bd80      	pop	{r7, pc}

08000906 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	460b      	mov	r3, r1
 8000910:	807b      	strh	r3, [r7, #2]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8000912:	f7ff fff1 	bl	80008f8 <get_systick>
 8000916:	4602      	mov	r2, r0
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	1ad2      	subs	r2, r2, r3
 800091c:	887b      	ldrh	r3, [r7, #2]
 800091e:	429a      	cmp	r2, r3
 8000920:	bf8c      	ite	hi
 8000922:	2301      	movhi	r3, #1
 8000924:	2300      	movls	r3, #0
 8000926:	b2db      	uxtb	r3, r3
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8000938:	2364      	movs	r3, #100	; 0x64
 800093a:	2201      	movs	r2, #1
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	4806      	ldr	r0, [pc, #24]	; (8000958 <is_astronode_character_received+0x28>)
 8000940:	f002 f95e 	bl	8002c00 <HAL_UART_Receive>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	bf0c      	ite	eq
 800094a:	2301      	moveq	r3, #1
 800094c:	2300      	movne	r3, #0
 800094e:	b2db      	uxtb	r3, r3
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000028 	.word	0x20000028

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <HAL_MspInit+0x44>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6613      	str	r3, [r2, #96]	; 0x60
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_MspInit+0x44>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6593      	str	r3, [r2, #88]	; 0x58
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b09c      	sub	sp, #112	; 0x70
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c8:	f107 0318 	add.w	r3, r7, #24
 80009cc:	2244      	movs	r2, #68	; 0x44
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 ff91 	bl	80038f8 <memset>
  if(huart->Instance==USART1)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a3e      	ldr	r2, [pc, #248]	; (8000ad4 <HAL_UART_MspInit+0x124>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d138      	bne.n	8000a52 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e8:	f107 0318 	add.w	r3, r7, #24
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 fe31 	bl	8002654 <HAL_RCCEx_PeriphCLKConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009f8:	f7ff ffb0 	bl	800095c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009fc:	4b36      	ldr	r3, [pc, #216]	; (8000ad8 <HAL_UART_MspInit+0x128>)
 80009fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a00:	4a35      	ldr	r2, [pc, #212]	; (8000ad8 <HAL_UART_MspInit+0x128>)
 8000a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a06:	6613      	str	r3, [r2, #96]	; 0x60
 8000a08:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <HAL_UART_MspInit+0x128>)
 8000a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a10:	617b      	str	r3, [r7, #20]
 8000a12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <HAL_UART_MspInit+0x128>)
 8000a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a18:	4a2f      	ldr	r2, [pc, #188]	; (8000ad8 <HAL_UART_MspInit+0x128>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a20:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <HAL_UART_MspInit+0x128>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a30:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a46:	4619      	mov	r1, r3
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f000 fe90 	bl	8001770 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a50:	e03b      	b.n	8000aca <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a21      	ldr	r2, [pc, #132]	; (8000adc <HAL_UART_MspInit+0x12c>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d136      	bne.n	8000aca <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 fdf3 	bl	8002654 <HAL_RCCEx_PeriphCLKConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000a74:	f7ff ff72 	bl	800095c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <HAL_UART_MspInit+0x128>)
 8000a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7c:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <HAL_UART_MspInit+0x128>)
 8000a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a82:	6593      	str	r3, [r2, #88]	; 0x58
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_UART_MspInit+0x128>)
 8000a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <HAL_UART_MspInit+0x128>)
 8000a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a94:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <HAL_UART_MspInit+0x128>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_UART_MspInit+0x128>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac6:	f000 fe53 	bl	8001770 <HAL_GPIO_Init>
}
 8000aca:	bf00      	nop
 8000acc:	3770      	adds	r7, #112	; 0x70
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40013800 	.word	0x40013800
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40004400 	.word	0x40004400

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler+0x4>

08000af2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <UsageFault_Handler+0x4>

08000afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 fcfc 	bl	8001528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <SystemInit+0x20>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3e:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <SystemInit+0x20>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b5c:	480d      	ldr	r0, [pc, #52]	; (8000b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5e:	490e      	ldr	r1, [pc, #56]	; (8000b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b60:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <LoopForever+0xe>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b74:	4c0b      	ldr	r4, [pc, #44]	; (8000ba4 <LoopForever+0x16>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b82:	f7ff ffd7 	bl	8000b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b86:	f002 fe93 	bl	80038b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b8a:	f7ff fccf 	bl	800052c <main>

08000b8e <LoopForever>:

LoopForever:
    b LoopForever
 8000b8e:	e7fe      	b.n	8000b8e <LoopForever>
  ldr   r0, =_estack
 8000b90:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b9c:	08004f7c 	.word	0x08004f7c
  ldr r2, =_sbss
 8000ba0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ba4:	20000150 	.word	0x20000150

08000ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC1_2_IRQHandler>
	...

08000bac <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b0e4      	sub	sp, #400	; 0x190
 8000bb0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000bb2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000bb6:	22c6      	movs	r2, #198	; 0xc6
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fe9c 	bl	80038f8 <memset>
    astronode_app_msg_t answer = {0};
 8000bc0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000bc4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000bc8:	4618      	mov	r0, r3
 8000bca:	23c6      	movs	r3, #198	; 0xc6
 8000bcc:	461a      	mov	r2, r3
 8000bce:	2100      	movs	r1, #0
 8000bd0:	f002 fe92 	bl	80038f8 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8000bd4:	2310      	movs	r3, #16
 8000bd6:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8

    astronode_transport_send_receive(&request, &answer);
 8000bda:	463a      	mov	r2, r7
 8000bdc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fa8c 	bl	8001100 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8000be8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000bec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b90      	cmp	r3, #144	; 0x90
 8000bf4:	d103      	bne.n	8000bfe <astronode_send_cfg_sr+0x52>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <astronode_send_cfg_sr+0x64>)
 8000bf8:	f7ff fe1e 	bl	8000838 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8000bfc:	e002      	b.n	8000c04 <astronode_send_cfg_sr+0x58>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <astronode_send_cfg_sr+0x68>)
 8000c00:	f7ff fe1a 	bl	8000838 <send_debug_logs>
}
 8000c04:	bf00      	nop
 8000c06:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	08003d9c 	.word	0x08003d9c
 8000c14:	08003dd0 	.word	0x08003dd0

08000c18 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	b0e6      	sub	sp, #408	; 0x198
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4605      	mov	r5, r0
 8000c20:	460c      	mov	r4, r1
 8000c22:	4610      	mov	r0, r2
 8000c24:	4619      	mov	r1, r3
 8000c26:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000c2a:	f2a3 1391 	subw	r3, r3, #401	; 0x191
 8000c2e:	462a      	mov	r2, r5
 8000c30:	701a      	strb	r2, [r3, #0]
 8000c32:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000c36:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 8000c3a:	4622      	mov	r2, r4
 8000c3c:	701a      	strb	r2, [r3, #0]
 8000c3e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000c42:	f2a3 1393 	subw	r3, r3, #403	; 0x193
 8000c46:	4602      	mov	r2, r0
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000c4e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000c52:	460a      	mov	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8000c56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000c5a:	22c6      	movs	r2, #198	; 0xc6
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f002 fe4a 	bl	80038f8 <memset>
    astronode_app_msg_t answer = {0};
 8000c64:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000c68:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	23c6      	movs	r3, #198	; 0xc6
 8000c70:	461a      	mov	r2, r3
 8000c72:	2100      	movs	r1, #0
 8000c74:	f002 fe40 	bl	80038f8 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8000c78:	2305      	movs	r3, #5
 8000c7a:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8000c7e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000c82:	f2a3 1391 	subw	r3, r3, #401	; 0x191
 8000c86:	f993 2000 	ldrsb.w	r2, [r3]
 8000c8a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000c8e:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8000c9c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000ca0:	f2a3 1393 	subw	r3, r3, #403	; 0x193
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8000cae:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000cb2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	b2db      	uxtb	r3, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8000cc2:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8000cc6:	f997 21a8 	ldrsb.w	r2, [r7, #424]	; 0x1a8
 8000cca:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8000cd6:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8000ce2:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b25b      	sxtb	r3, r3
 8000cee:	b2db      	uxtb	r3, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8000cf0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

    request.payload_len = 3;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000cfa:	f107 0208 	add.w	r2, r7, #8
 8000cfe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f9fb 	bl	8001100 <astronode_transport_send_receive>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d10d      	bne.n	8000d2c <astronode_send_cfg_wr+0x114>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8000d10:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000d14:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b85      	cmp	r3, #133	; 0x85
 8000d1c:	d103      	bne.n	8000d26 <astronode_send_cfg_wr+0x10e>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8000d1e:	4806      	ldr	r0, [pc, #24]	; (8000d38 <astronode_send_cfg_wr+0x120>)
 8000d20:	f7ff fd8a 	bl	8000838 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
        }
    }
}
 8000d24:	e002      	b.n	8000d2c <astronode_send_cfg_wr+0x114>
            send_debug_logs("Failed to set the Astronode configuration.");
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <astronode_send_cfg_wr+0x124>)
 8000d28:	f7ff fd86 	bl	8000838 <send_debug_logs>
}
 8000d2c:	bf00      	nop
 8000d2e:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bdb0      	pop	{r4, r5, r7, pc}
 8000d36:	bf00      	nop
 8000d38:	08003e04 	.word	0x08003e04
 8000d3c:	08003e30 	.word	0x08003e30

08000d40 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
    if (ascii >= '0' && ascii <= '9')
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	2b2f      	cmp	r3, #47	; 0x2f
 8000d50:	d909      	bls.n	8000d66 <ascii_to_value+0x26>
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b39      	cmp	r3, #57	; 0x39
 8000d56:	d806      	bhi.n	8000d66 <ascii_to_value+0x26>
    {
        *p_value = ascii - '0';
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	3b30      	subs	r3, #48	; 0x30
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	701a      	strb	r2, [r3, #0]
        return true;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00d      	b.n	8000d82 <ascii_to_value+0x42>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2b40      	cmp	r3, #64	; 0x40
 8000d6a:	d909      	bls.n	8000d80 <ascii_to_value+0x40>
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	2b46      	cmp	r3, #70	; 0x46
 8000d70:	d806      	bhi.n	8000d80 <ascii_to_value+0x40>
    {
        *p_value = ascii - 'A' + 10;
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	3b37      	subs	r3, #55	; 0x37
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	701a      	strb	r2, [r3, #0]
        return true;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e000      	b.n	8000d82 <ascii_to_value+0x42>
    }
    else
    {
        return false;
 8000d80:	2300      	movs	r3, #0
    }
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b084      	sub	sp, #16
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	81fb      	strh	r3, [r7, #14]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8000d9c:	89fb      	ldrh	r3, [r7, #14]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	81fa      	strh	r2, [r7, #14]
 8000da2:	461a      	mov	r2, r3
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	2202      	movs	r2, #2
 8000daa:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db2:	2101      	movs	r1, #1
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fa07 	bl	80011c8 <calculate_crc>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	817b      	strh	r3, [r7, #10]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	1c58      	adds	r0, r3, #1
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8000dc8:	897a      	ldrh	r2, [r7, #10]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f000 f9fc 	bl	80011c8 <calculate_crc>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	817b      	strh	r3, [r7, #10]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8000dd4:	897b      	ldrh	r3, [r7, #10]
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	897b      	ldrh	r3, [r7, #10]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	b21b      	sxth	r3, r3
 8000de2:	4313      	orrs	r3, r2
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	817b      	strh	r3, [r7, #10]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	7818      	ldrb	r0, [r3, #0]
 8000dec:	89fb      	ldrh	r3, [r7, #14]
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	4413      	add	r3, r2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f000 fb28 	bl	8001448 <uint8_to_ascii_buffer>
    index += 2;
 8000df8:	89fb      	ldrh	r3, [r7, #14]
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	81fb      	strh	r3, [r7, #14]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	81bb      	strh	r3, [r7, #12]
 8000e02:	e00f      	b.n	8000e24 <astronode_create_request_transport+0x96>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8000e04:	89bb      	ldrh	r3, [r7, #12]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	7858      	ldrb	r0, [r3, #1]
 8000e0c:	89fb      	ldrh	r3, [r7, #14]
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	4413      	add	r3, r2
 8000e12:	4619      	mov	r1, r3
 8000e14:	f000 fb18 	bl	8001448 <uint8_to_ascii_buffer>
        index += 2;
 8000e18:	89fb      	ldrh	r3, [r7, #14]
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8000e1e:	89bb      	ldrh	r3, [r7, #12]
 8000e20:	3301      	adds	r3, #1
 8000e22:	81bb      	strh	r3, [r7, #12]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8000e2a:	89ba      	ldrh	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d3e9      	bcc.n	8000e04 <astronode_create_request_transport+0x76>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8000e30:	897b      	ldrh	r3, [r7, #10]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	b2d8      	uxtb	r0, r3
 8000e38:	89fb      	ldrh	r3, [r7, #14]
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f000 fb02 	bl	8001448 <uint8_to_ascii_buffer>
    index += 2;
 8000e44:	89fb      	ldrh	r3, [r7, #14]
 8000e46:	3302      	adds	r3, #2
 8000e48:	81fb      	strh	r3, [r7, #14]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8000e4a:	897b      	ldrh	r3, [r7, #10]
 8000e4c:	b2d8      	uxtb	r0, r3
 8000e4e:	89fb      	ldrh	r3, [r7, #14]
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4619      	mov	r1, r3
 8000e56:	f000 faf7 	bl	8001448 <uint8_to_ascii_buffer>
    index += 2;
 8000e5a:	89fb      	ldrh	r3, [r7, #14]
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	81fb      	strh	r3, [r7, #14]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	81fa      	strh	r2, [r7, #14]
 8000e66:	461a      	mov	r2, r3
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	701a      	strb	r2, [r3, #0]

    return index;
 8000e70:	89fb      	ldrh	r3, [r7, #14]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	460b      	mov	r3, r1
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	817b      	strh	r3, [r7, #10]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d004      	beq.n	8000e9c <astronode_decode_answer_transport+0x20>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8000e92:	4896      	ldr	r0, [pc, #600]	; (80010ec <astronode_decode_answer_transport+0x270>)
 8000e94:	f7ff fcd0 	bl	8000838 <send_debug_logs>
        return RS_FAILURE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	e123      	b.n	80010e4 <astronode_decode_answer_transport+0x268>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8000e9c:	897b      	ldrh	r3, [r7, #10]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <astronode_decode_answer_transport+0x32>
 8000ea8:	897b      	ldrh	r3, [r7, #10]
 8000eaa:	2b07      	cmp	r3, #7
 8000eac:	d804      	bhi.n	8000eb8 <astronode_decode_answer_transport+0x3c>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8000eae:	4890      	ldr	r0, [pc, #576]	; (80010f0 <astronode_decode_answer_transport+0x274>)
 8000eb0:	f7ff fcc2 	bl	8000838 <send_debug_logs>
        return RS_FAILURE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e115      	b.n	80010e4 <astronode_decode_answer_transport+0x268>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8000eb8:	897b      	ldrh	r3, [r7, #10]
 8000eba:	3b08      	subs	r3, #8
 8000ebc:	0fda      	lsrs	r2, r3, #31
 8000ebe:	4413      	add	r3, r2
 8000ec0:	105b      	asrs	r3, r3, #1
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8000eca:	897b      	ldrh	r3, [r7, #10]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d004      	beq.n	8000ee2 <astronode_decode_answer_transport+0x66>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8000ed8:	4886      	ldr	r0, [pc, #536]	; (80010f4 <astronode_decode_answer_transport+0x278>)
 8000eda:	f7ff fcad 	bl	8000838 <send_debug_logs>
        return RS_FAILURE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e100      	b.n	80010e4 <astronode_decode_answer_transport+0x268>
    }

    uint8_t nibble_high = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	75fb      	strb	r3, [r7, #23]
    uint8_t nibble_low = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	75bb      	strb	r3, [r7, #22]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3301      	adds	r3, #1
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	f107 0217 	add.w	r2, r7, #23
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff22 	bl	8000d40 <ascii_to_value>
 8000efc:	4603      	mov	r3, r0
 8000efe:	f083 0301 	eor.w	r3, r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10e      	bne.n	8000f26 <astronode_decode_answer_transport+0xaa>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	f107 0216 	add.w	r2, r7, #22
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff13 	bl	8000d40 <ascii_to_value>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f083 0301 	eor.w	r3, r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d004      	beq.n	8000f30 <astronode_decode_answer_transport+0xb4>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8000f26:	4874      	ldr	r0, [pc, #464]	; (80010f8 <astronode_decode_answer_transport+0x27c>)
 8000f28:	f7ff fc86 	bl	8000838 <send_debug_logs>
        return RS_FAILURE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e0d9      	b.n	80010e4 <astronode_decode_answer_transport+0x268>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8000f30:	7dfb      	ldrb	r3, [r7, #23]
 8000f32:	011b      	lsls	r3, r3, #4
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	7dbb      	ldrb	r3, [r7, #22]
 8000f38:	4413      	add	r3, r2
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8000f40:	2303      	movs	r3, #3
 8000f42:	83fb      	strh	r3, [r7, #30]
 8000f44:	2300      	movs	r3, #0
 8000f46:	83bb      	strh	r3, [r7, #28]
 8000f48:	e035      	b.n	8000fb6 <astronode_decode_answer_transport+0x13a>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8000f4a:	8bfb      	ldrh	r3, [r7, #30]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	f107 0217 	add.w	r2, r7, #23
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fef1 	bl	8000d40 <ascii_to_value>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	f083 0301 	eor.w	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d110      	bne.n	8000f8c <astronode_decode_answer_transport+0x110>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8000f6a:	8bfb      	ldrh	r3, [r7, #30]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	4413      	add	r3, r2
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	f107 0216 	add.w	r2, r7, #22
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fee0 	bl	8000d40 <ascii_to_value>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f083 0301 	eor.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d004      	beq.n	8000f96 <astronode_decode_answer_transport+0x11a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8000f8c:	485a      	ldr	r0, [pc, #360]	; (80010f8 <astronode_decode_answer_transport+0x27c>)
 8000f8e:	f7ff fc53 	bl	8000838 <send_debug_logs>
            return RS_FAILURE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e0a6      	b.n	80010e4 <astronode_decode_answer_transport+0x268>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8000f96:	7dfb      	ldrb	r3, [r7, #23]
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	b2d9      	uxtb	r1, r3
 8000f9c:	7dba      	ldrb	r2, [r7, #22]
 8000f9e:	8bbb      	ldrh	r3, [r7, #28]
 8000fa0:	1c58      	adds	r0, r3, #1
 8000fa2:	83b8      	strh	r0, [r7, #28]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	188b      	adds	r3, r1, r2
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4403      	add	r3, r0
 8000fae:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8000fb0:	8bfb      	ldrh	r3, [r7, #30]
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	83fb      	strh	r3, [r7, #30]
 8000fb6:	8bfa      	ldrh	r2, [r7, #30]
 8000fb8:	897b      	ldrh	r3, [r7, #10]
 8000fba:	3b05      	subs	r3, #5
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	dbc4      	blt.n	8000f4a <astronode_decode_answer_transport+0xce>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f8fd 	bl	80011c8 <calculate_crc>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	837b      	strh	r3, [r7, #26]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	1c58      	adds	r0, r3, #1
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8000fdc:	8b7a      	ldrh	r2, [r7, #26]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f000 f8f2 	bl	80011c8 <calculate_crc>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	837b      	strh	r3, [r7, #26]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8000fe8:	8b7b      	ldrh	r3, [r7, #26]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	8b7b      	ldrh	r3, [r7, #26]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	837b      	strh	r3, [r7, #26]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8000ffc:	897b      	ldrh	r3, [r7, #10]
 8000ffe:	3b05      	subs	r3, #5
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	f107 0217 	add.w	r2, r7, #23
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fe97 	bl	8000d40 <ascii_to_value>
 8001012:	4603      	mov	r3, r0
 8001014:	f083 0301 	eor.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d110      	bne.n	8001040 <astronode_decode_answer_transport+0x1c4>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 800101e:	897b      	ldrh	r3, [r7, #10]
 8001020:	3b04      	subs	r3, #4
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4413      	add	r3, r2
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	f107 0216 	add.w	r2, r7, #22
 800102c:	4611      	mov	r1, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fe86 	bl	8000d40 <ascii_to_value>
 8001034:	4603      	mov	r3, r0
 8001036:	f083 0301 	eor.w	r3, r3, #1
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d004      	beq.n	800104a <astronode_decode_answer_transport+0x1ce>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001040:	482d      	ldr	r0, [pc, #180]	; (80010f8 <astronode_decode_answer_transport+0x27c>)
 8001042:	f7ff fbf9 	bl	8000838 <send_debug_logs>
        return RS_FAILURE;
 8001046:	2300      	movs	r3, #0
 8001048:	e04c      	b.n	80010e4 <astronode_decode_answer_transport+0x268>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800104a:	7dfb      	ldrb	r3, [r7, #23]
 800104c:	b29b      	uxth	r3, r3
 800104e:	031b      	lsls	r3, r3, #12
 8001050:	b29a      	uxth	r2, r3
 8001052:	7dbb      	ldrb	r3, [r7, #22]
 8001054:	b29b      	uxth	r3, r3
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b29b      	uxth	r3, r3
 800105a:	4413      	add	r3, r2
 800105c:	833b      	strh	r3, [r7, #24]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 800105e:	897b      	ldrh	r3, [r7, #10]
 8001060:	3b03      	subs	r3, #3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4413      	add	r3, r2
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	f107 0217 	add.w	r2, r7, #23
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fe66 	bl	8000d40 <ascii_to_value>
 8001074:	4603      	mov	r3, r0
 8001076:	f083 0301 	eor.w	r3, r3, #1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d110      	bne.n	80010a2 <astronode_decode_answer_transport+0x226>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8001080:	897b      	ldrh	r3, [r7, #10]
 8001082:	3b02      	subs	r3, #2
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	f107 0216 	add.w	r2, r7, #22
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fe55 	bl	8000d40 <ascii_to_value>
 8001096:	4603      	mov	r3, r0
 8001098:	f083 0301 	eor.w	r3, r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d004      	beq.n	80010ac <astronode_decode_answer_transport+0x230>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80010a2:	4815      	ldr	r0, [pc, #84]	; (80010f8 <astronode_decode_answer_transport+0x27c>)
 80010a4:	f7ff fbc8 	bl	8000838 <send_debug_logs>
        return RS_FAILURE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	e01b      	b.n	80010e4 <astronode_decode_answer_transport+0x268>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	7dbb      	ldrb	r3, [r7, #22]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4413      	add	r3, r2
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	8b3b      	ldrh	r3, [r7, #24]
 80010be:	4413      	add	r3, r2
 80010c0:	833b      	strh	r3, [r7, #24]

    if (crc_received != crc_calculated)
 80010c2:	8b3a      	ldrh	r2, [r7, #24]
 80010c4:	8b7b      	ldrh	r3, [r7, #26]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d004      	beq.n	80010d4 <astronode_decode_answer_transport+0x258>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 80010ca:	480c      	ldr	r0, [pc, #48]	; (80010fc <astronode_decode_answer_transport+0x280>)
 80010cc:	f7ff fbb4 	bl	8000838 <send_debug_logs>
        return RS_FAILURE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e007      	b.n	80010e4 <astronode_decode_answer_transport+0x268>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2bff      	cmp	r3, #255	; 0xff
 80010da:	d102      	bne.n	80010e2 <astronode_decode_answer_transport+0x266>
    {
        check_for_error(p_destination_message);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f8ad 	bl	800123c <check_for_error>
    }

    return RS_SUCCESS;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	0800485c 	.word	0x0800485c
 80010f0:	080048ac 	.word	0x080048ac
 80010f4:	080048fc 	.word	0x080048fc
 80010f8:	0800494c 	.word	0x0800494c
 80010fc:	08004998 	.word	0x08004998

08001100 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
 8001106:	af00      	add	r7, sp, #0
 8001108:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800110c:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8001110:	6018      	str	r0, [r3, #0]
 8001112:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001116:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800111a:	6019      	str	r1, [r3, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800111c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001120:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	3304      	adds	r3, #4
 800112a:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fbe1 	bl	80038f8 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8001136:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800113a:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	3304      	adds	r3, #4
 8001144:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fbd4 	bl	80038f8 <memset>
    uint16_t answer_length =  0;
 8001150:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001154:	f2a3 331e 	subw	r3, r3, #798	; 0x31e
 8001158:	2200      	movs	r2, #0
 800115a:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 800115c:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8001160:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001164:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8001168:	4611      	mov	r1, r2
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	f7ff fe0f 	bl	8000d8e <astronode_create_request_transport>
 8001170:	4603      	mov	r3, r0
 8001172:	f8a7 3326 	strh.w	r3, [r7, #806]	; 0x326

    send_astronode_request(request_transport, request_length);
 8001176:	f8b7 2326 	ldrh.w	r2, [r7, #806]	; 0x326
 800117a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fb9d 	bl	80008c0 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8001186:	f107 020a 	add.w	r2, r7, #10
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f8fb 	bl	800138c <receive_astronode_answer>
 8001196:	4603      	mov	r3, r0
 8001198:	2b01      	cmp	r3, #1
 800119a:	d10f      	bne.n	80011bc <astronode_transport_send_receive+0xbc>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 800119c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80011a0:	f2a3 331e 	subw	r3, r3, #798	; 0x31e
 80011a4:	8819      	ldrh	r1, [r3, #0]
 80011a6:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80011aa:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80011ae:	f107 000c 	add.w	r0, r7, #12
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	f7ff fe62 	bl	8000e7c <astronode_decode_answer_transport>
 80011b8:	4603      	mov	r3, r0
 80011ba:	e000      	b.n	80011be <astronode_transport_send_receive+0xbe>
    }
    else
    {
        return RS_FAILURE;
 80011bc:	2300      	movs	r3, #0
    }
}
 80011be:	4618      	mov	r0, r3
 80011c0:	f507 774a 	add.w	r7, r7, #808	; 0x328
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
 80011d4:	4613      	mov	r3, r2
 80011d6:	803b      	strh	r3, [r7, #0]
    uint16_t crc = init_value;
 80011d8:	883b      	ldrh	r3, [r7, #0]
 80011da:	81fb      	strh	r3, [r7, #14]

    while (data_len--)
 80011dc:	e021      	b.n	8001222 <calculate_crc+0x5a>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 80011de:	89fb      	ldrh	r3, [r7, #14]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	1c59      	adds	r1, r3, #1
 80011e8:	6079      	str	r1, [r7, #4]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	4053      	eors	r3, r2
 80011f0:	81bb      	strh	r3, [r7, #12]
        x ^= x >> 4;
 80011f2:	89bb      	ldrh	r3, [r7, #12]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	89bb      	ldrh	r3, [r7, #12]
 80011fa:	4053      	eors	r3, r2
 80011fc:	81bb      	strh	r3, [r7, #12]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 80011fe:	89fb      	ldrh	r3, [r7, #14]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	89bb      	ldrh	r3, [r7, #12]
 8001206:	031b      	lsls	r3, r3, #12
 8001208:	b21b      	sxth	r3, r3
 800120a:	4053      	eors	r3, r2
 800120c:	b21a      	sxth	r2, r3
 800120e:	89bb      	ldrh	r3, [r7, #12]
 8001210:	015b      	lsls	r3, r3, #5
 8001212:	b21b      	sxth	r3, r3
 8001214:	4053      	eors	r3, r2
 8001216:	b21a      	sxth	r2, r3
 8001218:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800121c:	4053      	eors	r3, r2
 800121e:	b21b      	sxth	r3, r3
 8001220:	81fb      	strh	r3, [r7, #14]
    while (data_len--)
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	807a      	strh	r2, [r7, #2]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1d8      	bne.n	80011de <calculate_crc+0x16>
    }
    return crc;
 800122c:	89fb      	ldrh	r3, [r7, #14]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	785b      	ldrb	r3, [r3, #1]
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	789b      	ldrb	r3, [r3, #2]
 800124e:	b29b      	uxth	r3, r3
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b29b      	uxth	r3, r3
 8001254:	4413      	add	r3, r2
 8001256:	81fb      	strh	r3, [r7, #14]

    switch (error_code)
 8001258:	89fb      	ldrh	r3, [r7, #14]
 800125a:	f244 6201 	movw	r2, #17921	; 0x4601
 800125e:	4293      	cmp	r3, r2
 8001260:	d06f      	beq.n	8001342 <check_for_error+0x106>
 8001262:	f244 6201 	movw	r2, #17921	; 0x4601
 8001266:	4293      	cmp	r3, r2
 8001268:	dc6f      	bgt.n	800134a <check_for_error+0x10e>
 800126a:	f244 5201 	movw	r2, #17665	; 0x4501
 800126e:	4293      	cmp	r3, r2
 8001270:	d063      	beq.n	800133a <check_for_error+0xfe>
 8001272:	f244 5201 	movw	r2, #17665	; 0x4501
 8001276:	4293      	cmp	r3, r2
 8001278:	dc67      	bgt.n	800134a <check_for_error+0x10e>
 800127a:	f243 5201 	movw	r2, #13569	; 0x3501
 800127e:	4293      	cmp	r3, r2
 8001280:	d057      	beq.n	8001332 <check_for_error+0xf6>
 8001282:	f243 5201 	movw	r2, #13569	; 0x3501
 8001286:	4293      	cmp	r3, r2
 8001288:	dc5f      	bgt.n	800134a <check_for_error+0x10e>
 800128a:	f242 6201 	movw	r2, #9729	; 0x2601
 800128e:	4293      	cmp	r3, r2
 8001290:	d04b      	beq.n	800132a <check_for_error+0xee>
 8001292:	f242 6201 	movw	r2, #9729	; 0x2601
 8001296:	4293      	cmp	r3, r2
 8001298:	dc57      	bgt.n	800134a <check_for_error+0x10e>
 800129a:	f242 5211 	movw	r2, #9489	; 0x2511
 800129e:	4293      	cmp	r3, r2
 80012a0:	d03f      	beq.n	8001322 <check_for_error+0xe6>
 80012a2:	f242 5211 	movw	r2, #9489	; 0x2511
 80012a6:	4293      	cmp	r3, r2
 80012a8:	dc4f      	bgt.n	800134a <check_for_error+0x10e>
 80012aa:	f242 5201 	movw	r2, #9473	; 0x2501
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d033      	beq.n	800131a <check_for_error+0xde>
 80012b2:	f242 5201 	movw	r2, #9473	; 0x2501
 80012b6:	4293      	cmp	r3, r2
 80012b8:	dc47      	bgt.n	800134a <check_for_error+0x10e>
 80012ba:	f240 6211 	movw	r2, #1553	; 0x611
 80012be:	4293      	cmp	r3, r2
 80012c0:	d027      	beq.n	8001312 <check_for_error+0xd6>
 80012c2:	f240 6211 	movw	r2, #1553	; 0x611
 80012c6:	4293      	cmp	r3, r2
 80012c8:	dc3f      	bgt.n	800134a <check_for_error+0x10e>
 80012ca:	f240 6201 	movw	r2, #1537	; 0x601
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01b      	beq.n	800130a <check_for_error+0xce>
 80012d2:	f240 6201 	movw	r2, #1537	; 0x601
 80012d6:	4293      	cmp	r3, r2
 80012d8:	dc37      	bgt.n	800134a <check_for_error+0x10e>
 80012da:	f240 1221 	movw	r2, #289	; 0x121
 80012de:	4293      	cmp	r3, r2
 80012e0:	d00f      	beq.n	8001302 <check_for_error+0xc6>
 80012e2:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80012e6:	da30      	bge.n	800134a <check_for_error+0x10e>
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d002      	beq.n	80012f2 <check_for_error+0xb6>
 80012ec:	2b11      	cmp	r3, #17
 80012ee:	d004      	beq.n	80012fa <check_for_error+0xbe>
 80012f0:	e02b      	b.n	800134a <check_for_error+0x10e>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 80012f2:	481a      	ldr	r0, [pc, #104]	; (800135c <check_for_error+0x120>)
 80012f4:	f7ff faa0 	bl	8000838 <send_debug_logs>
            break;
 80012f8:	e02b      	b.n	8001352 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 80012fa:	4819      	ldr	r0, [pc, #100]	; (8001360 <check_for_error+0x124>)
 80012fc:	f7ff fa9c 	bl	8000838 <send_debug_logs>
            break;
 8001300:	e027      	b.n	8001352 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8001302:	4818      	ldr	r0, [pc, #96]	; (8001364 <check_for_error+0x128>)
 8001304:	f7ff fa98 	bl	8000838 <send_debug_logs>
            break;
 8001308:	e023      	b.n	8001352 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 800130a:	4817      	ldr	r0, [pc, #92]	; (8001368 <check_for_error+0x12c>)
 800130c:	f7ff fa94 	bl	8000838 <send_debug_logs>
            break;
 8001310:	e01f      	b.n	8001352 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8001312:	4816      	ldr	r0, [pc, #88]	; (800136c <check_for_error+0x130>)
 8001314:	f7ff fa90 	bl	8000838 <send_debug_logs>
            break;
 8001318:	e01b      	b.n	8001352 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 800131a:	4815      	ldr	r0, [pc, #84]	; (8001370 <check_for_error+0x134>)
 800131c:	f7ff fa8c 	bl	8000838 <send_debug_logs>
            break;
 8001320:	e017      	b.n	8001352 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8001322:	4814      	ldr	r0, [pc, #80]	; (8001374 <check_for_error+0x138>)
 8001324:	f7ff fa88 	bl	8000838 <send_debug_logs>
            break;
 8001328:	e013      	b.n	8001352 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 800132a:	4813      	ldr	r0, [pc, #76]	; (8001378 <check_for_error+0x13c>)
 800132c:	f7ff fa84 	bl	8000838 <send_debug_logs>
            break;
 8001330:	e00f      	b.n	8001352 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8001332:	4812      	ldr	r0, [pc, #72]	; (800137c <check_for_error+0x140>)
 8001334:	f7ff fa80 	bl	8000838 <send_debug_logs>
            break;
 8001338:	e00b      	b.n	8001352 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800133a:	4811      	ldr	r0, [pc, #68]	; (8001380 <check_for_error+0x144>)
 800133c:	f7ff fa7c 	bl	8000838 <send_debug_logs>
            break;
 8001340:	e007      	b.n	8001352 <check_for_error+0x116>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8001342:	4810      	ldr	r0, [pc, #64]	; (8001384 <check_for_error+0x148>)
 8001344:	f7ff fa78 	bl	8000838 <send_debug_logs>
            break;
 8001348:	e003      	b.n	8001352 <check_for_error+0x116>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 800134a:	480f      	ldr	r0, [pc, #60]	; (8001388 <check_for_error+0x14c>)
 800134c:	f7ff fa74 	bl	8000838 <send_debug_logs>
            break;
 8001350:	bf00      	nop
    }
}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	080049dc 	.word	0x080049dc
 8001360:	08004a28 	.word	0x08004a28
 8001364:	08004a8c 	.word	0x08004a8c
 8001368:	08004ac4 	.word	0x08004ac4
 800136c:	08004b68 	.word	0x08004b68
 8001370:	08004bd0 	.word	0x08004bd0
 8001374:	08004c30 	.word	0x08004c30
 8001378:	08004cbc 	.word	0x08004cbc
 800137c:	08004d1c 	.word	0x08004d1c
 8001380:	08004dc8 	.word	0x08004dc8
 8001384:	08004e14 	.word	0x08004e14
 8001388:	08004e5c 	.word	0x08004e5c

0800138c <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]
    uint16_t length = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	82fb      	strh	r3, [r7, #22]
    uint32_t timeout_answer_received = get_systick();
 800139e:	f7ff faab 	bl	80008f8 <get_systick>
 80013a2:	4603      	mov	r3, r0
 80013a4:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 80013a6:	2300      	movs	r3, #0
 80013a8:	757b      	strb	r3, [r7, #21]

    while (is_answer_received == false)
 80013aa:	e036      	b.n	800141a <receive_astronode_answer+0x8e>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 80013ac:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80013b0:	6938      	ldr	r0, [r7, #16]
 80013b2:	f7ff faa8 	bl	8000906 <is_systick_timeout_over>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d004      	beq.n	80013c6 <receive_astronode_answer+0x3a>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 80013bc:	481f      	ldr	r0, [pc, #124]	; (800143c <receive_astronode_answer+0xb0>)
 80013be:	f7ff fa3b 	bl	8000838 <send_debug_logs>
            return RS_FAILURE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e036      	b.n	8001434 <receive_astronode_answer+0xa8>
        }
        if (is_astronode_character_received(&rx_char))
 80013c6:	f107 030f 	add.w	r3, r7, #15
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fab0 	bl	8000930 <is_astronode_character_received>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d021      	beq.n	800141a <receive_astronode_answer+0x8e>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d103      	bne.n	80013e4 <receive_astronode_answer+0x58>
            {
                is_answer_received = false;
 80013dc:	2300      	movs	r3, #0
 80013de:	757b      	strb	r3, [r7, #21]
                length = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	82fb      	strh	r3, [r7, #22]
            }

            p_rx_buffer[length] = rx_char;
 80013e4:	8afb      	ldrh	r3, [r7, #22]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	701a      	strb	r2, [r3, #0]
            length++;
 80013ee:	8afb      	ldrh	r3, [r7, #22]
 80013f0:	3301      	adds	r3, #1
 80013f2:	82fb      	strh	r3, [r7, #22]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80013f4:	8afb      	ldrh	r3, [r7, #22]
 80013f6:	2bb2      	cmp	r3, #178	; 0xb2
 80013f8:	d904      	bls.n	8001404 <receive_astronode_answer+0x78>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 80013fa:	4811      	ldr	r0, [pc, #68]	; (8001440 <receive_astronode_answer+0xb4>)
 80013fc:	f7ff fa1c 	bl	8000838 <send_debug_logs>
                return RS_FAILURE;
 8001400:	2300      	movs	r3, #0
 8001402:	e017      	b.n	8001434 <receive_astronode_answer+0xa8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b03      	cmp	r3, #3
 8001408:	d107      	bne.n	800141a <receive_astronode_answer+0x8e>
            {
                if (length > 1)
 800140a:	8afb      	ldrh	r3, [r7, #22]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d904      	bls.n	800141a <receive_astronode_answer+0x8e>
                {
                    *p_buffer_length = length;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	8afa      	ldrh	r2, [r7, #22]
 8001414:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 8001416:	2301      	movs	r3, #1
 8001418:	757b      	strb	r3, [r7, #21]
    while (is_answer_received == false)
 800141a:	7d7b      	ldrb	r3, [r7, #21]
 800141c:	f083 0301 	eor.w	r3, r3, #1
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1c2      	bne.n	80013ac <receive_astronode_answer+0x20>
                }
            }
        }
    }

    send_debug_logs("Message received from the Astronode <-- ");
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <receive_astronode_answer+0xb8>)
 8001428:	f7ff fa06 	bl	8000838 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fa03 	bl	8000838 <send_debug_logs>

    return RS_SUCCESS;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	08004e80 	.word	0x08004e80
 8001440:	08004ea4 	.word	0x08004ea4
 8001444:	08004ef0 	.word	0x08004ef0

08001448 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	091b      	lsrs	r3, r3, #4
 8001458:	b2db      	uxtb	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <uint8_to_ascii_buffer+0x38>)
 800145e:	5c9a      	ldrb	r2, [r3, r2]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 020f 	and.w	r2, r3, #15
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	4904      	ldr	r1, [pc, #16]	; (8001480 <uint8_to_ascii_buffer+0x38>)
 8001470:	5c8a      	ldrb	r2, [r1, r2]
 8001472:	701a      	strb	r2, [r3, #0]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	08004f34 	.word	0x08004f34

08001484 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148e:	2003      	movs	r0, #3
 8001490:	f000 f93c 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001494:	2000      	movs	r0, #0
 8001496:	f000 f80d 	bl	80014b4 <HAL_InitTick>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	e001      	b.n	80014aa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014a6:	f7ff fa5f 	bl	8000968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014aa:	79fb      	ldrb	r3, [r7, #7]

}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_InitTick+0x68>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d022      	beq.n	800150e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_InitTick+0x6c>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_InitTick+0x68>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f93a 	bl	8001756 <HAL_SYSTICK_Config>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10f      	bne.n	8001508 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	d809      	bhi.n	8001502 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ee:	2200      	movs	r2, #0
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	f04f 30ff 	mov.w	r0, #4294967295
 80014f6:	f000 f914 	bl	8001722 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <HAL_InitTick+0x70>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	e007      	b.n	8001512 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	e004      	b.n	8001512 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
 800150c:	e001      	b.n	8001512 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000008 	.word	0x20000008
 8001520:	20000000 	.word	0x20000000
 8001524:	20000004 	.word	0x20000004

08001528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_IncTick+0x1c>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_IncTick+0x20>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4413      	add	r3, r2
 8001536:	4a03      	ldr	r2, [pc, #12]	; (8001544 <HAL_IncTick+0x1c>)
 8001538:	6013      	str	r3, [r2, #0]
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	2000014c 	.word	0x2000014c
 8001548:	20000008 	.word	0x20000008

0800154c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_GetTick+0x14>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	2000014c 	.word	0x2000014c

08001564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff ffee 	bl	800154c <HAL_GetTick>
 8001570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157c:	d004      	beq.n	8001588 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_Delay+0x40>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	4413      	add	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001588:	bf00      	nop
 800158a:	f7ff ffdf 	bl	800154c <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	429a      	cmp	r2, r3
 8001598:	d8f7      	bhi.n	800158a <HAL_Delay+0x26>
  {
  }
}
 800159a:	bf00      	nop
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000008 	.word	0x20000008

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	; (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff8e 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff47 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001730:	f7ff ff5e 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 8001734:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f7ff ff90 	bl	8001660 <NVIC_EncodePriority>
 8001740:	4602      	mov	r2, r0
 8001742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff5f 	bl	800160c <__NVIC_SetPriority>
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ffb2 	bl	80016c8 <SysTick_Config>
 8001764:	4603      	mov	r3, r0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800177e:	e15a      	b.n	8001a36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2101      	movs	r1, #1
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	4013      	ands	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 814c 	beq.w	8001a30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d005      	beq.n	80017b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d130      	bne.n	8001812 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017e6:	2201      	movs	r2, #1
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	f003 0201 	and.w	r2, r3, #1
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b03      	cmp	r3, #3
 800181c:	d017      	beq.n	800184e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d123      	bne.n	80018a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	08da      	lsrs	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3208      	adds	r2, #8
 8001862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	220f      	movs	r2, #15
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	691a      	ldr	r2, [r3, #16]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	08da      	lsrs	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3208      	adds	r2, #8
 800189c:	6939      	ldr	r1, [r7, #16]
 800189e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	2203      	movs	r2, #3
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0203 	and.w	r2, r3, #3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80a6 	beq.w	8001a30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e4:	4b5b      	ldr	r3, [pc, #364]	; (8001a54 <HAL_GPIO_Init+0x2e4>)
 80018e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e8:	4a5a      	ldr	r2, [pc, #360]	; (8001a54 <HAL_GPIO_Init+0x2e4>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6613      	str	r3, [r2, #96]	; 0x60
 80018f0:	4b58      	ldr	r3, [pc, #352]	; (8001a54 <HAL_GPIO_Init+0x2e4>)
 80018f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018fc:	4a56      	ldr	r2, [pc, #344]	; (8001a58 <HAL_GPIO_Init+0x2e8>)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001926:	d01f      	beq.n	8001968 <HAL_GPIO_Init+0x1f8>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a4c      	ldr	r2, [pc, #304]	; (8001a5c <HAL_GPIO_Init+0x2ec>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d019      	beq.n	8001964 <HAL_GPIO_Init+0x1f4>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a4b      	ldr	r2, [pc, #300]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d013      	beq.n	8001960 <HAL_GPIO_Init+0x1f0>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a4a      	ldr	r2, [pc, #296]	; (8001a64 <HAL_GPIO_Init+0x2f4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00d      	beq.n	800195c <HAL_GPIO_Init+0x1ec>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a49      	ldr	r2, [pc, #292]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d007      	beq.n	8001958 <HAL_GPIO_Init+0x1e8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a48      	ldr	r2, [pc, #288]	; (8001a6c <HAL_GPIO_Init+0x2fc>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d101      	bne.n	8001954 <HAL_GPIO_Init+0x1e4>
 8001950:	2305      	movs	r3, #5
 8001952:	e00a      	b.n	800196a <HAL_GPIO_Init+0x1fa>
 8001954:	2306      	movs	r3, #6
 8001956:	e008      	b.n	800196a <HAL_GPIO_Init+0x1fa>
 8001958:	2304      	movs	r3, #4
 800195a:	e006      	b.n	800196a <HAL_GPIO_Init+0x1fa>
 800195c:	2303      	movs	r3, #3
 800195e:	e004      	b.n	800196a <HAL_GPIO_Init+0x1fa>
 8001960:	2302      	movs	r3, #2
 8001962:	e002      	b.n	800196a <HAL_GPIO_Init+0x1fa>
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_GPIO_Init+0x1fa>
 8001968:	2300      	movs	r3, #0
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	f002 0203 	and.w	r2, r2, #3
 8001970:	0092      	lsls	r2, r2, #2
 8001972:	4093      	lsls	r3, r2
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800197a:	4937      	ldr	r1, [pc, #220]	; (8001a58 <HAL_GPIO_Init+0x2e8>)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_GPIO_Init+0x300>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019ac:	4a30      	ldr	r2, [pc, #192]	; (8001a70 <HAL_GPIO_Init+0x300>)
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019b2:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <HAL_GPIO_Init+0x300>)
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019d6:	4a26      	ldr	r2, [pc, #152]	; (8001a70 <HAL_GPIO_Init+0x300>)
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <HAL_GPIO_Init+0x300>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <HAL_GPIO_Init+0x300>)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <HAL_GPIO_Init+0x300>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a2a:	4a11      	ldr	r2, [pc, #68]	; (8001a70 <HAL_GPIO_Init+0x300>)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f47f ae9d 	bne.w	8001780 <HAL_GPIO_Init+0x10>
  }
}
 8001a46:	bf00      	nop
 8001a48:	bf00      	nop
 8001a4a:	371c      	adds	r7, #28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010000 	.word	0x40010000
 8001a5c:	48000400 	.word	0x48000400
 8001a60:	48000800 	.word	0x48000800
 8001a64:	48000c00 	.word	0x48000c00
 8001a68:	48001000 	.word	0x48001000
 8001a6c:	48001400 	.word	0x48001400
 8001a70:	40010400 	.word	0x40010400

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d141      	bne.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ab2:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001abe:	d131      	bne.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ac0:	4b47      	ldr	r3, [pc, #284]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ac6:	4a46      	ldr	r2, [pc, #280]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001acc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad0:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ad8:	4a41      	ldr	r2, [pc, #260]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ade:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ae0:	4b40      	ldr	r3, [pc, #256]	; (8001be4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2232      	movs	r2, #50	; 0x32
 8001ae6:	fb02 f303 	mul.w	r3, r2, r3
 8001aea:	4a3f      	ldr	r2, [pc, #252]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001aec:	fba2 2303 	umull	r2, r3, r2, r3
 8001af0:	0c9b      	lsrs	r3, r3, #18
 8001af2:	3301      	adds	r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001af6:	e002      	b.n	8001afe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001afe:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b0a:	d102      	bne.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f2      	bne.n	8001af8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b12:	4b33      	ldr	r3, [pc, #204]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1e:	d158      	bne.n	8001bd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e057      	b.n	8001bd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b24:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b2a:	4a2d      	ldr	r2, [pc, #180]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b34:	e04d      	b.n	8001bd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b3c:	d141      	bne.n	8001bc2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b3e:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4a:	d131      	bne.n	8001bb0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b4c:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b52:	4a23      	ldr	r2, [pc, #140]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b5c:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b64:	4a1e      	ldr	r2, [pc, #120]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2232      	movs	r2, #50	; 0x32
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b78:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7c:	0c9b      	lsrs	r3, r3, #18
 8001b7e:	3301      	adds	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b82:	e002      	b.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b96:	d102      	bne.n	8001b9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f2      	bne.n	8001b84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001baa:	d112      	bne.n	8001bd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e011      	b.n	8001bd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001bc0:	e007      	b.n	8001bd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	40007000 	.word	0x40007000
 8001be4:	20000000 	.word	0x20000000
 8001be8:	431bde83 	.word	0x431bde83

08001bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e306      	b.n	800220c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d075      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0a:	4b97      	ldr	r3, [pc, #604]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c14:	4b94      	ldr	r3, [pc, #592]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	2b0c      	cmp	r3, #12
 8001c22:	d102      	bne.n	8001c2a <HAL_RCC_OscConfig+0x3e>
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d002      	beq.n	8001c30 <HAL_RCC_OscConfig+0x44>
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d10b      	bne.n	8001c48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c30:	4b8d      	ldr	r3, [pc, #564]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d05b      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x108>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d157      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e2e1      	b.n	800220c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c50:	d106      	bne.n	8001c60 <HAL_RCC_OscConfig+0x74>
 8001c52:	4b85      	ldr	r3, [pc, #532]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a84      	ldr	r2, [pc, #528]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e01d      	b.n	8001c9c <HAL_RCC_OscConfig+0xb0>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x98>
 8001c6a:	4b7f      	ldr	r3, [pc, #508]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a7e      	ldr	r2, [pc, #504]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b7c      	ldr	r3, [pc, #496]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a7b      	ldr	r2, [pc, #492]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e00b      	b.n	8001c9c <HAL_RCC_OscConfig+0xb0>
 8001c84:	4b78      	ldr	r3, [pc, #480]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a77      	ldr	r2, [pc, #476]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b75      	ldr	r3, [pc, #468]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a74      	ldr	r2, [pc, #464]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d013      	beq.n	8001ccc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fc52 	bl	800154c <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff fc4e 	bl	800154c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	; 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e2a6      	b.n	800220c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cbe:	4b6a      	ldr	r3, [pc, #424]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0xc0>
 8001cca:	e014      	b.n	8001cf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fc3e 	bl	800154c <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd4:	f7ff fc3a 	bl	800154c <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b64      	cmp	r3, #100	; 0x64
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e292      	b.n	800220c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce6:	4b60      	ldr	r3, [pc, #384]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0xe8>
 8001cf2:	e000      	b.n	8001cf6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d075      	beq.n	8001dee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d02:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d0c:	4b56      	ldr	r3, [pc, #344]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b0c      	cmp	r3, #12
 8001d1a:	d102      	bne.n	8001d22 <HAL_RCC_OscConfig+0x136>
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d002      	beq.n	8001d28 <HAL_RCC_OscConfig+0x13c>
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d11f      	bne.n	8001d68 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d28:	4b4f      	ldr	r3, [pc, #316]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_OscConfig+0x154>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e265      	b.n	800220c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d40:	4b49      	ldr	r3, [pc, #292]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	061b      	lsls	r3, r3, #24
 8001d4e:	4946      	ldr	r1, [pc, #280]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d54:	4b45      	ldr	r3, [pc, #276]	; (8001e6c <HAL_RCC_OscConfig+0x280>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fbab 	bl	80014b4 <HAL_InitTick>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d043      	beq.n	8001dec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e251      	b.n	800220c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d023      	beq.n	8001db8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d70:	4b3d      	ldr	r3, [pc, #244]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a3c      	ldr	r2, [pc, #240]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fbe6 	bl	800154c <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d84:	f7ff fbe2 	bl	800154c <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e23a      	b.n	800220c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d96:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da2:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	061b      	lsls	r3, r3, #24
 8001db0:	492d      	ldr	r1, [pc, #180]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
 8001db6:	e01a      	b.n	8001dee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db8:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a2a      	ldr	r2, [pc, #168]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fbc2 	bl	800154c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dcc:	f7ff fbbe 	bl	800154c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e216      	b.n	800220c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dde:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x1e0>
 8001dea:	e000      	b.n	8001dee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d041      	beq.n	8001e7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d01c      	beq.n	8001e3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e08:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e12:	f7ff fb9b 	bl	800154c <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1a:	f7ff fb97 	bl	800154c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1ef      	b.n	800220c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0ef      	beq.n	8001e1a <HAL_RCC_OscConfig+0x22e>
 8001e3a:	e020      	b.n	8001e7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e42:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7ff fb7e 	bl	800154c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e52:	e00d      	b.n	8001e70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e54:	f7ff fb7a 	bl	800154c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d906      	bls.n	8001e70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1d2      	b.n	800220c <HAL_RCC_OscConfig+0x620>
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e70:	4b8c      	ldr	r3, [pc, #560]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1ea      	bne.n	8001e54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80a6 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e90:	4b84      	ldr	r3, [pc, #528]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2b4>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCC_OscConfig+0x2b6>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	4b7f      	ldr	r3, [pc, #508]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	4a7e      	ldr	r2, [pc, #504]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb2:	4b7c      	ldr	r3, [pc, #496]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec2:	4b79      	ldr	r3, [pc, #484]	; (80020a8 <HAL_RCC_OscConfig+0x4bc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d118      	bne.n	8001f00 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ece:	4b76      	ldr	r3, [pc, #472]	; (80020a8 <HAL_RCC_OscConfig+0x4bc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a75      	ldr	r2, [pc, #468]	; (80020a8 <HAL_RCC_OscConfig+0x4bc>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eda:	f7ff fb37 	bl	800154c <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee2:	f7ff fb33 	bl	800154c <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e18b      	b.n	800220c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef4:	4b6c      	ldr	r3, [pc, #432]	; (80020a8 <HAL_RCC_OscConfig+0x4bc>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d108      	bne.n	8001f1a <HAL_RCC_OscConfig+0x32e>
 8001f08:	4b66      	ldr	r3, [pc, #408]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0e:	4a65      	ldr	r2, [pc, #404]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f18:	e024      	b.n	8001f64 <HAL_RCC_OscConfig+0x378>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b05      	cmp	r3, #5
 8001f20:	d110      	bne.n	8001f44 <HAL_RCC_OscConfig+0x358>
 8001f22:	4b60      	ldr	r3, [pc, #384]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f28:	4a5e      	ldr	r2, [pc, #376]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f32:	4b5c      	ldr	r3, [pc, #368]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f38:	4a5a      	ldr	r2, [pc, #360]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f42:	e00f      	b.n	8001f64 <HAL_RCC_OscConfig+0x378>
 8001f44:	4b57      	ldr	r3, [pc, #348]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4a:	4a56      	ldr	r2, [pc, #344]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f54:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5a:	4a52      	ldr	r2, [pc, #328]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001f5c:	f023 0304 	bic.w	r3, r3, #4
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d016      	beq.n	8001f9a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7ff faee 	bl	800154c <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f7ff faea 	bl	800154c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e140      	b.n	800220c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8a:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ed      	beq.n	8001f74 <HAL_RCC_OscConfig+0x388>
 8001f98:	e015      	b.n	8001fc6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9a:	f7ff fad7 	bl	800154c <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa2:	f7ff fad3 	bl	800154c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e129      	b.n	800220c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1ed      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fc6:	7ffb      	ldrb	r3, [r7, #31]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fcc:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	4a34      	ldr	r2, [pc, #208]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d03c      	beq.n	800205e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01c      	beq.n	8002026 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ff2:	4a2c      	ldr	r2, [pc, #176]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7ff faa6 	bl	800154c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002004:	f7ff faa2 	bl	800154c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e0fa      	b.n	800220c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8002018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ef      	beq.n	8002004 <HAL_RCC_OscConfig+0x418>
 8002024:	e01b      	b.n	800205e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002026:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8002028:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800202c:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 800202e:	f023 0301 	bic.w	r3, r3, #1
 8002032:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002036:	f7ff fa89 	bl	800154c <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800203e:	f7ff fa85 	bl	800154c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e0dd      	b.n	800220c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8002052:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1ef      	bne.n	800203e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 80d1 	beq.w	800220a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b0c      	cmp	r3, #12
 8002072:	f000 808b 	beq.w	800218c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d15e      	bne.n	800213c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <HAL_RCC_OscConfig+0x4b8>)
 8002084:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208a:	f7ff fa5f 	bl	800154c <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002090:	e00c      	b.n	80020ac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002092:	f7ff fa5b 	bl	800154c <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d905      	bls.n	80020ac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e0b3      	b.n	800220c <HAL_RCC_OscConfig+0x620>
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ac:	4b59      	ldr	r3, [pc, #356]	; (8002214 <HAL_RCC_OscConfig+0x628>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1ec      	bne.n	8002092 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b8:	4b56      	ldr	r3, [pc, #344]	; (8002214 <HAL_RCC_OscConfig+0x628>)
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	4b56      	ldr	r3, [pc, #344]	; (8002218 <HAL_RCC_OscConfig+0x62c>)
 80020be:	4013      	ands	r3, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6a11      	ldr	r1, [r2, #32]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020c8:	3a01      	subs	r2, #1
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	4311      	orrs	r1, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80020d2:	0212      	lsls	r2, r2, #8
 80020d4:	4311      	orrs	r1, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020da:	0852      	lsrs	r2, r2, #1
 80020dc:	3a01      	subs	r2, #1
 80020de:	0552      	lsls	r2, r2, #21
 80020e0:	4311      	orrs	r1, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020e6:	0852      	lsrs	r2, r2, #1
 80020e8:	3a01      	subs	r2, #1
 80020ea:	0652      	lsls	r2, r2, #25
 80020ec:	4311      	orrs	r1, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020f2:	06d2      	lsls	r2, r2, #27
 80020f4:	430a      	orrs	r2, r1
 80020f6:	4947      	ldr	r1, [pc, #284]	; (8002214 <HAL_RCC_OscConfig+0x628>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fc:	4b45      	ldr	r3, [pc, #276]	; (8002214 <HAL_RCC_OscConfig+0x628>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a44      	ldr	r2, [pc, #272]	; (8002214 <HAL_RCC_OscConfig+0x628>)
 8002102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002106:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002108:	4b42      	ldr	r3, [pc, #264]	; (8002214 <HAL_RCC_OscConfig+0x628>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a41      	ldr	r2, [pc, #260]	; (8002214 <HAL_RCC_OscConfig+0x628>)
 800210e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002112:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff fa1a 	bl	800154c <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff fa16 	bl	800154c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e06e      	b.n	800220c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212e:	4b39      	ldr	r3, [pc, #228]	; (8002214 <HAL_RCC_OscConfig+0x628>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x530>
 800213a:	e066      	b.n	800220a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213c:	4b35      	ldr	r3, [pc, #212]	; (8002214 <HAL_RCC_OscConfig+0x628>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a34      	ldr	r2, [pc, #208]	; (8002214 <HAL_RCC_OscConfig+0x628>)
 8002142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002146:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <HAL_RCC_OscConfig+0x628>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4a31      	ldr	r2, [pc, #196]	; (8002214 <HAL_RCC_OscConfig+0x628>)
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002154:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <HAL_RCC_OscConfig+0x628>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a2e      	ldr	r2, [pc, #184]	; (8002214 <HAL_RCC_OscConfig+0x628>)
 800215a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800215e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002162:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7ff f9f2 	bl	800154c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7ff f9ee 	bl	800154c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e046      	b.n	800220c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800217e:	4b25      	ldr	r3, [pc, #148]	; (8002214 <HAL_RCC_OscConfig+0x628>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x580>
 800218a:	e03e      	b.n	800220a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e039      	b.n	800220c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002198:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <HAL_RCC_OscConfig+0x628>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d12c      	bne.n	8002206 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	3b01      	subs	r3, #1
 80021b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d123      	bne.n	8002206 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d11b      	bne.n	8002206 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d113      	bne.n	8002206 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	3b01      	subs	r3, #1
 80021ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d109      	bne.n	8002206 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	3b01      	subs	r3, #1
 8002200:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3720      	adds	r7, #32
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40021000 	.word	0x40021000
 8002218:	019f800c 	.word	0x019f800c

0800221c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e11e      	b.n	8002472 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002234:	4b91      	ldr	r3, [pc, #580]	; (800247c <HAL_RCC_ClockConfig+0x260>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d910      	bls.n	8002264 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b8e      	ldr	r3, [pc, #568]	; (800247c <HAL_RCC_ClockConfig+0x260>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 020f 	bic.w	r2, r3, #15
 800224a:	498c      	ldr	r1, [pc, #560]	; (800247c <HAL_RCC_ClockConfig+0x260>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b8a      	ldr	r3, [pc, #552]	; (800247c <HAL_RCC_ClockConfig+0x260>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e106      	b.n	8002472 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d073      	beq.n	8002358 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d129      	bne.n	80022cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002278:	4b81      	ldr	r3, [pc, #516]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0f4      	b.n	8002472 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002288:	f000 f99e 	bl	80025c8 <RCC_GetSysClockFreqFromPLLSource>
 800228c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4a7c      	ldr	r2, [pc, #496]	; (8002484 <HAL_RCC_ClockConfig+0x268>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d93f      	bls.n	8002316 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002296:	4b7a      	ldr	r3, [pc, #488]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d033      	beq.n	8002316 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d12f      	bne.n	8002316 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022b6:	4b72      	ldr	r3, [pc, #456]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022be:	4a70      	ldr	r2, [pc, #448]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 80022c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	e024      	b.n	8002316 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d4:	4b6a      	ldr	r3, [pc, #424]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0c6      	b.n	8002472 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e4:	4b66      	ldr	r3, [pc, #408]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0be      	b.n	8002472 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80022f4:	f000 f8ce 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4a61      	ldr	r2, [pc, #388]	; (8002484 <HAL_RCC_ClockConfig+0x268>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d909      	bls.n	8002316 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002302:	4b5f      	ldr	r3, [pc, #380]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800230a:	4a5d      	ldr	r2, [pc, #372]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 800230c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002310:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002316:	4b5a      	ldr	r3, [pc, #360]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f023 0203 	bic.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4957      	ldr	r1, [pc, #348]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 8002324:	4313      	orrs	r3, r2
 8002326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002328:	f7ff f910 	bl	800154c <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	e00a      	b.n	8002346 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002330:	f7ff f90c 	bl	800154c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	; 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e095      	b.n	8002472 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	4b4e      	ldr	r3, [pc, #312]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 020c 	and.w	r2, r3, #12
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	429a      	cmp	r2, r3
 8002356:	d1eb      	bne.n	8002330 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d023      	beq.n	80023ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002370:	4b43      	ldr	r3, [pc, #268]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	4a42      	ldr	r2, [pc, #264]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 8002376:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800237a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002388:	4b3d      	ldr	r3, [pc, #244]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002390:	4a3b      	ldr	r2, [pc, #236]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 8002392:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002396:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002398:	4b39      	ldr	r3, [pc, #228]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4936      	ldr	r1, [pc, #216]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
 80023aa:	e008      	b.n	80023be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b80      	cmp	r3, #128	; 0x80
 80023b0:	d105      	bne.n	80023be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023b2:	4b33      	ldr	r3, [pc, #204]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	4a32      	ldr	r2, [pc, #200]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 80023b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023be:	4b2f      	ldr	r3, [pc, #188]	; (800247c <HAL_RCC_ClockConfig+0x260>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d21d      	bcs.n	8002408 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023cc:	4b2b      	ldr	r3, [pc, #172]	; (800247c <HAL_RCC_ClockConfig+0x260>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 020f 	bic.w	r2, r3, #15
 80023d4:	4929      	ldr	r1, [pc, #164]	; (800247c <HAL_RCC_ClockConfig+0x260>)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	4313      	orrs	r3, r2
 80023da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023dc:	f7ff f8b6 	bl	800154c <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	f7ff f8b2 	bl	800154c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e03b      	b.n	8002472 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_RCC_ClockConfig+0x260>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d1ed      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002414:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4917      	ldr	r1, [pc, #92]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	490f      	ldr	r1, [pc, #60]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 8002442:	4313      	orrs	r3, r2
 8002444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002446:	f000 f825 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 800244a:	4602      	mov	r2, r0
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <HAL_RCC_ClockConfig+0x264>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	490c      	ldr	r1, [pc, #48]	; (8002488 <HAL_RCC_ClockConfig+0x26c>)
 8002458:	5ccb      	ldrb	r3, [r1, r3]
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	fa22 f303 	lsr.w	r3, r2, r3
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <HAL_RCC_ClockConfig+0x270>)
 8002464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_RCC_ClockConfig+0x274>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff f822 	bl	80014b4 <HAL_InitTick>
 8002470:	4603      	mov	r3, r0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40022000 	.word	0x40022000
 8002480:	40021000 	.word	0x40021000
 8002484:	04c4b400 	.word	0x04c4b400
 8002488:	08004f1c 	.word	0x08004f1c
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <HAL_RCC_GetSysClockFreq+0xb8>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d102      	bne.n	80024ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024a6:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	e047      	b.n	800253c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024ac:	4b27      	ldr	r3, [pc, #156]	; (800254c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d102      	bne.n	80024be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	e03e      	b.n	800253c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024be:	4b23      	ldr	r3, [pc, #140]	; (800254c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b0c      	cmp	r3, #12
 80024c8:	d136      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ca:	4b20      	ldr	r3, [pc, #128]	; (800254c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	3301      	adds	r3, #1
 80024e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d10c      	bne.n	8002502 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024e8:	4a1a      	ldr	r2, [pc, #104]	; (8002554 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f0:	4a16      	ldr	r2, [pc, #88]	; (800254c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024f2:	68d2      	ldr	r2, [r2, #12]
 80024f4:	0a12      	lsrs	r2, r2, #8
 80024f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	617b      	str	r3, [r7, #20]
      break;
 8002500:	e00c      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002502:	4a13      	ldr	r2, [pc, #76]	; (8002550 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	fbb2 f3f3 	udiv	r3, r2, r3
 800250a:	4a10      	ldr	r2, [pc, #64]	; (800254c <HAL_RCC_GetSysClockFreq+0xb8>)
 800250c:	68d2      	ldr	r2, [r2, #12]
 800250e:	0a12      	lsrs	r2, r2, #8
 8002510:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002514:	fb02 f303 	mul.w	r3, r2, r3
 8002518:	617b      	str	r3, [r7, #20]
      break;
 800251a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_GetSysClockFreq+0xb8>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	0e5b      	lsrs	r3, r3, #25
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	3301      	adds	r3, #1
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	fbb2 f3f3 	udiv	r3, r2, r3
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	e001      	b.n	800253c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800253c:	693b      	ldr	r3, [r7, #16]
}
 800253e:	4618      	mov	r0, r3
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	00f42400 	.word	0x00f42400
 8002554:	007a1200 	.word	0x007a1200

08002558 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <HAL_RCC_GetHCLKFreq+0x14>)
 800255e:	681b      	ldr	r3, [r3, #0]
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000000 	.word	0x20000000

08002570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002574:	f7ff fff0 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4904      	ldr	r1, [pc, #16]	; (8002598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	08004f2c 	.word	0x08004f2c

0800259c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025a0:	f7ff ffda 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	0adb      	lsrs	r3, r3, #11
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4904      	ldr	r1, [pc, #16]	; (80025c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	08004f2c 	.word	0x08004f2c

080025c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ce:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	3301      	adds	r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d10c      	bne.n	8002606 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ec:	4a17      	ldr	r2, [pc, #92]	; (800264c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025f6:	68d2      	ldr	r2, [r2, #12]
 80025f8:	0a12      	lsrs	r2, r2, #8
 80025fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025fe:	fb02 f303 	mul.w	r3, r2, r3
 8002602:	617b      	str	r3, [r7, #20]
    break;
 8002604:	e00c      	b.n	8002620 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002610:	68d2      	ldr	r2, [r2, #12]
 8002612:	0a12      	lsrs	r2, r2, #8
 8002614:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002618:	fb02 f303 	mul.w	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]
    break;
 800261e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	0e5b      	lsrs	r3, r3, #25
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	3301      	adds	r3, #1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800263a:	687b      	ldr	r3, [r7, #4]
}
 800263c:	4618      	mov	r0, r3
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40021000 	.word	0x40021000
 800264c:	007a1200 	.word	0x007a1200
 8002650:	00f42400 	.word	0x00f42400

08002654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800265c:	2300      	movs	r3, #0
 800265e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002660:	2300      	movs	r3, #0
 8002662:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8098 	beq.w	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002672:	2300      	movs	r3, #0
 8002674:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002676:	4b43      	ldr	r3, [pc, #268]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10d      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	4b40      	ldr	r3, [pc, #256]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	4a3f      	ldr	r2, [pc, #252]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	6593      	str	r3, [r2, #88]	; 0x58
 800268e:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269a:	2301      	movs	r3, #1
 800269c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800269e:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a39      	ldr	r2, [pc, #228]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026aa:	f7fe ff4f 	bl	800154c <HAL_GetTick>
 80026ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026b0:	e009      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b2:	f7fe ff4b 	bl	800154c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d902      	bls.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	74fb      	strb	r3, [r7, #19]
        break;
 80026c4:	e005      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026c6:	4b30      	ldr	r3, [pc, #192]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0ef      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026d2:	7cfb      	ldrb	r3, [r7, #19]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d159      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026d8:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d01e      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d019      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026f4:	4b23      	ldr	r3, [pc, #140]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002700:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	4a1f      	ldr	r2, [pc, #124]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002710:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	4a1b      	ldr	r2, [pc, #108]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002720:	4a18      	ldr	r2, [pc, #96]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d016      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7fe ff0b 	bl	800154c <HAL_GetTick>
 8002736:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002738:	e00b      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7fe ff07 	bl	800154c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d902      	bls.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	74fb      	strb	r3, [r7, #19]
            break;
 8002750:	e006      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ec      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10b      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002766:	4b07      	ldr	r3, [pc, #28]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	4903      	ldr	r1, [pc, #12]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800277c:	e008      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	74bb      	strb	r3, [r7, #18]
 8002782:	e005      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002784:	40021000 	.word	0x40021000
 8002788:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800278c:	7cfb      	ldrb	r3, [r7, #19]
 800278e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002790:	7c7b      	ldrb	r3, [r7, #17]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d105      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002796:	4ba6      	ldr	r3, [pc, #664]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	4aa5      	ldr	r2, [pc, #660]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ae:	4ba0      	ldr	r3, [pc, #640]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b4:	f023 0203 	bic.w	r2, r3, #3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	499c      	ldr	r1, [pc, #624]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027d0:	4b97      	ldr	r3, [pc, #604]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d6:	f023 020c 	bic.w	r2, r3, #12
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	4994      	ldr	r1, [pc, #592]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027f2:	4b8f      	ldr	r3, [pc, #572]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	498b      	ldr	r1, [pc, #556]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002814:	4b86      	ldr	r3, [pc, #536]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	4983      	ldr	r1, [pc, #524]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002836:	4b7e      	ldr	r3, [pc, #504]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	497a      	ldr	r1, [pc, #488]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002858:	4b75      	ldr	r3, [pc, #468]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	4972      	ldr	r1, [pc, #456]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800287a:	4b6d      	ldr	r3, [pc, #436]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	4969      	ldr	r1, [pc, #420]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800289c:	4b64      	ldr	r3, [pc, #400]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4961      	ldr	r1, [pc, #388]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028be:	4b5c      	ldr	r3, [pc, #368]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	4958      	ldr	r1, [pc, #352]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d015      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028e0:	4b53      	ldr	r3, [pc, #332]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	4950      	ldr	r1, [pc, #320]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028fe:	d105      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002900:	4b4b      	ldr	r3, [pc, #300]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a4a      	ldr	r2, [pc, #296]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800290a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002914:	2b00      	cmp	r3, #0
 8002916:	d015      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002918:	4b45      	ldr	r3, [pc, #276]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	4942      	ldr	r1, [pc, #264]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002936:	d105      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002938:	4b3d      	ldr	r3, [pc, #244]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a3c      	ldr	r2, [pc, #240]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002942:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d015      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002950:	4b37      	ldr	r3, [pc, #220]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	4934      	ldr	r1, [pc, #208]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800296e:	d105      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002970:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a2e      	ldr	r2, [pc, #184]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800297a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d015      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002988:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002996:	4926      	ldr	r1, [pc, #152]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a6:	d105      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a8:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a20      	ldr	r2, [pc, #128]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d015      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029c0:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	4918      	ldr	r1, [pc, #96]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029de:	d105      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a12      	ldr	r2, [pc, #72]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d015      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029f8:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a06:	490a      	ldr	r1, [pc, #40]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a16:	d105      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a24:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000

08002a34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e042      	b.n	8002acc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d106      	bne.n	8002a5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7fd ffa9 	bl	80009b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2224      	movs	r2, #36	; 0x24
 8002a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f996 	bl	8002da8 <UART_SetConfig>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e022      	b.n	8002acc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fc56 	bl	8003340 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ab2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fcdd 	bl	8003484 <UART_CheckIdleState>
 8002aca:	4603      	mov	r3, r0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08a      	sub	sp, #40	; 0x28
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	f040 8083 	bne.w	8002bf6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_UART_Transmit+0x28>
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e07b      	b.n	8002bf8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_UART_Transmit+0x3a>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e074      	b.n	8002bf8 <HAL_UART_Transmit+0x124>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2221      	movs	r2, #33	; 0x21
 8002b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b26:	f7fe fd11 	bl	800154c <HAL_GetTick>
 8002b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	88fa      	ldrh	r2, [r7, #6]
 8002b30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	88fa      	ldrh	r2, [r7, #6]
 8002b38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b44:	d108      	bne.n	8002b58 <HAL_UART_Transmit+0x84>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d104      	bne.n	8002b58 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	e003      	b.n	8002b60 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002b68:	e02c      	b.n	8002bc4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2200      	movs	r2, #0
 8002b72:	2180      	movs	r1, #128	; 0x80
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 fcd0 	bl	800351a <UART_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e039      	b.n	8002bf8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10b      	bne.n	8002ba2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	e007      	b.n	8002bb2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	781a      	ldrb	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1cc      	bne.n	8002b6a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2140      	movs	r1, #64	; 0x40
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fc9d 	bl	800351a <UART_WaitOnFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e006      	b.n	8002bf8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e000      	b.n	8002bf8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002bf6:	2302      	movs	r3, #2
  }
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3720      	adds	r7, #32
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	; 0x28
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	f040 80c0 	bne.w	8002d9c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_UART_Receive+0x28>
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0b8      	b.n	8002d9e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_UART_Receive+0x3a>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e0b1      	b.n	8002d9e <HAL_UART_Receive+0x19e>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2222      	movs	r2, #34	; 0x22
 8002c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c58:	f7fe fc78 	bl	800154c <HAL_GetTick>
 8002c5c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	88fa      	ldrh	r2, [r7, #6]
 8002c62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	88fa      	ldrh	r2, [r7, #6]
 8002c6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c76:	d10e      	bne.n	8002c96 <HAL_UART_Receive+0x96>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <HAL_UART_Receive+0x8c>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002c86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002c8a:	e02d      	b.n	8002ce8 <HAL_UART_Receive+0xe8>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	22ff      	movs	r2, #255	; 0xff
 8002c90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002c94:	e028      	b.n	8002ce8 <HAL_UART_Receive+0xe8>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10d      	bne.n	8002cba <HAL_UART_Receive+0xba>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d104      	bne.n	8002cb0 <HAL_UART_Receive+0xb0>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	22ff      	movs	r2, #255	; 0xff
 8002caa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002cae:	e01b      	b.n	8002ce8 <HAL_UART_Receive+0xe8>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	227f      	movs	r2, #127	; 0x7f
 8002cb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002cb8:	e016      	b.n	8002ce8 <HAL_UART_Receive+0xe8>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cc2:	d10d      	bne.n	8002ce0 <HAL_UART_Receive+0xe0>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <HAL_UART_Receive+0xd6>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	227f      	movs	r2, #127	; 0x7f
 8002cd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002cd4:	e008      	b.n	8002ce8 <HAL_UART_Receive+0xe8>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	223f      	movs	r2, #63	; 0x3f
 8002cda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002cde:	e003      	b.n	8002ce8 <HAL_UART_Receive+0xe8>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002cee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf8:	d108      	bne.n	8002d0c <HAL_UART_Receive+0x10c>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d104      	bne.n	8002d0c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	e003      	b.n	8002d14 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002d1c:	e032      	b.n	8002d84 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2200      	movs	r2, #0
 8002d26:	2120      	movs	r1, #32
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 fbf6 	bl	800351a <UART_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e032      	b.n	8002d9e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10c      	bne.n	8002d58 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	8a7b      	ldrh	r3, [r7, #18]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	3302      	adds	r3, #2
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	e00c      	b.n	8002d72 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	8a7b      	ldrh	r3, [r7, #18]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	4013      	ands	r3, r2
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1c6      	bne.n	8002d1e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e000      	b.n	8002d9e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8002d9c:	2302      	movs	r3, #2
  }
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dac:	b08c      	sub	sp, #48	; 0x30
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	4bab      	ldr	r3, [pc, #684]	; (8003084 <UART_SetConfig+0x2dc>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002de0:	430b      	orrs	r3, r1
 8002de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4aa0      	ldr	r2, [pc, #640]	; (8003088 <UART_SetConfig+0x2e0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d004      	beq.n	8002e14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e10:	4313      	orrs	r3, r2
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	f023 010f 	bic.w	r1, r3, #15
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a91      	ldr	r2, [pc, #580]	; (800308c <UART_SetConfig+0x2e4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d125      	bne.n	8002e98 <UART_SetConfig+0xf0>
 8002e4c:	4b90      	ldr	r3, [pc, #576]	; (8003090 <UART_SetConfig+0x2e8>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d81a      	bhi.n	8002e90 <UART_SetConfig+0xe8>
 8002e5a:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <UART_SetConfig+0xb8>)
 8002e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e60:	08002e71 	.word	0x08002e71
 8002e64:	08002e81 	.word	0x08002e81
 8002e68:	08002e79 	.word	0x08002e79
 8002e6c:	08002e89 	.word	0x08002e89
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e76:	e0d6      	b.n	8003026 <UART_SetConfig+0x27e>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e7e:	e0d2      	b.n	8003026 <UART_SetConfig+0x27e>
 8002e80:	2304      	movs	r3, #4
 8002e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e86:	e0ce      	b.n	8003026 <UART_SetConfig+0x27e>
 8002e88:	2308      	movs	r3, #8
 8002e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e8e:	e0ca      	b.n	8003026 <UART_SetConfig+0x27e>
 8002e90:	2310      	movs	r3, #16
 8002e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e96:	e0c6      	b.n	8003026 <UART_SetConfig+0x27e>
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a7d      	ldr	r2, [pc, #500]	; (8003094 <UART_SetConfig+0x2ec>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d138      	bne.n	8002f14 <UART_SetConfig+0x16c>
 8002ea2:	4b7b      	ldr	r3, [pc, #492]	; (8003090 <UART_SetConfig+0x2e8>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	2b0c      	cmp	r3, #12
 8002eae:	d82d      	bhi.n	8002f0c <UART_SetConfig+0x164>
 8002eb0:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <UART_SetConfig+0x110>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	08002eed 	.word	0x08002eed
 8002ebc:	08002f0d 	.word	0x08002f0d
 8002ec0:	08002f0d 	.word	0x08002f0d
 8002ec4:	08002f0d 	.word	0x08002f0d
 8002ec8:	08002efd 	.word	0x08002efd
 8002ecc:	08002f0d 	.word	0x08002f0d
 8002ed0:	08002f0d 	.word	0x08002f0d
 8002ed4:	08002f0d 	.word	0x08002f0d
 8002ed8:	08002ef5 	.word	0x08002ef5
 8002edc:	08002f0d 	.word	0x08002f0d
 8002ee0:	08002f0d 	.word	0x08002f0d
 8002ee4:	08002f0d 	.word	0x08002f0d
 8002ee8:	08002f05 	.word	0x08002f05
 8002eec:	2300      	movs	r3, #0
 8002eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ef2:	e098      	b.n	8003026 <UART_SetConfig+0x27e>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002efa:	e094      	b.n	8003026 <UART_SetConfig+0x27e>
 8002efc:	2304      	movs	r3, #4
 8002efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f02:	e090      	b.n	8003026 <UART_SetConfig+0x27e>
 8002f04:	2308      	movs	r3, #8
 8002f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f0a:	e08c      	b.n	8003026 <UART_SetConfig+0x27e>
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f12:	e088      	b.n	8003026 <UART_SetConfig+0x27e>
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a5f      	ldr	r2, [pc, #380]	; (8003098 <UART_SetConfig+0x2f0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d125      	bne.n	8002f6a <UART_SetConfig+0x1c2>
 8002f1e:	4b5c      	ldr	r3, [pc, #368]	; (8003090 <UART_SetConfig+0x2e8>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f28:	2b30      	cmp	r3, #48	; 0x30
 8002f2a:	d016      	beq.n	8002f5a <UART_SetConfig+0x1b2>
 8002f2c:	2b30      	cmp	r3, #48	; 0x30
 8002f2e:	d818      	bhi.n	8002f62 <UART_SetConfig+0x1ba>
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d00a      	beq.n	8002f4a <UART_SetConfig+0x1a2>
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d814      	bhi.n	8002f62 <UART_SetConfig+0x1ba>
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <UART_SetConfig+0x19a>
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d008      	beq.n	8002f52 <UART_SetConfig+0x1aa>
 8002f40:	e00f      	b.n	8002f62 <UART_SetConfig+0x1ba>
 8002f42:	2300      	movs	r3, #0
 8002f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f48:	e06d      	b.n	8003026 <UART_SetConfig+0x27e>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f50:	e069      	b.n	8003026 <UART_SetConfig+0x27e>
 8002f52:	2304      	movs	r3, #4
 8002f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f58:	e065      	b.n	8003026 <UART_SetConfig+0x27e>
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f60:	e061      	b.n	8003026 <UART_SetConfig+0x27e>
 8002f62:	2310      	movs	r3, #16
 8002f64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f68:	e05d      	b.n	8003026 <UART_SetConfig+0x27e>
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a4b      	ldr	r2, [pc, #300]	; (800309c <UART_SetConfig+0x2f4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d125      	bne.n	8002fc0 <UART_SetConfig+0x218>
 8002f74:	4b46      	ldr	r3, [pc, #280]	; (8003090 <UART_SetConfig+0x2e8>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f7e:	2bc0      	cmp	r3, #192	; 0xc0
 8002f80:	d016      	beq.n	8002fb0 <UART_SetConfig+0x208>
 8002f82:	2bc0      	cmp	r3, #192	; 0xc0
 8002f84:	d818      	bhi.n	8002fb8 <UART_SetConfig+0x210>
 8002f86:	2b80      	cmp	r3, #128	; 0x80
 8002f88:	d00a      	beq.n	8002fa0 <UART_SetConfig+0x1f8>
 8002f8a:	2b80      	cmp	r3, #128	; 0x80
 8002f8c:	d814      	bhi.n	8002fb8 <UART_SetConfig+0x210>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <UART_SetConfig+0x1f0>
 8002f92:	2b40      	cmp	r3, #64	; 0x40
 8002f94:	d008      	beq.n	8002fa8 <UART_SetConfig+0x200>
 8002f96:	e00f      	b.n	8002fb8 <UART_SetConfig+0x210>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f9e:	e042      	b.n	8003026 <UART_SetConfig+0x27e>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fa6:	e03e      	b.n	8003026 <UART_SetConfig+0x27e>
 8002fa8:	2304      	movs	r3, #4
 8002faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fae:	e03a      	b.n	8003026 <UART_SetConfig+0x27e>
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fb6:	e036      	b.n	8003026 <UART_SetConfig+0x27e>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fbe:	e032      	b.n	8003026 <UART_SetConfig+0x27e>
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a30      	ldr	r2, [pc, #192]	; (8003088 <UART_SetConfig+0x2e0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d12a      	bne.n	8003020 <UART_SetConfig+0x278>
 8002fca:	4b31      	ldr	r3, [pc, #196]	; (8003090 <UART_SetConfig+0x2e8>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fd8:	d01a      	beq.n	8003010 <UART_SetConfig+0x268>
 8002fda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fde:	d81b      	bhi.n	8003018 <UART_SetConfig+0x270>
 8002fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe4:	d00c      	beq.n	8003000 <UART_SetConfig+0x258>
 8002fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fea:	d815      	bhi.n	8003018 <UART_SetConfig+0x270>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <UART_SetConfig+0x250>
 8002ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff4:	d008      	beq.n	8003008 <UART_SetConfig+0x260>
 8002ff6:	e00f      	b.n	8003018 <UART_SetConfig+0x270>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ffe:	e012      	b.n	8003026 <UART_SetConfig+0x27e>
 8003000:	2302      	movs	r3, #2
 8003002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003006:	e00e      	b.n	8003026 <UART_SetConfig+0x27e>
 8003008:	2304      	movs	r3, #4
 800300a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800300e:	e00a      	b.n	8003026 <UART_SetConfig+0x27e>
 8003010:	2308      	movs	r3, #8
 8003012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003016:	e006      	b.n	8003026 <UART_SetConfig+0x27e>
 8003018:	2310      	movs	r3, #16
 800301a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800301e:	e002      	b.n	8003026 <UART_SetConfig+0x27e>
 8003020:	2310      	movs	r3, #16
 8003022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a17      	ldr	r2, [pc, #92]	; (8003088 <UART_SetConfig+0x2e0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	f040 80a8 	bne.w	8003182 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003032:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003036:	2b08      	cmp	r3, #8
 8003038:	d834      	bhi.n	80030a4 <UART_SetConfig+0x2fc>
 800303a:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <UART_SetConfig+0x298>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	08003065 	.word	0x08003065
 8003044:	080030a5 	.word	0x080030a5
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030a5 	.word	0x080030a5
 8003050:	08003073 	.word	0x08003073
 8003054:	080030a5 	.word	0x080030a5
 8003058:	080030a5 	.word	0x080030a5
 800305c:	080030a5 	.word	0x080030a5
 8003060:	0800307b 	.word	0x0800307b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003064:	f7ff fa84 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 8003068:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800306a:	e021      	b.n	80030b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <UART_SetConfig+0x2f8>)
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003070:	e01e      	b.n	80030b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003072:	f7ff fa0f 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8003076:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003078:	e01a      	b.n	80030b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800307a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003080:	e016      	b.n	80030b0 <UART_SetConfig+0x308>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80030ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 812a 	beq.w	800330c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	4a9e      	ldr	r2, [pc, #632]	; (8003338 <UART_SetConfig+0x590>)
 80030be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030c2:	461a      	mov	r2, r3
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d305      	bcc.n	80030e8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d903      	bls.n	80030f0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80030ee:	e10d      	b.n	800330c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	2200      	movs	r2, #0
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	60fa      	str	r2, [r7, #12]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	4a8e      	ldr	r2, [pc, #568]	; (8003338 <UART_SetConfig+0x590>)
 80030fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003102:	b29b      	uxth	r3, r3
 8003104:	2200      	movs	r2, #0
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800310e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003112:	f7fd f889 	bl	8000228 <__aeabi_uldivmod>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	020b      	lsls	r3, r1, #8
 8003128:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312c:	0202      	lsls	r2, r0, #8
 800312e:	6979      	ldr	r1, [r7, #20]
 8003130:	6849      	ldr	r1, [r1, #4]
 8003132:	0849      	lsrs	r1, r1, #1
 8003134:	2000      	movs	r0, #0
 8003136:	460c      	mov	r4, r1
 8003138:	4605      	mov	r5, r0
 800313a:	eb12 0804 	adds.w	r8, r2, r4
 800313e:	eb43 0905 	adc.w	r9, r3, r5
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	469a      	mov	sl, r3
 800314a:	4693      	mov	fp, r2
 800314c:	4652      	mov	r2, sl
 800314e:	465b      	mov	r3, fp
 8003150:	4640      	mov	r0, r8
 8003152:	4649      	mov	r1, r9
 8003154:	f7fd f868 	bl	8000228 <__aeabi_uldivmod>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4613      	mov	r3, r2
 800315e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003166:	d308      	bcc.n	800317a <UART_SetConfig+0x3d2>
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800316e:	d204      	bcs.n	800317a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6a3a      	ldr	r2, [r7, #32]
 8003176:	60da      	str	r2, [r3, #12]
 8003178:	e0c8      	b.n	800330c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003180:	e0c4      	b.n	800330c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800318a:	d167      	bne.n	800325c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800318c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003190:	2b08      	cmp	r3, #8
 8003192:	d828      	bhi.n	80031e6 <UART_SetConfig+0x43e>
 8003194:	a201      	add	r2, pc, #4	; (adr r2, 800319c <UART_SetConfig+0x3f4>)
 8003196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319a:	bf00      	nop
 800319c:	080031c1 	.word	0x080031c1
 80031a0:	080031c9 	.word	0x080031c9
 80031a4:	080031d1 	.word	0x080031d1
 80031a8:	080031e7 	.word	0x080031e7
 80031ac:	080031d7 	.word	0x080031d7
 80031b0:	080031e7 	.word	0x080031e7
 80031b4:	080031e7 	.word	0x080031e7
 80031b8:	080031e7 	.word	0x080031e7
 80031bc:	080031df 	.word	0x080031df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c0:	f7ff f9d6 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 80031c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80031c6:	e014      	b.n	80031f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031c8:	f7ff f9e8 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 80031cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80031ce:	e010      	b.n	80031f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031d0:	4b5a      	ldr	r3, [pc, #360]	; (800333c <UART_SetConfig+0x594>)
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80031d4:	e00d      	b.n	80031f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031d6:	f7ff f95d 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 80031da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80031dc:	e009      	b.n	80031f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80031e4:	e005      	b.n	80031f2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80031f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 8089 	beq.w	800330c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	4a4e      	ldr	r2, [pc, #312]	; (8003338 <UART_SetConfig+0x590>)
 8003200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003204:	461a      	mov	r2, r3
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	fbb3 f3f2 	udiv	r3, r3, r2
 800320c:	005a      	lsls	r2, r3, #1
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	085b      	lsrs	r3, r3, #1
 8003214:	441a      	add	r2, r3
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	fbb2 f3f3 	udiv	r3, r2, r3
 800321e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	2b0f      	cmp	r3, #15
 8003224:	d916      	bls.n	8003254 <UART_SetConfig+0x4ac>
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322c:	d212      	bcs.n	8003254 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	b29b      	uxth	r3, r3
 8003232:	f023 030f 	bic.w	r3, r3, #15
 8003236:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	085b      	lsrs	r3, r3, #1
 800323c:	b29b      	uxth	r3, r3
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	b29a      	uxth	r2, r3
 8003244:	8bfb      	ldrh	r3, [r7, #30]
 8003246:	4313      	orrs	r3, r2
 8003248:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	8bfa      	ldrh	r2, [r7, #30]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	e05b      	b.n	800330c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800325a:	e057      	b.n	800330c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800325c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003260:	2b08      	cmp	r3, #8
 8003262:	d828      	bhi.n	80032b6 <UART_SetConfig+0x50e>
 8003264:	a201      	add	r2, pc, #4	; (adr r2, 800326c <UART_SetConfig+0x4c4>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	08003291 	.word	0x08003291
 8003270:	08003299 	.word	0x08003299
 8003274:	080032a1 	.word	0x080032a1
 8003278:	080032b7 	.word	0x080032b7
 800327c:	080032a7 	.word	0x080032a7
 8003280:	080032b7 	.word	0x080032b7
 8003284:	080032b7 	.word	0x080032b7
 8003288:	080032b7 	.word	0x080032b7
 800328c:	080032af 	.word	0x080032af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003290:	f7ff f96e 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 8003294:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003296:	e014      	b.n	80032c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003298:	f7ff f980 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 800329c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800329e:	e010      	b.n	80032c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032a0:	4b26      	ldr	r3, [pc, #152]	; (800333c <UART_SetConfig+0x594>)
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032a4:	e00d      	b.n	80032c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032a6:	f7ff f8f5 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 80032aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032ac:	e009      	b.n	80032c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032b4:	e005      	b.n	80032c2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80032c0:	bf00      	nop
    }

    if (pclk != 0U)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d021      	beq.n	800330c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	4a1a      	ldr	r2, [pc, #104]	; (8003338 <UART_SetConfig+0x590>)
 80032ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032d2:	461a      	mov	r2, r3
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	441a      	add	r2, r3
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	2b0f      	cmp	r3, #15
 80032f0:	d909      	bls.n	8003306 <UART_SetConfig+0x55e>
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f8:	d205      	bcs.n	8003306 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60da      	str	r2, [r3, #12]
 8003304:	e002      	b.n	800330c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2201      	movs	r2, #1
 8003310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2201      	movs	r2, #1
 8003318:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2200      	movs	r2, #0
 8003320:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2200      	movs	r2, #0
 8003326:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003328:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800332c:	4618      	mov	r0, r3
 800332e:	3730      	adds	r7, #48	; 0x30
 8003330:	46bd      	mov	sp, r7
 8003332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003336:	bf00      	nop
 8003338:	08004f44 	.word	0x08004f44
 800333c:	00f42400 	.word	0x00f42400

08003340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01a      	beq.n	8003456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800343e:	d10a      	bne.n	8003456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	605a      	str	r2, [r3, #4]
  }
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af02      	add	r7, sp, #8
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003494:	f7fe f85a 	bl	800154c <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d10e      	bne.n	80034c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f82f 	bl	800351a <UART_WaitOnFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e025      	b.n	8003512 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d10e      	bne.n	80034f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f819 	bl	800351a <UART_WaitOnFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e00f      	b.n	8003512 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b09c      	sub	sp, #112	; 0x70
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	4613      	mov	r3, r2
 8003528:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800352a:	e0a9      	b.n	8003680 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800352e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003532:	f000 80a5 	beq.w	8003680 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7fe f809 	bl	800154c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <UART_WaitOnFlagUntilTimeout+0x32>
 8003546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003548:	2b00      	cmp	r3, #0
 800354a:	d140      	bne.n	80035ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800355a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800355c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003560:	667b      	str	r3, [r7, #100]	; 0x64
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800356a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800356c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003570:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e6      	bne.n	800354c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3308      	adds	r3, #8
 8003584:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003588:	e853 3f00 	ldrex	r3, [r3]
 800358c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	663b      	str	r3, [r7, #96]	; 0x60
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3308      	adds	r3, #8
 800359c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800359e:	64ba      	str	r2, [r7, #72]	; 0x48
 80035a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e5      	bne.n	800357e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e069      	b.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d051      	beq.n	8003680 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ea:	d149      	bne.n	8003680 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fe:	e853 3f00 	ldrex	r3, [r3]
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800360a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003614:	637b      	str	r3, [r7, #52]	; 0x34
 8003616:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003618:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800361a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800361c:	e841 2300 	strex	r3, r2, [r1]
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1e6      	bne.n	80035f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3308      	adds	r3, #8
 800362e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	613b      	str	r3, [r7, #16]
   return(result);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3308      	adds	r3, #8
 8003646:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003648:	623a      	str	r2, [r7, #32]
 800364a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	69f9      	ldr	r1, [r7, #28]
 800364e:	6a3a      	ldr	r2, [r7, #32]
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	61bb      	str	r3, [r7, #24]
   return(result);
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e5      	bne.n	8003628 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e010      	b.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69da      	ldr	r2, [r3, #28]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	4013      	ands	r3, r2
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	429a      	cmp	r2, r3
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	429a      	cmp	r2, r3
 800369c:	f43f af46 	beq.w	800352c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3770      	adds	r7, #112	; 0x70
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80036bc:	2302      	movs	r3, #2
 80036be:	e027      	b.n	8003710 <HAL_UARTEx_DisableFifoMode+0x66>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2224      	movs	r2, #36	; 0x24
 80036cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0201 	bic.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80036ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003730:	2302      	movs	r3, #2
 8003732:	e02d      	b.n	8003790 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2224      	movs	r2, #36	; 0x24
 8003740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f84f 	bl	8003814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e02d      	b.n	800380c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f811 	bl	8003814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003820:	2b00      	cmp	r3, #0
 8003822:	d108      	bne.n	8003836 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003834:	e031      	b.n	800389a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003836:	2308      	movs	r3, #8
 8003838:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800383a:	2308      	movs	r3, #8
 800383c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	0e5b      	lsrs	r3, r3, #25
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	0f5b      	lsrs	r3, r3, #29
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800385e:	7bbb      	ldrb	r3, [r7, #14]
 8003860:	7b3a      	ldrb	r2, [r7, #12]
 8003862:	4911      	ldr	r1, [pc, #68]	; (80038a8 <UARTEx_SetNbDataToProcess+0x94>)
 8003864:	5c8a      	ldrb	r2, [r1, r2]
 8003866:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800386a:	7b3a      	ldrb	r2, [r7, #12]
 800386c:	490f      	ldr	r1, [pc, #60]	; (80038ac <UARTEx_SetNbDataToProcess+0x98>)
 800386e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003870:	fb93 f3f2 	sdiv	r3, r3, r2
 8003874:	b29a      	uxth	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	7b7a      	ldrb	r2, [r7, #13]
 8003880:	4909      	ldr	r1, [pc, #36]	; (80038a8 <UARTEx_SetNbDataToProcess+0x94>)
 8003882:	5c8a      	ldrb	r2, [r1, r2]
 8003884:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003888:	7b7a      	ldrb	r2, [r7, #13]
 800388a:	4908      	ldr	r1, [pc, #32]	; (80038ac <UARTEx_SetNbDataToProcess+0x98>)
 800388c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800388e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003892:	b29a      	uxth	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	08004f5c 	.word	0x08004f5c
 80038ac:	08004f64 	.word	0x08004f64

080038b0 <__libc_init_array>:
 80038b0:	b570      	push	{r4, r5, r6, lr}
 80038b2:	4d0d      	ldr	r5, [pc, #52]	; (80038e8 <__libc_init_array+0x38>)
 80038b4:	4c0d      	ldr	r4, [pc, #52]	; (80038ec <__libc_init_array+0x3c>)
 80038b6:	1b64      	subs	r4, r4, r5
 80038b8:	10a4      	asrs	r4, r4, #2
 80038ba:	2600      	movs	r6, #0
 80038bc:	42a6      	cmp	r6, r4
 80038be:	d109      	bne.n	80038d4 <__libc_init_array+0x24>
 80038c0:	4d0b      	ldr	r5, [pc, #44]	; (80038f0 <__libc_init_array+0x40>)
 80038c2:	4c0c      	ldr	r4, [pc, #48]	; (80038f4 <__libc_init_array+0x44>)
 80038c4:	f000 f820 	bl	8003908 <_init>
 80038c8:	1b64      	subs	r4, r4, r5
 80038ca:	10a4      	asrs	r4, r4, #2
 80038cc:	2600      	movs	r6, #0
 80038ce:	42a6      	cmp	r6, r4
 80038d0:	d105      	bne.n	80038de <__libc_init_array+0x2e>
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
 80038d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d8:	4798      	blx	r3
 80038da:	3601      	adds	r6, #1
 80038dc:	e7ee      	b.n	80038bc <__libc_init_array+0xc>
 80038de:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e2:	4798      	blx	r3
 80038e4:	3601      	adds	r6, #1
 80038e6:	e7f2      	b.n	80038ce <__libc_init_array+0x1e>
 80038e8:	08004f74 	.word	0x08004f74
 80038ec:	08004f74 	.word	0x08004f74
 80038f0:	08004f74 	.word	0x08004f74
 80038f4:	08004f78 	.word	0x08004f78

080038f8 <memset>:
 80038f8:	4402      	add	r2, r0
 80038fa:	4603      	mov	r3, r0
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d100      	bne.n	8003902 <memset+0xa>
 8003900:	4770      	bx	lr
 8003902:	f803 1b01 	strb.w	r1, [r3], #1
 8003906:	e7f9      	b.n	80038fc <memset+0x4>

08003908 <_init>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	bf00      	nop
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr

08003914 <_fini>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	bf00      	nop
 8003918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391a:	bc08      	pop	{r3}
 800391c:	469e      	mov	lr, r3
 800391e:	4770      	bx	lr
